"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[849],{86164:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Introduction","href":"/docs/intro","docId":"intro","unlisted":false},{"type":"category","label":"Programming","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/docs/programming/introduction","docId":"programming/introduction","unlisted":false},{"type":"category","label":"Programming Languages","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"Python","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/docs/programming/programming-languages/python/introduction","docId":"programming/programming-languages/python/introduction","unlisted":false},{"type":"link","label":"Python Basics","href":"/docs/programming/programming-languages/python/python-basics","docId":"programming/programming-languages/python/python-basics","unlisted":false},{"type":"link","label":"Variable Scoping","href":"/docs/programming/programming-languages/python/scoping","docId":"programming/programming-languages/python/scoping","unlisted":false},{"type":"link","label":"Common Data Structures in Python","href":"/docs/programming/programming-languages/python/data-structure","docId":"programming/programming-languages/python/data-structure","unlisted":false},{"type":"link","label":"Loops, Control Structures, and Functions","href":"/docs/programming/programming-languages/python/loop-control-functions","docId":"programming/programming-languages/python/loop-control-functions","unlisted":false},{"type":"link","label":"*args and **kwargs","href":"/docs/programming/programming-languages/python/args-kwargs","docId":"programming/programming-languages/python/args-kwargs","unlisted":false},{"type":"link","label":"Standard Library","href":"/docs/programming/programming-languages/python/standard-library","docId":"programming/programming-languages/python/standard-library","unlisted":false},{"type":"link","label":"Pythonic Code","href":"/docs/programming/programming-languages/python/pythonic-code","docId":"programming/programming-languages/python/pythonic-code","unlisted":false},{"type":"link","label":"Object-Oriented Programming (OOP)","href":"/docs/programming/programming-languages/python/oop","docId":"programming/programming-languages/python/oop","unlisted":false},{"type":"link","label":"Exception Handling","href":"/docs/programming/programming-languages/python/exceptions","docId":"programming/programming-languages/python/exceptions","unlisted":false},{"type":"link","label":"Context Managers","href":"/docs/programming/programming-languages/python/context-manager","docId":"programming/programming-languages/python/context-manager","unlisted":false},{"type":"link","label":"File Handling","href":"/docs/programming/programming-languages/python/file-handling","docId":"programming/programming-languages/python/file-handling","unlisted":false},{"type":"link","label":"Iterators and Generators","href":"/docs/programming/programming-languages/python/iterators-generators","docId":"programming/programming-languages/python/iterators-generators","unlisted":false},{"type":"link","label":"Threading","href":"/docs/programming/programming-languages/python/threads","docId":"programming/programming-languages/python/threads","unlisted":false},{"type":"link","label":"Multiprocessing","href":"/docs/programming/programming-languages/python/multiprocessing","docId":"programming/programming-languages/python/multiprocessing","unlisted":false},{"type":"link","label":"Asynchronous Programming","href":"/docs/programming/programming-languages/python/async","docId":"programming/programming-languages/python/async","unlisted":false},{"type":"link","label":"Metaprogramming","href":"/docs/programming/programming-languages/python/metaprogramming","docId":"programming/programming-languages/python/metaprogramming","unlisted":false},{"type":"link","label":"Decorators","href":"/docs/programming/programming-languages/python/decorator","docId":"programming/programming-languages/python/decorator","unlisted":false},{"type":"link","label":"Unit Testing","href":"/docs/programming/programming-languages/python/unit-test","docId":"programming/programming-languages/python/unit-test","unlisted":false},{"type":"link","label":"Pytest","href":"/docs/programming/programming-languages/python/pytest","docId":"programming/programming-languages/python/pytest","unlisted":false},{"type":"link","label":"Execution Flow","href":"/docs/programming/programming-languages/python/execution-flow","docId":"programming/programming-languages/python/execution-flow","unlisted":false},{"type":"link","label":"Memory Management","href":"/docs/programming/programming-languages/python/memory-management","docId":"programming/programming-languages/python/memory-management","unlisted":false},{"type":"link","label":"Reference Counting","href":"/docs/programming/programming-languages/python/reference-counting","docId":"programming/programming-languages/python/reference-counting","unlisted":false},{"type":"link","label":"Generational Garbage Collection","href":"/docs/programming/programming-languages/python/generational-garbage-collector","docId":"programming/programming-languages/python/generational-garbage-collector","unlisted":false}]},{"type":"category","label":"JavaScript","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/docs/programming/programming-languages/javascript/introduction","docId":"programming/programming-languages/javascript/introduction","unlisted":false},{"type":"link","label":"Variables","href":"/docs/programming/programming-languages/javascript/variables","docId":"programming/programming-languages/javascript/variables","unlisted":false},{"type":"link","label":"Data Types","href":"/docs/programming/programming-languages/javascript/data-types","docId":"programming/programming-languages/javascript/data-types","unlisted":false},{"type":"link","label":"Mutation and Immutability","href":"/docs/programming/programming-languages/javascript/mutation","docId":"programming/programming-languages/javascript/mutation","unlisted":false},{"type":"link","label":"Functions","href":"/docs/programming/programming-languages/javascript/functions","docId":"programming/programming-languages/javascript/functions","unlisted":false},{"type":"link","label":"Asynchronous Programming","href":"/docs/programming/programming-languages/javascript/asynchronous","docId":"programming/programming-languages/javascript/asynchronous","unlisted":false},{"type":"link","label":"Conditions and Loops","href":"/docs/programming/programming-languages/javascript/conditions-loops","docId":"programming/programming-languages/javascript/conditions-loops","unlisted":false},{"type":"link","label":"Execution Context","href":"/docs/programming/programming-languages/javascript/execution-context","docId":"programming/programming-languages/javascript/execution-context","unlisted":false},{"type":"link","label":"Call Stack","href":"/docs/programming/programming-languages/javascript/call-stack","docId":"programming/programming-languages/javascript/call-stack","unlisted":false},{"type":"link","label":"Microtask Queue, Macrotask Queue, and Rendering Queue","href":"/docs/programming/programming-languages/javascript/queues","docId":"programming/programming-languages/javascript/queues","unlisted":false},{"type":"link","label":"Event Loop","href":"/docs/programming/programming-languages/javascript/event-loop","docId":"programming/programming-languages/javascript/event-loop","unlisted":false},{"type":"link","label":"Closures and Lexical Scoping","href":"/docs/programming/programming-languages/javascript/closures","docId":"programming/programming-languages/javascript/closures","unlisted":false},{"type":"link","label":"Callbacks and Higher-Order Functions","href":"/docs/programming/programming-languages/javascript/callback-hof","docId":"programming/programming-languages/javascript/callback-hof","unlisted":false},{"type":"link","label":"Currying and IIFE","href":"/docs/programming/programming-languages/javascript/currying-iife","docId":"programming/programming-languages/javascript/currying-iife","unlisted":false},{"type":"link","label":"Prototypes and Inheritance","href":"/docs/programming/programming-languages/javascript/prototype-inheritance","docId":"programming/programming-languages/javascript/prototype-inheritance","unlisted":false},{"type":"link","label":"Object-Oriented Programming (OOPs)","href":"/docs/programming/programming-languages/javascript/oop","docId":"programming/programming-languages/javascript/oop","unlisted":false},{"type":"link","label":"Type Coercion vs Type Conversion","href":"/docs/programming/programming-languages/javascript/coercion-conversion","docId":"programming/programming-languages/javascript/coercion-conversion","unlisted":false},{"type":"link","label":"The this Keyword","href":"/docs/programming/programming-languages/javascript/this","docId":"programming/programming-languages/javascript/this","unlisted":false},{"type":"link","label":"\\"use strict\\"","href":"/docs/programming/programming-languages/javascript/use-strict","docId":"programming/programming-languages/javascript/use-strict","unlisted":false},{"type":"link","label":"Event Handling","href":"/docs/programming/programming-languages/javascript/event-handling","docId":"programming/programming-languages/javascript/event-handling","unlisted":false},{"type":"link","label":"ES6 and Beyond","href":"/docs/programming/programming-languages/javascript/es6","docId":"programming/programming-languages/javascript/es6","unlisted":false},{"type":"link","label":"Concurrency and Parallelism","href":"/docs/programming/programming-languages/javascript/concurrency-and-parallelism","docId":"programming/programming-languages/javascript/concurrency-and-parallelism","unlisted":false}]},{"type":"category","label":"Go","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/docs/programming/programming-languages/go/introduction","docId":"programming/programming-languages/go/introduction","unlisted":false},{"type":"link","label":"Packages and Modules","href":"/docs/programming/programming-languages/go/packages-modules","docId":"programming/programming-languages/go/packages-modules","unlisted":false},{"type":"link","label":"Variables and Scope","href":"/docs/programming/programming-languages/go/variable","docId":"programming/programming-languages/go/variable","unlisted":false},{"type":"link","label":"Mutation","href":"/docs/programming/programming-languages/go/mutation","docId":"programming/programming-languages/go/mutation","unlisted":false},{"type":"link","label":"fmt Package","href":"/docs/programming/programming-languages/go/fmt-package","docId":"programming/programming-languages/go/fmt-package","unlisted":false},{"type":"link","label":"Conditions and Loops","href":"/docs/programming/programming-languages/go/condition","docId":"programming/programming-languages/go/condition","unlisted":false},{"type":"link","label":"Functions","href":"/docs/programming/programming-languages/go/functions","docId":"programming/programming-languages/go/functions","unlisted":false},{"type":"link","label":"Error Handling","href":"/docs/programming/programming-languages/go/error-handling","docId":"programming/programming-languages/go/error-handling","unlisted":false},{"type":"link","label":"File Handling","href":"/docs/programming/programming-languages/go/files","docId":"programming/programming-languages/go/files","unlisted":false},{"type":"link","label":"Pointers","href":"/docs/programming/programming-languages/go/pointers","docId":"programming/programming-languages/go/pointers","unlisted":false},{"type":"link","label":"Structs and Custom Types","href":"/docs/programming/programming-languages/go/structs","docId":"programming/programming-languages/go/structs","unlisted":false},{"type":"link","label":"Interfaces and Generics","href":"/docs/programming/programming-languages/go/interfaces","docId":"programming/programming-languages/go/interfaces","unlisted":false},{"type":"link","label":"Arrays, Slices and, Maps","href":"/docs/programming/programming-languages/go/array-maps","docId":"programming/programming-languages/go/array-maps","unlisted":false}]}]},{"type":"category","label":"Fundamentals","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Regular Expressions (RegEx)","href":"/docs/programming/fundamentals/regex","docId":"programming/fundamentals/regex","unlisted":false}]}]},{"type":"category","label":"Framework and Libraries","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/docs/frameworks-libraries/introduction","docId":"frameworks-libraries/introduction","unlisted":false},{"type":"category","label":"Backend","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"Django","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/docs/frameworks-libraries/backend/django/introduction","docId":"frameworks-libraries/backend/django/introduction","unlisted":false},{"type":"link","label":"Django Rest Framework (DRF)","href":"/docs/frameworks-libraries/backend/django/drf-intro","docId":"frameworks-libraries/backend/django/drf-intro","unlisted":false},{"type":"link","label":"Project Setup","href":"/docs/frameworks-libraries/backend/django/project-setup","docId":"frameworks-libraries/backend/django/project-setup","unlisted":false},{"type":"link","label":"File Structure","href":"/docs/frameworks-libraries/backend/django/file-structure","docId":"frameworks-libraries/backend/django/file-structure","unlisted":false},{"type":"link","label":"Project Structure","href":"/docs/frameworks-libraries/backend/django/project-structure","docId":"frameworks-libraries/backend/django/project-structure","unlisted":false},{"type":"link","label":"Models and ORM","href":"/docs/frameworks-libraries/backend/django/model-orm","docId":"frameworks-libraries/backend/django/model-orm","unlisted":false},{"type":"link","label":"Serializers","href":"/docs/frameworks-libraries/backend/django/serializers","docId":"frameworks-libraries/backend/django/serializers","unlisted":false},{"type":"link","label":"Views","href":"/docs/frameworks-libraries/backend/django/views","docId":"frameworks-libraries/backend/django/views","unlisted":false},{"type":"link","label":"Authentication","href":"/docs/frameworks-libraries/backend/django/authentication","docId":"frameworks-libraries/backend/django/authentication","unlisted":false},{"type":"link","label":"Permissions, Access Control, Throttling","href":"/docs/frameworks-libraries/backend/django/permissions","docId":"frameworks-libraries/backend/django/permissions","unlisted":false},{"type":"link","label":"Querying and Filtering","href":"/docs/frameworks-libraries/backend/django/querying-filtering","docId":"frameworks-libraries/backend/django/querying-filtering","unlisted":false},{"type":"link","label":"Nested Relationships and Hyperlinked APIs","href":"/docs/frameworks-libraries/backend/django/hyperlinks","docId":"frameworks-libraries/backend/django/hyperlinks","unlisted":false},{"type":"link","label":"Error Handling and Response Customization","href":"/docs/frameworks-libraries/backend/django/error-handling","docId":"frameworks-libraries/backend/django/error-handling","unlisted":false},{"type":"link","label":"Testing","href":"/docs/frameworks-libraries/backend/django/testing","docId":"frameworks-libraries/backend/django/testing","unlisted":false},{"type":"link","label":"Documentation","href":"/docs/frameworks-libraries/backend/django/documentation","docId":"frameworks-libraries/backend/django/documentation","unlisted":false},{"type":"link","label":"Advanced Topics","href":"/docs/frameworks-libraries/backend/django/advanced-topics","docId":"frameworks-libraries/backend/django/advanced-topics","unlisted":false},{"type":"link","label":"Deployment","href":"/docs/frameworks-libraries/backend/django/deployment","docId":"frameworks-libraries/backend/django/deployment","unlisted":false}]},{"type":"category","label":"Flask","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/docs/frameworks-libraries/backend/flask/introduction","docId":"frameworks-libraries/backend/flask/introduction","unlisted":false},{"type":"link","label":"Web Server Gateway Interface (WSGI)","href":"/docs/frameworks-libraries/backend/flask/wsgi","docId":"frameworks-libraries/backend/flask/wsgi","unlisted":false},{"type":"link","label":"Flask App and app.run","href":"/docs/frameworks-libraries/backend/flask/flask-app","docId":"frameworks-libraries/backend/flask/flask-app","unlisted":false},{"type":"link","label":"Routes","href":"/docs/frameworks-libraries/backend/flask/routing","docId":"frameworks-libraries/backend/flask/routing","unlisted":false},{"type":"link","label":"Templates and Jinja2","href":"/docs/frameworks-libraries/backend/flask/templates-and-jinja","docId":"frameworks-libraries/backend/flask/templates-and-jinja","unlisted":false},{"type":"link","label":"Static Files","href":"/docs/frameworks-libraries/backend/flask/static-files","docId":"frameworks-libraries/backend/flask/static-files","unlisted":false},{"type":"link","label":"Middlewares","href":"/docs/frameworks-libraries/backend/flask/middlewares","docId":"frameworks-libraries/backend/flask/middlewares","unlisted":false},{"type":"link","label":"Request and Response Cycle","href":"/docs/frameworks-libraries/backend/flask/request-response-cycle","docId":"frameworks-libraries/backend/flask/request-response-cycle","unlisted":false},{"type":"link","label":"Blueprints","href":"/docs/frameworks-libraries/backend/flask/blueprints","docId":"frameworks-libraries/backend/flask/blueprints","unlisted":false},{"type":"link","label":"Error Handling","href":"/docs/frameworks-libraries/backend/flask/error-handling","docId":"frameworks-libraries/backend/flask/error-handling","unlisted":false},{"type":"link","label":"Database Integration and Flask-SQLAlchemy","href":"/docs/frameworks-libraries/backend/flask/database-integration","docId":"frameworks-libraries/backend/flask/database-integration","unlisted":false},{"type":"link","label":"Async in Flask","href":"/docs/frameworks-libraries/backend/flask/async-flask","docId":"frameworks-libraries/backend/flask/async-flask","unlisted":false},{"type":"link","label":"Deployment and Scaling","href":"/docs/frameworks-libraries/backend/flask/deployment","docId":"frameworks-libraries/backend/flask/deployment","unlisted":false},{"type":"link","label":"Thread Safety","href":"/docs/frameworks-libraries/backend/flask/thread-safety","docId":"frameworks-libraries/backend/flask/thread-safety","unlisted":false}]},{"type":"category","label":"FastAPI","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction to FastAPI","href":"/docs/frameworks-libraries/backend/fastapi/introduction","docId":"frameworks-libraries/backend/fastapi/introduction","unlisted":false},{"type":"link","label":"Routes","href":"/docs/frameworks-libraries/backend/fastapi/routes","docId":"frameworks-libraries/backend/fastapi/routes","unlisted":false},{"type":"link","label":"Serialization and Validation","href":"/docs/frameworks-libraries/backend/fastapi/serialization-validation","docId":"frameworks-libraries/backend/fastapi/serialization-validation","unlisted":false},{"type":"link","label":"Dependency Injection","href":"/docs/frameworks-libraries/backend/fastapi/dependency-injection","docId":"frameworks-libraries/backend/fastapi/dependency-injection","unlisted":false},{"type":"link","label":"Authentication & Security","href":"/docs/frameworks-libraries/backend/fastapi/auth","docId":"frameworks-libraries/backend/fastapi/auth","unlisted":false},{"type":"link","label":"ORMs","href":"/docs/frameworks-libraries/backend/fastapi/orm","docId":"frameworks-libraries/backend/fastapi/orm","unlisted":false},{"type":"link","label":"Advanced FastAPI Features","href":"/docs/frameworks-libraries/backend/fastapi/advanced-features","docId":"frameworks-libraries/backend/fastapi/advanced-features","unlisted":false},{"type":"link","label":"Performance & Optimization","href":"/docs/frameworks-libraries/backend/fastapi/optimization","docId":"frameworks-libraries/backend/fastapi/optimization","unlisted":false},{"type":"link","label":"Testing & Debugging","href":"/docs/frameworks-libraries/backend/fastapi/testing","docId":"frameworks-libraries/backend/fastapi/testing","unlisted":false},{"type":"link","label":"Deployment & Production Setup","href":"/docs/frameworks-libraries/backend/fastapi/deployment","docId":"frameworks-libraries/backend/fastapi/deployment","unlisted":false}]}]},{"type":"category","label":"Frotnend","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"React","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/docs/frameworks-libraries/frontend/react/introduction","docId":"frameworks-libraries/frontend/react/introduction","unlisted":false},{"type":"link","label":"JSX","href":"/docs/frameworks-libraries/frontend/react/jsx","docId":"frameworks-libraries/frontend/react/jsx","unlisted":false},{"type":"link","label":"Props","href":"/docs/frameworks-libraries/frontend/react/props","docId":"frameworks-libraries/frontend/react/props","unlisted":false},{"type":"link","label":"Event-Driven Programming","href":"/docs/frameworks-libraries/frontend/react/event-driven-programming","docId":"frameworks-libraries/frontend/react/event-driven-programming","unlisted":false},{"type":"link","label":"Components","href":"/docs/frameworks-libraries/frontend/react/class-functional-components","docId":"frameworks-libraries/frontend/react/class-functional-components","unlisted":false},{"type":"link","label":"State Management","href":"/docs/frameworks-libraries/frontend/react/state-management","docId":"frameworks-libraries/frontend/react/state-management","unlisted":false},{"type":"link","label":"React Hooks","href":"/docs/frameworks-libraries/frontend/react/hooks","docId":"frameworks-libraries/frontend/react/hooks","unlisted":false},{"type":"link","label":"Refs","href":"/docs/frameworks-libraries/frontend/react/refs","docId":"frameworks-libraries/frontend/react/refs","unlisted":false},{"type":"link","label":"Imperative React","href":"/docs/frameworks-libraries/frontend/react/imperative-react","docId":"frameworks-libraries/frontend/react/imperative-react","unlisted":false},{"type":"link","label":"Performance Optimization","href":"/docs/frameworks-libraries/frontend/react/performance-optimization","docId":"frameworks-libraries/frontend/react/performance-optimization","unlisted":false},{"type":"link","label":"Styling","href":"/docs/frameworks-libraries/frontend/react/styling","docId":"frameworks-libraries/frontend/react/styling","unlisted":false},{"type":"link","label":"Routing","href":"/docs/frameworks-libraries/frontend/react/routing","docId":"frameworks-libraries/frontend/react/routing","unlisted":false},{"type":"link","label":"Server-Side Rendering (SSR)","href":"/docs/frameworks-libraries/frontend/react/ssr","docId":"frameworks-libraries/frontend/react/ssr","unlisted":false},{"type":"link","label":"Portals","href":"/docs/frameworks-libraries/frontend/react/portals","docId":"frameworks-libraries/frontend/react/portals","unlisted":false},{"type":"link","label":"Error Handling and Error Boundaries","href":"/docs/frameworks-libraries/frontend/react/error-handling","docId":"frameworks-libraries/frontend/react/error-handling","unlisted":false},{"type":"link","label":"React Under the Hood","href":"/docs/frameworks-libraries/frontend/react/under-the-hood","docId":"frameworks-libraries/frontend/react/under-the-hood","unlisted":false}]}]}]},{"type":"category","label":"Data Structure and Algorithms","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/docs/data-structure-and-algorithms/introduction","docId":"data-structure-and-algorithms/introduction","unlisted":false},{"type":"category","label":"Algorithms","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/docs/data-structure-and-algorithms/algorithms/introduction","docId":"data-structure-and-algorithms/algorithms/introduction","unlisted":false},{"type":"link","label":"Arrays and Hashing","href":"/docs/data-structure-and-algorithms/algorithms/arrays-and-hasing","docId":"data-structure-and-algorithms/algorithms/arrays-and-hasing","unlisted":false},{"type":"link","label":"Sorting Algorithms","href":"/docs/data-structure-and-algorithms/algorithms/sorting","docId":"data-structure-and-algorithms/algorithms/sorting","unlisted":false},{"type":"link","label":"Two Pointers","href":"/docs/data-structure-and-algorithms/algorithms/two-pointers","docId":"data-structure-and-algorithms/algorithms/two-pointers","unlisted":false},{"type":"link","label":"Sliding Window","href":"/docs/data-structure-and-algorithms/algorithms/sliding-window","docId":"data-structure-and-algorithms/algorithms/sliding-window","unlisted":false},{"type":"link","label":"Stack","href":"/docs/data-structure-and-algorithms/algorithms/stack","docId":"data-structure-and-algorithms/algorithms/stack","unlisted":false},{"type":"link","label":"Queue","href":"/docs/data-structure-and-algorithms/algorithms/queue","docId":"data-structure-and-algorithms/algorithms/queue","unlisted":false}]},{"type":"category","label":"Time and Space Complexity","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Time Complexity","href":"/docs/data-structure-and-algorithms/time-space-complexity/time-complexity","docId":"data-structure-and-algorithms/time-space-complexity/time-complexity","unlisted":false}]}]},{"type":"category","label":"Operating Systems","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/docs/operating-systems/introduction","docId":"operating-systems/introduction","unlisted":false},{"type":"link","label":"Components of OS","href":"/docs/operating-systems/components-os","docId":"operating-systems/components-os","unlisted":false}]},{"type":"category","label":"Networking","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/docs/networking/introduction","docId":"networking/introduction","unlisted":false},{"type":"category","label":"Protocols","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Client-Server Architecture","href":"/docs/networking/protocols/client-server-architecture","docId":"networking/protocols/client-server-architecture","unlisted":false},{"type":"link","label":"OSI Model","href":"/docs/networking/protocols/osi-model","docId":"networking/protocols/osi-model","unlisted":false},{"type":"category","label":"Layer 7: Application","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"HTTP","href":"/docs/networking/protocols/layer-7/http","docId":"networking/protocols/layer-7/http","unlisted":false},{"type":"link","label":"DNS","href":"/docs/networking/protocols/layer-7/dns","docId":"networking/protocols/layer-7/dns","unlisted":false},{"type":"link","label":"SMTP","href":"/docs/networking/protocols/layer-7/smtp","docId":"networking/protocols/layer-7/smtp","unlisted":false},{"type":"link","label":"SSH","href":"/docs/networking/protocols/layer-7/ssh","docId":"networking/protocols/layer-7/ssh","unlisted":false},{"type":"link","label":"RPC and gRPC","href":"/docs/networking/protocols/layer-7/rpc","docId":"networking/protocols/layer-7/rpc","unlisted":false},{"type":"link","label":"FTP","href":"/docs/networking/protocols/layer-7/ftp","docId":"networking/protocols/layer-7/ftp","unlisted":false},{"type":"link","label":"MQTT and AMQP","href":"/docs/networking/protocols/layer-7/mqtt-amqp","docId":"networking/protocols/layer-7/mqtt-amqp","unlisted":false},{"type":"link","label":"RESTful","href":"/docs/networking/protocols/layer-7/rest","docId":"networking/protocols/layer-7/rest","unlisted":false},{"type":"link","label":"WebRTC","href":"/docs/networking/protocols/layer-7/webrtc","docId":"networking/protocols/layer-7/webrtc","unlisted":false},{"type":"link","label":"WebSocket","href":"/docs/networking/protocols/layer-7/websocket","docId":"networking/protocols/layer-7/websocket","unlisted":false}]},{"type":"category","label":"Layer 6: Presentation","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"TLS","href":"/docs/networking/protocols/layer-6/tls","docId":"networking/protocols/layer-6/tls","unlisted":false}]},{"type":"category","label":"Layer 4: Transport","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"TCP","href":"/docs/networking/protocols/layer-4/tcp","docId":"networking/protocols/layer-4/tcp","unlisted":false},{"type":"link","label":"UDP","href":"/docs/networking/protocols/layer-4/udp","docId":"networking/protocols/layer-4/udp","unlisted":false},{"type":"link","label":"QUIC","href":"/docs/networking/protocols/layer-4/quic","docId":"networking/protocols/layer-4/quic","unlisted":false}]},{"type":"category","label":"Layer 3: Network","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Internet Protocol","href":"/docs/networking/protocols/layer-3/internet-protocol","docId":"networking/protocols/layer-3/internet-protocol","unlisted":false},{"type":"link","label":"ICMP","href":"/docs/networking/protocols/layer-3/icmp","docId":"networking/protocols/layer-3/icmp","unlisted":false},{"type":"link","label":"BGP","href":"/docs/networking/protocols/layer-3/bgp","docId":"networking/protocols/layer-3/bgp","unlisted":false},{"type":"link","label":"NAT","href":"/docs/networking/protocols/layer-3/nat","docId":"networking/protocols/layer-3/nat","unlisted":false}]},{"type":"category","label":"Layer 2: Data Link","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"ARP","href":"/docs/networking/protocols/layer-2/arp","docId":"networking/protocols/layer-2/arp","unlisted":false}]},{"type":"category","label":"Extra","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"CDN","href":"/docs/networking/protocols/extra/cdn","docId":"networking/protocols/extra/cdn","unlisted":false},{"type":"link","label":"dhcp","href":"/docs/networking/protocols/extra/dhcp","docId":"networking/protocols/extra/dhcp","unlisted":false},{"type":"link","label":"NTP","href":"/docs/networking/protocols/extra/ntp","docId":"networking/protocols/extra/ntp","unlisted":false}]}]},{"type":"category","label":"Communication Design Patterns","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Request-Response","href":"/docs/networking/communication-design-patterns/request-response","docId":"networking/communication-design-patterns/request-response","unlisted":false},{"type":"link","label":"Pub/Sub (Publish-Subscribe)","href":"/docs/networking/communication-design-patterns/pub-sub","docId":"networking/communication-design-patterns/pub-sub","unlisted":false},{"type":"link","label":"Event Streaming","href":"/docs/networking/communication-design-patterns/event-streaming","docId":"networking/communication-design-patterns/event-streaming","unlisted":false},{"type":"link","label":"Short Polling","href":"/docs/networking/communication-design-patterns/short-pooling","docId":"networking/communication-design-patterns/short-pooling","unlisted":false},{"type":"link","label":"Long Polling","href":"/docs/networking/communication-design-patterns/long-pooling","docId":"networking/communication-design-patterns/long-pooling","unlisted":false},{"type":"link","label":"Server-Sent Events (SSE)","href":"/docs/networking/communication-design-patterns/sse","docId":"networking/communication-design-patterns/sse","unlisted":false}]}]},{"type":"category","label":"Databases","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/docs/databases/introduction","docId":"databases/introduction","unlisted":false},{"type":"link","label":"SQL","href":"/docs/databases/sql/","docId":"databases/sql/sql","unlisted":false},{"type":"category","label":"Database Engineering","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/docs/databases/database-engineering/introduction","docId":"databases/database-engineering/introduction","unlisted":false},{"type":"link","label":"Connection Pooling","href":"/docs/databases/database-engineering/pooling","docId":"databases/database-engineering/pooling","unlisted":false},{"type":"link","label":"Transactions","href":"/docs/databases/database-engineering/transactions","docId":"databases/database-engineering/transactions","unlisted":false},{"type":"link","label":"ACID","href":"/docs/databases/database-engineering/acid","docId":"databases/database-engineering/acid","unlisted":false},{"type":"link","label":"Database Locking","href":"/docs/databases/database-engineering/locks","docId":"databases/database-engineering/locks","unlisted":false},{"type":"link","label":"Indexes","href":"/docs/databases/database-engineering/indexes","docId":"databases/database-engineering/indexes","unlisted":false},{"type":"link","label":"Query Optimization","href":"/docs/databases/database-engineering/query-optimization","docId":"databases/database-engineering/query-optimization","unlisted":false},{"type":"link","label":"Partitioning","href":"/docs/databases/database-engineering/partitioning","docId":"databases/database-engineering/partitioning","unlisted":false},{"type":"link","label":"Sharding","href":"/docs/databases/database-engineering/sharding","docId":"databases/database-engineering/sharding","unlisted":false},{"type":"link","label":"Replication","href":"/docs/databases/database-engineering/replication","docId":"databases/database-engineering/replication","unlisted":false},{"type":"link","label":"Cursors","href":"/docs/databases/database-engineering/cursor","docId":"databases/database-engineering/cursor","unlisted":false}]},{"type":"category","label":"Database Systems","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/docs/databases/database-systems/introduction","docId":"databases/database-systems/introduction","unlisted":false},{"type":"link","label":"Database Storage","href":"/docs/databases/database-systems/database-storage","docId":"databases/database-systems/database-storage","unlisted":false},{"type":"link","label":"Log-Structured Merge Tree","href":"/docs/databases/database-systems/lsm-tree","docId":"databases/database-systems/lsm-tree","unlisted":false},{"type":"link","label":"Index Organized Storage","href":"/docs/databases/database-systems/index-organized-storage","docId":"databases/database-systems/index-organized-storage","unlisted":false},{"type":"link","label":"Hash Tables","href":"/docs/databases/database-systems/hash-tables","docId":"databases/database-systems/hash-tables","unlisted":false},{"type":"link","label":"B-Trees","href":"/docs/databases/database-systems/b-tree","docId":"databases/database-systems/b-tree","unlisted":false},{"type":"link","label":"Bloom Filter","href":"/docs/databases/database-systems/bloom-filter","docId":"databases/database-systems/bloom-filter","unlisted":false},{"type":"link","label":"Skip List","href":"/docs/databases/database-systems/skip-list","docId":"databases/database-systems/skip-list","unlisted":false},{"type":"link","label":"Trie and Radix Tree","href":"/docs/databases/database-systems/trie","docId":"databases/database-systems/trie","unlisted":false},{"type":"link","label":"Inverted Indexes","href":"/docs/databases/database-systems/inverted-index","docId":"databases/database-systems/inverted-index","unlisted":false},{"type":"link","label":"Vector Index","href":"/docs/databases/database-systems/vector-index","docId":"databases/database-systems/vector-index","unlisted":false}]}]},{"type":"category","label":"System Design","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/docs/system-design/introduction","docId":"system-design/introduction","unlisted":false},{"type":"category","label":"Fundamental Concepts","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"High and Low Level Design","href":"/docs/system-design/fundamental-concepts/high-and-low-level-design","docId":"system-design/fundamental-concepts/high-and-low-level-design","unlisted":false},{"type":"link","label":"CAP Theorem","href":"/docs/system-design/fundamental-concepts/cap-theorem","docId":"system-design/fundamental-concepts/cap-theorem","unlisted":false},{"type":"link","label":"Latency and Throughput","href":"/docs/system-design/fundamental-concepts/latency-and-throughput","docId":"system-design/fundamental-concepts/latency-and-throughput","unlisted":false},{"type":"link","label":"Caching","href":"/docs/system-design/fundamental-concepts/caching","docId":"system-design/fundamental-concepts/caching","unlisted":false},{"type":"link","label":"Distributed Load Balancer","href":"/docs/system-design/fundamental-concepts/load-balancer","docId":"system-design/fundamental-concepts/load-balancer","unlisted":false},{"type":"link","label":"Proxies","href":"/docs/system-design/fundamental-concepts/proxies","docId":"system-design/fundamental-concepts/proxies","unlisted":false}]},{"type":"category","label":"Communication in Distributed Systems","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Message Queues and Message Streams","href":"/docs/system-design/distributed-system-communication/mq-vs-ms","docId":"system-design/distributed-system-communication/mq-vs-ms","unlisted":false},{"type":"link","label":"AWS SQS","href":"/docs/system-design/distributed-system-communication/sqs","docId":"system-design/distributed-system-communication/sqs","unlisted":false},{"type":"link","label":"AWS SNS","href":"/docs/system-design/distributed-system-communication/sns","docId":"system-design/distributed-system-communication/sns","unlisted":false},{"type":"link","label":"RabbitMQ","href":"/docs/system-design/distributed-system-communication/rabbit-mq","docId":"system-design/distributed-system-communication/rabbit-mq","unlisted":false}]},{"type":"category","label":"Containers","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/docs/system-design/containers/introduction","docId":"system-design/containers/introduction","unlisted":false},{"type":"link","label":"Docker Internals","href":"/docs/system-design/containers/internals","docId":"system-design/containers/internals","unlisted":false},{"type":"link","label":"chroot in Linux","href":"/docs/system-design/containers/chroot","docId":"system-design/containers/chroot","unlisted":false},{"type":"link","label":"Linux Namespaces","href":"/docs/system-design/containers/namespaces","docId":"system-design/containers/namespaces","unlisted":false},{"type":"link","label":"cgroups in Linux","href":"/docs/system-design/containers/cgroups","docId":"system-design/containers/cgroups","unlisted":false},{"type":"link","label":"Docker Images","href":"/docs/system-design/containers/docker-images","docId":"system-design/containers/docker-images","unlisted":false},{"type":"link","label":"Docker CLI","href":"/docs/system-design/containers/docker-cli","docId":"system-design/containers/docker-cli","unlisted":false},{"type":"link","label":"Dockerfile","href":"/docs/system-design/containers/dockerfile","docId":"system-design/containers/dockerfile","unlisted":false}]},{"type":"category","label":"Kubernetes","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/docs/system-design/kubernetes/introduction","docId":"system-design/kubernetes/introduction","unlisted":false},{"type":"link","label":"Components of Kubernetes","href":"/docs/system-design/kubernetes/components","docId":"system-design/kubernetes/components","unlisted":false}]}]},{"type":"category","label":"Version Control","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/docs/version-control/introduction","docId":"version-control/introduction","unlisted":false},{"type":"category","label":"Git","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/docs/version-control/git/introduction","docId":"version-control/git/introduction","unlisted":false},{"type":"link","label":"Git Internals","href":"/docs/version-control/git/git-internals","docId":"version-control/git/git-internals","unlisted":false},{"type":"link","label":"Git config","href":"/docs/version-control/git/git-config","docId":"version-control/git/git-config","unlisted":false},{"type":"link","label":"Git Merge, Rebase, and Squash","href":"/docs/version-control/git/merge-and-rebase","docId":"version-control/git/merge-and-rebase","unlisted":false},{"type":"link","label":"Remote Repositories in Git","href":"/docs/version-control/git/remote-repositories","docId":"version-control/git/remote-repositories","unlisted":false},{"type":"link","label":"HEAD and reflog","href":"/docs/version-control/git/head-reflog","docId":"version-control/git/head-reflog","unlisted":false},{"type":"link","label":"Stashing in Git","href":"/docs/version-control/git/stashing","docId":"version-control/git/stashing","unlisted":false}]}]},{"type":"category","label":"Cloud","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"Amazon Web Services","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"aurora","href":"/docs/cloud/aws/aurora","docId":"cloud/aws/aurora","unlisted":false}]}]},{"type":"category","label":"Design Patterns","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/docs/design-patterns/introduction","docId":"design-patterns/introduction","unlisted":false},{"type":"link","label":"SOLD","href":"/docs/design-patterns/solid","docId":"design-patterns/solid","unlisted":false},{"type":"link","label":"Core Software Engineering Principles","href":"/docs/design-patterns/other-principles","docId":"design-patterns/other-principles","unlisted":false},{"type":"link","label":"Architectural Patterns","href":"/docs/design-patterns/architectural-patterns-concepts","docId":"design-patterns/architectural-patterns-concepts","unlisted":false}]},{"type":"category","label":"Other","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Regular Expressions (RegEx)","href":"/docs/other/regex","docId":"other/regex","unlisted":false},{"type":"link","label":"Man-in-the-Middle (MITM) Attack","href":"/docs/other/mitm-attack","docId":"other/mitm-attack","unlisted":false},{"type":"link","label":"Protocol Buffers","href":"/docs/other/protocolbuf","docId":"other/protocolbuf","unlisted":false},{"type":"category","label":"Splunk","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/docs/other/splunk/introduction","docId":"other/splunk/introduction","unlisted":false},{"type":"link","label":"Architecture","href":"/docs/other/splunk/architecture","docId":"other/splunk/architecture","unlisted":false},{"type":"link","label":"Configuration Files","href":"/docs/other/splunk/conf","docId":"other/splunk/conf","unlisted":false}]}]}]},"docs":{"cloud/aws/aurora":{"id":"cloud/aws/aurora","title":"aurora","description":"\x3c!--","sidebar":"tutorialSidebar"},"data-structure-and-algorithms/algorithms/arrays-and-hasing":{"id":"data-structure-and-algorithms/algorithms/arrays-and-hasing","title":"Arrays and Hashing","description":"Arrays","sidebar":"tutorialSidebar"},"data-structure-and-algorithms/algorithms/introduction":{"id":"data-structure-and-algorithms/algorithms/introduction","title":"Introduction","description":"","sidebar":"tutorialSidebar"},"data-structure-and-algorithms/algorithms/queue":{"id":"data-structure-and-algorithms/algorithms/queue","title":"Queue","description":"A queue is a linear data structure that follows the First In First Out (FIFO) principle. Elements are added at one end (called the rear) and removed from the other end (called the front).","sidebar":"tutorialSidebar"},"data-structure-and-algorithms/algorithms/sliding-window":{"id":"data-structure-and-algorithms/algorithms/sliding-window","title":"Sliding Window","description":"The Sliding Window technique involves using a window (a subset of elements) that slides over an array or string to solve problems involving subarrays, substrings, or ranges. The window can expand, contract, or move to maintain specific properties like size or sum.","sidebar":"tutorialSidebar"},"data-structure-and-algorithms/algorithms/sorting":{"id":"data-structure-and-algorithms/algorithms/sorting","title":"Sorting Algorithms","description":"Sorting is the process of arranging data in a specific order, often ascending or descending. Sorting is fundamental in computer science as it makes data more manageable, improves the performance of search operations, and forms the foundation of various algorithms.","sidebar":"tutorialSidebar"},"data-structure-and-algorithms/algorithms/stack":{"id":"data-structure-and-algorithms/algorithms/stack","title":"Stack","description":"A stack is a linear data structure that follows the Last In, First Out (LIFO) principle. This means that the element added most recently to the stack is the first to be removed.","sidebar":"tutorialSidebar"},"data-structure-and-algorithms/algorithms/two-pointers":{"id":"data-structure-and-algorithms/algorithms/two-pointers","title":"Two Pointers","description":"The Two Pointers technique involves using two pointers (or indices) to traverse or manipulate a data structure, typically an array or string. These pointers can move in the same direction, opposite directions, or with one pointer lagging behind the other.","sidebar":"tutorialSidebar"},"data-structure-and-algorithms/introduction":{"id":"data-structure-and-algorithms/introduction","title":"Introduction","description":"These are my notes on Data Structure Algorithms","sidebar":"tutorialSidebar"},"data-structure-and-algorithms/time-space-complexity/time-complexity":{"id":"data-structure-and-algorithms/time-space-complexity/time-complexity","title":"Time Complexity","description":"","sidebar":"tutorialSidebar"},"databases/database-engineering/acid":{"id":"databases/database-engineering/acid","title":"ACID","description":"The ACID properties are a set of four key principles that ensure reliable processing of database transactions. ACID stands for Atomicity, Consistency, Isolation, and Durability. These properties guarantee that database transactions are processed reliably and safely, even in situations like system failures, crashes, or concurrent access by multiple users. Below is a breakdown of each property with practical examples.","sidebar":"tutorialSidebar"},"databases/database-engineering/cursor":{"id":"databases/database-engineering/cursor","title":"Cursors","description":"A cursor in database management systems (DBMS) is a database object used to retrieve, manipulate, and traverse rows of a result set returned by a query. It acts as a pointer that allows the application to iterate over a set of records one at a time. Cursors are particularly useful when dealing with large datasets or when you need to perform row-by-row operations (like updates or complex calculations) that cannot be achieved in a single SQL query.","sidebar":"tutorialSidebar"},"databases/database-engineering/indexes":{"id":"databases/database-engineering/indexes","title":"Indexes","description":"Database indexes are fundamental to database performance optimization. They allow for quick data retrieval by minimizing the amount of data the database system has to scan. Without indexes, databases would need to perform a full table scan for every query, which is inefficient for large datasets. Indexes are widely used in relational databases such as PostgreSQL, MySQL, and Oracle to enhance the performance of queries involving search, filtering, sorting, and joins.","sidebar":"tutorialSidebar"},"databases/database-engineering/introduction":{"id":"databases/database-engineering/introduction","title":"Introduction","description":"Database engineering is about setting up, configuring, and managing databases to make sure they work well and meet the needs of users. It involves tasks like choosing the right type of database, setting it up for performance and security, managing backups, and making sure the database is always available.","sidebar":"tutorialSidebar"},"databases/database-engineering/locks":{"id":"databases/database-engineering/locks","title":"Database Locking","description":"Database locking is a mechanism that ensures data consistency and integrity when multiple transactions access the database concurrently. Locks prevent conflicting operations from being executed simultaneously, ensuring that operations comply with ACID (Atomicity, Consistency, Isolation, Durability) principles.","sidebar":"tutorialSidebar"},"databases/database-engineering/partitioning":{"id":"databases/database-engineering/partitioning","title":"Partitioning","description":"Database partitioning is a technique used to divide a large table or database into smaller, more manageable pieces, called partitions. It helps improve performance, manageability, and scalability of the database system by reducing the amount of data a query must process and allowing for efficient data access patterns.","sidebar":"tutorialSidebar"},"databases/database-engineering/pooling":{"id":"databases/database-engineering/pooling","title":"Connection Pooling","description":"Connection pooling is a technique used to improve the performance and scalability of applications interacting with databases. It maintains a pool of database connections that can be reused rather than creating and destroying connections for every request.","sidebar":"tutorialSidebar"},"databases/database-engineering/query-optimization":{"id":"databases/database-engineering/query-optimization","title":"Query Optimization","description":"Query optimization is crucial for improving the performance of database systems. Below are key techniques and how to analyze query performance using tools like EXPLAIN and EXPLAIN ANALYZE in PostgreSQL.","sidebar":"tutorialSidebar"},"databases/database-engineering/replication":{"id":"databases/database-engineering/replication","title":"Replication","description":"Database replication is the process of copying and maintaining database objects, such as tables, schema, and indexes, in multiple databases located on the same or different servers. This mechanism ensures data redundancy, improves fault tolerance, and enhances read performance. Replication is widely used in distributed systems, cloud environments, and scenarios requiring high availability.","sidebar":"tutorialSidebar"},"databases/database-engineering/sharding":{"id":"databases/database-engineering/sharding","title":"Sharding","description":"Sharding is a database architecture pattern where data is horizontally partitioned across multiple databases or nodes, often referred to as shards. Each shard contains a subset of the total data, making the overall system more scalable and resilient. It is particularly useful for handling very large datasets and high-throughput applications.","sidebar":"tutorialSidebar"},"databases/database-engineering/transactions":{"id":"databases/database-engineering/transactions","title":"Transactions","description":"A transaction in a database is a sequence of operations that are executed as a single unit of work. Transactions ensure that the database maintains consistency, reliability, and integrity even in situations where errors, crashes, or concurrent updates occur. Transactions allow multiple database operations to be grouped together, so either all the operations succeed or none of them are applied, preserving the consistency of the database.","sidebar":"tutorialSidebar"},"databases/database-systems/b-tree":{"id":"databases/database-systems/b-tree","title":"B-Trees","description":"B-Trees (Balanced Trees) are self-balancing tree data structures widely used in database systems for indexing and efficient data retrieval. They maintain sorted data and allow searches, sequential access, insertions, and deletions in logarithmic time. The B+ Tree, a variant of the B-Tree, is particularly optimized for disk-oriented DBMSs and is the most commonly used type in modern databases.","sidebar":"tutorialSidebar"},"databases/database-systems/bloom-filter":{"id":"databases/database-systems/bloom-filter","title":"Bloom Filter","description":"A Bloom Filter is a probabilistic data structure designed for efficient membership testing. It is highly space-efficient and is particularly useful in scenarios where false positives are acceptable but false negatives are not. In other words, it may incorrectly report that an element is in the set when it is not (false positive) but will never incorrectly report that an element is not in the set when it is (no false negatives).","sidebar":"tutorialSidebar"},"databases/database-systems/database-storage":{"id":"databases/database-systems/database-storage","title":"Database Storage","description":"Database storage is the physical representation of data within a database system. It\'s typically organized into files and pages.","sidebar":"tutorialSidebar"},"databases/database-systems/hash-tables":{"id":"databases/database-systems/hash-tables","title":"Hash Tables","description":"A Hash Table is a data structure that provides an efficient way to store and retrieve data using key-value pairs. The underlying mechanism relies on a hash function that maps keys to specific indices in an array, ensuring fast access times.","sidebar":"tutorialSidebar"},"databases/database-systems/index-organized-storage":{"id":"databases/database-systems/index-organized-storage","title":"Index Organized Storage","description":"Index-Organized Storage (IOS) is a storage technique in databases where data is stored directly in the index structure itself. Unlike traditional tables where data and indexes are stored separately, an index-organized table (IOT) combines both the data and index, allowing for efficient access patterns and performance benefits in specific use cases.","sidebar":"tutorialSidebar"},"databases/database-systems/introduction":{"id":"databases/database-systems/introduction","title":"Introduction","description":"What is a database?","sidebar":"tutorialSidebar"},"databases/database-systems/inverted-index":{"id":"databases/database-systems/inverted-index","title":"Inverted Indexes","description":"An Inverted Index is a data structure used for efficient text search in databases, search engines, and document management systems. It is widely used to perform full-text searches quickly and efficiently by mapping content (words or tokens) to the documents in which they appear. This data structure is crucial for search engines like Google, databases like PostgreSQL, and libraries like Lucene.","sidebar":"tutorialSidebar"},"databases/database-systems/lsm-tree":{"id":"databases/database-systems/lsm-tree","title":"Log-Structured Merge Tree","description":"Log-Structured Merge (LSM) trees are a fundamental data structure used in database storage, particularly for handling high-write workloads efficiently. Here\u2019s a breakdown of key concepts and considerations when working with LSM storage:","sidebar":"tutorialSidebar"},"databases/database-systems/skip-list":{"id":"databases/database-systems/skip-list","title":"Skip List","description":"A Skip List is a probabilistic data structure that allows fast search, insertion, and deletion operations in an ordered sequence of elements. It is used to improve the performance of traditional linked lists by adding additional layers of links, which \\"skip\\" over some elements, hence the name \\"Skip List\\". This makes it possible to perform search, insertion, and deletion in O(log n) average time, which is more efficient than a regular linked list (O(n)) but less complex than balanced trees (e.g., AVL, Red-Black trees).","sidebar":"tutorialSidebar"},"databases/database-systems/trie":{"id":"databases/database-systems/trie","title":"Trie and Radix Tree","description":"In the context of databases, Tries and Radix Trees are efficient data structures used for tasks like string matching, prefix searching, and indexing. These data structures provide fast operations, such as searching, insertion, and deletion, particularly in applications involving large datasets with string keys.","sidebar":"tutorialSidebar"},"databases/database-systems/vector-index":{"id":"databases/database-systems/vector-index","title":"Vector Index","description":"A Vector Index is a specialized data structure used to efficiently search and retrieve vectors, particularly in applications involving high-dimensional data like machine learning, natural language processing (NLP), image search, and recommendation systems. In such systems, data is often represented as vectors (or embeddings), and traditional indexing methods (like inverted indexes) may not work efficiently for high-dimensional spaces. A Vector Index provides a way to efficiently query such data based on similarity, typically using distance metrics like Euclidean distance, cosine similarity, or Manhattan distance.","sidebar":"tutorialSidebar"},"databases/introduction":{"id":"databases/introduction","title":"Introduction","description":"Notes on databases are categorized into three main buckets:","sidebar":"tutorialSidebar"},"databases/sql/sql":{"id":"databases/sql/sql","title":"SQL","description":"SQL is a computer language used to communicate and manage data within a relational database. It is used to perform tasks such as retrieving, inserting, updating, and deleting data.","sidebar":"tutorialSidebar"},"design-patterns/architectural-patterns-concepts":{"id":"design-patterns/architectural-patterns-concepts","title":"Architectural Patterns","description":"MVC (Model-View-Controller)","sidebar":"tutorialSidebar"},"design-patterns/introduction":{"id":"design-patterns/introduction","title":"Introduction","description":"Design Patterns are reusable solutions to common problems in software design. The Gang of Four (GoF)\u2014Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides\u2014introduced 23 classic design patterns in their book \\"Design Patterns: Elements of Reusable Object-Oriented Software\\" (1994).","sidebar":"tutorialSidebar"},"design-patterns/other-principles":{"id":"design-patterns/other-principles","title":"Core Software Engineering Principles","description":"These fundamental principles help developers write maintainable, scalable, and robust code. Let\'s explore each with Python examples.","sidebar":"tutorialSidebar"},"design-patterns/solid":{"id":"design-patterns/solid","title":"SOLD","description":"SOLID is an acronym that represents five principles of object-oriented design that help developers create systems that are easier to manage, extend, and maintain. These principles, introduced by Robert C. Martin (Uncle Bob), are widely regarded as essential for writing clean, efficient, and maintainable code. By following these principles, developers can ensure that their software is more modular, flexible, and robust to changes.","sidebar":"tutorialSidebar"},"frameworks-libraries/backend/django/advanced-topics":{"id":"frameworks-libraries/backend/django/advanced-topics","title":"Advanced Topics","description":"DRF offers flexibility and extensibility for building robust APIs. Mastering advanced topics such as custom serializers, non-CRUD operations, signals, versioning, caching, asynchronous views, and WebSocket integration empowers developers to handle complex business requirements efficiently.","sidebar":"tutorialSidebar"},"frameworks-libraries/backend/django/authentication":{"id":"frameworks-libraries/backend/django/authentication","title":"Authentication","description":"Authentication is a critical aspect of any web API. Django Rest Framework (DRF) provides a robust framework for handling authentication, allowing developers to secure API endpoints by validating the identity of users making requests. DRF includes built-in authentication mechanisms and supports custom implementations to meet unique requirements.","sidebar":"tutorialSidebar"},"frameworks-libraries/backend/django/deployment":{"id":"frameworks-libraries/backend/django/deployment","title":"Deployment","description":"Deploying a Django Rest Framework (DRF) application to production and ensuring it scales to handle high traffic efficiently requires a combination of best practices, optimization techniques, and robust infrastructure setup. Here\u2019s a detailed guide on deploying and scaling DRF applications.","sidebar":"tutorialSidebar"},"frameworks-libraries/backend/django/documentation":{"id":"frameworks-libraries/backend/django/documentation","title":"Documentation","description":"API documentation is essential for describing the functionality, endpoints, and usage of an API to developers and consumers. Django Rest Framework (DRF) provides built-in tools for generating API documentation, and there are several third-party libraries for more advanced features and customization.","sidebar":"tutorialSidebar"},"frameworks-libraries/backend/django/drf-intro":{"id":"frameworks-libraries/backend/django/drf-intro","title":"Django Rest Framework (DRF)","description":"Django Rest Framework (DRF) is a powerful and flexible toolkit for building Web APIs in Django. It extends Django\u2019s capabilities, enabling developers to create RESTful APIs quickly and effectively. DRF provides features such as serialization, authentication, and customizable views that simplify the development of APIs.","sidebar":"tutorialSidebar"},"frameworks-libraries/backend/django/error-handling":{"id":"frameworks-libraries/backend/django/error-handling","title":"Error Handling and Response Customization","description":"Error handling and response customization are essential for building user-friendly, maintainable, and efficient APIs. Django Rest Framework (DRF) provides robust tools to manage errors, exceptions, and response formats, allowing developers to tailor the API to specific requirements.","sidebar":"tutorialSidebar"},"frameworks-libraries/backend/django/file-structure":{"id":"frameworks-libraries/backend/django/file-structure","title":"File Structure","description":"When you create a Django project and app, Django generates several files and directories. Below is an overview of the typical file structure and their purposes.","sidebar":"tutorialSidebar"},"frameworks-libraries/backend/django/hyperlinks":{"id":"frameworks-libraries/backend/django/hyperlinks","title":"Nested Relationships and Hyperlinked APIs","description":"Django Rest Framework (DRF) offers tools to manage related models effectively. This includes using hyperlinks for relationships and handling deeply nested relationships.","sidebar":"tutorialSidebar"},"frameworks-libraries/backend/django/introduction":{"id":"frameworks-libraries/backend/django/introduction","title":"Introduction","description":"Django is a high-level Python web framework designed for rapid development and clean, pragmatic design. It encourages following the DRY (Don\'t Repeat Yourself) principle and promotes the reuse of code. Django is widely used for building robust and scalable web applications, from simple blogs to complex e-commerce sites.","sidebar":"tutorialSidebar"},"frameworks-libraries/backend/django/model-orm":{"id":"frameworks-libraries/backend/django/model-orm","title":"Models and ORM","description":"Django\'s Object-Relational Mapping (ORM) system allows developers to interact with the database using Python code, without having to write SQL queries manually. The ORM works by mapping Python classes to database tables, allowing the creation, retrieval, update, and deletion (CRUD) of data.","sidebar":"tutorialSidebar"},"frameworks-libraries/backend/django/permissions":{"id":"frameworks-libraries/backend/django/permissions","title":"Permissions, Access Control, Throttling","description":"Django Rest Framework provides robust tools for controlling who can access your APIs, what they can do, and how often they can make requests. Below is a detailed explanation of these concepts.","sidebar":"tutorialSidebar"},"frameworks-libraries/backend/django/project-setup":{"id":"frameworks-libraries/backend/django/project-setup","title":"Project Setup","description":"Create a Virtual Environment","sidebar":"tutorialSidebar"},"frameworks-libraries/backend/django/project-structure":{"id":"frameworks-libraries/backend/django/project-structure","title":"Project Structure","description":"In Django Rest Framework (DRF) projects, the project is typically structured to organize code logically and maintain scalability. The general structure follows Django\'s modular design, with the addition of DRF components for building RESTful APIs. Here\'s a breakdown of the main components:","sidebar":"tutorialSidebar"},"frameworks-libraries/backend/django/querying-filtering":{"id":"frameworks-libraries/backend/django/querying-filtering","title":"Querying and Filtering","description":"DRF provides tools to efficiently query, filter, and optimize data retrieval from the database. These tools ensure that APIs deliver only the required data while maintaining performance.","sidebar":"tutorialSidebar"},"frameworks-libraries/backend/django/serializers":{"id":"frameworks-libraries/backend/django/serializers","title":"Serializers","description":"Serializers in Django Rest Framework (DRF) are powerful tools used to transform complex data types like querysets and model instances into Python native datatypes that can be easily rendered into JSON, XML, or other content types. They also handle deserialization, i.e., converting parsed data back into complex Python objects.","sidebar":"tutorialSidebar"},"frameworks-libraries/backend/django/testing":{"id":"frameworks-libraries/backend/django/testing","title":"Testing","description":"Testing is a critical part of developing APIs to ensure functionality, reliability, and maintainability. Django Rest Framework (DRF) provides a rich set of tools to test views, serializers, and API endpoints efficiently.","sidebar":"tutorialSidebar"},"frameworks-libraries/backend/django/views":{"id":"frameworks-libraries/backend/django/views","title":"Views","description":"Django Rest Framework (DRF) views are a core component used to define the behavior of API endpoints. They control the logic for handling HTTP requests and returning appropriate responses. DRF provides both function-based and class-based views, along with a range of generic views and viewsets to simplify API development.","sidebar":"tutorialSidebar"},"frameworks-libraries/backend/fastapi/advanced-features":{"id":"frameworks-libraries/backend/fastapi/advanced-features","title":"Advanced FastAPI Features","description":"FastAPI offers powerful features beyond basic CRUD APIs, including background tasks, file handling, WebSockets, middleware, cookies/headers, and custom responses. Below is a detailed breakdown of each.","sidebar":"tutorialSidebar"},"frameworks-libraries/backend/fastapi/auth":{"id":"frameworks-libraries/backend/fastapi/auth","title":"Authentication & Security","description":"FastAPI provides built-in security utilities for implementing authentication, authorization, and secure API communication. Below is a detailed breakdown of key security concepts and their implementation in FastAPI.","sidebar":"tutorialSidebar"},"frameworks-libraries/backend/fastapi/dependency-injection":{"id":"frameworks-libraries/backend/fastapi/dependency-injection","title":"Dependency Injection","description":"Dependency Injection (DI) is a design pattern used to decouple components by injecting dependencies (like functions, classes, or objects) rather than hardcoding them. FastAPI has first-class support for DI, making it easy to manage dependencies cleanly and efficiently.","sidebar":"tutorialSidebar"},"frameworks-libraries/backend/fastapi/deployment":{"id":"frameworks-libraries/backend/fastapi/deployment","title":"Deployment & Production Setup","description":"Deploying FastAPI in production requires performance tuning, security, and scalability. Below is a detailed breakdown of deployment strategies, Dockerization, cloud platforms, HTTPS, and monitoring.","sidebar":"tutorialSidebar"},"frameworks-libraries/backend/fastapi/introduction":{"id":"frameworks-libraries/backend/fastapi/introduction","title":"Introduction to FastAPI","description":"FastAPI is a modern, high-performance web framework for building APIs with Python. It is designed to create RESTful APIs quickly, with a focus on performance, ease of use, and automatic generation of interactive API documentation. FastAPI is built on top of Starlette for the web parts and Pydantic for data validation, making it an ideal choice for developing fast and reliable web applications.","sidebar":"tutorialSidebar"},"frameworks-libraries/backend/fastapi/optimization":{"id":"frameworks-libraries/backend/fastapi/optimization","title":"Performance & Optimization","description":"FastAPI is designed for high performance, but optimizing your application requires understanding async/await, database interactions, caching, compression, and load testing. Below is a detailed breakdown of key optimization techniques.","sidebar":"tutorialSidebar"},"frameworks-libraries/backend/fastapi/orm":{"id":"frameworks-libraries/backend/fastapi/orm","title":"ORMs","description":"FastAPI works seamlessly with various databases (SQL & NoSQL) and ORMs (Object-Relational Mappers). Below is a detailed breakdown of database integration, including SQLAlchemy (sync/async), NoSQL (MongoDB, Redis), migrations (Alembic), and Pydantic \u2194 ORM model conversions.","sidebar":"tutorialSidebar"},"frameworks-libraries/backend/fastapi/routes":{"id":"frameworks-libraries/backend/fastapi/routes","title":"Routes","description":"FastAPI is an extremely powerful framework for building APIs in Python. In this note, we will dive deeper into the core concepts of FastAPI, covering Basic Route Handling, Path Parameters, Query Parameters, and Request Body, as well as how to return appropriate HTTP status codes.","sidebar":"tutorialSidebar"},"frameworks-libraries/backend/fastapi/serialization-validation":{"id":"frameworks-libraries/backend/fastapi/serialization-validation","title":"Serialization and Validation","description":"FastAPI is a modern, fast (hence the name) web framework for building APIs in Python. One of its core features is Pydantic, which is used for data validation and serialization. FastAPI leverages Pydantic to ensure that data passed to your application is valid and structured correctly. Let\u2019s dive deeper into the key concepts: Pydantic Models, Data Validation, Response Models, Nested Models, and Custom Validators.","sidebar":"tutorialSidebar"},"frameworks-libraries/backend/fastapi/testing":{"id":"frameworks-libraries/backend/fastapi/testing","title":"Testing & Debugging","description":"Testing and debugging are critical for building reliable and maintainable FastAPI applications. This guide covers unit/integration testing, mocking, debugging, and automated API testing.","sidebar":"tutorialSidebar"},"frameworks-libraries/backend/flask/async-flask":{"id":"frameworks-libraries/backend/flask/async-flask","title":"Async in Flask","description":"Flask is a popular lightweight web framework for building web applications in Python. Traditionally, Flask operates in a synchronous manner, where each request is handled one at a time, blocking the server until the request is processed and a response is returned. However, with the growing need for handling concurrent requests more efficiently (especially for I/O-bound tasks like database queries, file uploads, or network calls), Flask has started supporting asynchronous programming. This allows for non-blocking I/O operations, leading to better performance under heavy load, especially when dealing with concurrent requests.","sidebar":"tutorialSidebar"},"frameworks-libraries/backend/flask/blueprints":{"id":"frameworks-libraries/backend/flask/blueprints","title":"Blueprints","description":"Flask Blueprints are a powerful feature in Flask that allow you to organize your application into modular components. With Blueprints, you can split a large application into smaller, more manageable pieces, making your codebase easier to maintain and scale. Each Blueprint can contain its own views, templates, static files, and other resources, which can then be registered to the main Flask application.","sidebar":"tutorialSidebar"},"frameworks-libraries/backend/flask/database-integration":{"id":"frameworks-libraries/backend/flask/database-integration","title":"Database Integration and Flask-SQLAlchemy","description":"Flask, being a lightweight web framework, doesn\'t come with built-in database support, but it can easily integrate with various database systems using extensions. Database integration allows Flask applications to interact with persistent data stores (e.g., relational databases like MySQL, PostgreSQL, SQLite, and NoSQL databases like MongoDB).","sidebar":"tutorialSidebar"},"frameworks-libraries/backend/flask/deployment":{"id":"frameworks-libraries/backend/flask/deployment","title":"Deployment and Scaling","description":"Once you\u2019ve developed your Flask application and it\u2019s ready for production, it\u2019s crucial to deploy it effectively and ensure it can scale as needed. This note focuses on deploying the application with a production-ready setup, understanding how to scale Flask applications, and optimizing performance for better response times and resource utilization.","sidebar":"tutorialSidebar"},"frameworks-libraries/backend/flask/error-handling":{"id":"frameworks-libraries/backend/flask/error-handling","title":"Error Handling","description":"Error handling is a crucial part of building web applications. In Flask, error handling involves catching, logging, and providing meaningful feedback for errors that occur during the request-response cycle. Flask provides various mechanisms for handling errors at different stages of the application.","sidebar":"tutorialSidebar"},"frameworks-libraries/backend/flask/flask-app":{"id":"frameworks-libraries/backend/flask/flask-app","title":"Flask App and app.run","description":"In Flask, the application object (Flask) is the central object that represents the web application. It acts as the foundation for configuring, routing, and running the application. When you create a Flask app, you\'re essentially creating an instance of the Flask class, which serves as the main entry point for your application.","sidebar":"tutorialSidebar"},"frameworks-libraries/backend/flask/introduction":{"id":"frameworks-libraries/backend/flask/introduction","title":"Introduction","description":"Flask is a lightweight, open-source Python web framework used for building web applications. It is designed to be simple, flexible, and easy to use, making it one of the most popular choices for Python developers. Flask allows developers to build web applications quickly, offering the necessary tools while giving them the freedom to choose additional components as needed.","sidebar":"tutorialSidebar"},"frameworks-libraries/backend/flask/middlewares":{"id":"frameworks-libraries/backend/flask/middlewares","title":"Middlewares","description":"Middleware is a component in a web application that acts as an intermediary between the client request and the server response. In Flask, middleware is used to process requests before they reach the Flask application or after the application has processed the request but before sending the response back to the client.","sidebar":"tutorialSidebar"},"frameworks-libraries/backend/flask/request-response-cycle":{"id":"frameworks-libraries/backend/flask/request-response-cycle","title":"Request and Response Cycle","description":"The Request-Response Cycle is the core of web application behavior in Flask. It defines how Flask handles incoming HTTP requests from clients (like web browsers) and sends back appropriate responses. Understanding this cycle is critical for building efficient and functional Flask applications.","sidebar":"tutorialSidebar"},"frameworks-libraries/backend/flask/routing":{"id":"frameworks-libraries/backend/flask/routing","title":"Routes","description":"In Flask, routes are the URLs or endpoints that define how a web application responds to client requests. A route maps a specific URL to a Python function (known as a view function), which processes the request and generates a response. Routes are a fundamental part of Flask\'s design, enabling developers to define the behavior of their web application.","sidebar":"tutorialSidebar"},"frameworks-libraries/backend/flask/static-files":{"id":"frameworks-libraries/backend/flask/static-files","title":"Static Files","description":"Static files such as images, CSS, JavaScript, and other assets are essential components of a web application. Flask provides a simple and efficient way to serve these static files to users. Understanding how Flask handles static files and the best practices for organizing them is crucial for building effective web applications.","sidebar":"tutorialSidebar"},"frameworks-libraries/backend/flask/templates-and-jinja":{"id":"frameworks-libraries/backend/flask/templates-and-jinja","title":"Templates and Jinja2","description":"In Flask, templates are files (usually HTML) that serve as the foundation for rendering dynamic web pages. Flask integrates the Jinja2 templating engine to allow developers to embed Python code within templates and dynamically generate content based on server-side logic.","sidebar":"tutorialSidebar"},"frameworks-libraries/backend/flask/thread-safety":{"id":"frameworks-libraries/backend/flask/thread-safety","title":"Thread Safety","description":"Thread safety refers to the ability of an application or a piece of code to function correctly when accessed by multiple threads simultaneously. In a multi-threaded environment, thread safety ensures that shared resources, like memory and data, are handled in a way that prevents race conditions, data corruption, or undefined behavior.","sidebar":"tutorialSidebar"},"frameworks-libraries/backend/flask/wsgi":{"id":"frameworks-libraries/backend/flask/wsgi","title":"Web Server Gateway Interface (WSGI)","description":"What is WSGI?","sidebar":"tutorialSidebar"},"frameworks-libraries/frontend/react/class-functional-components":{"id":"frameworks-libraries/frontend/react/class-functional-components","title":"Components","description":"In React, components are the building blocks of the UI. They define the structure, logic, and behavior of the user interface. Initially, React components were class-based, but with the introduction of Hooks in React 16.8, functional components became more powerful and capable of handling state, side effects, and other lifecycle behavior, previously only possible with class-based components.","sidebar":"tutorialSidebar"},"frameworks-libraries/frontend/react/error-handling":{"id":"frameworks-libraries/frontend/react/error-handling","title":"Error Handling and Error Boundaries","description":"Error handling is an essential part of building robust applications. In React, error handling ensures that unexpected issues in one part of the application do not crash the entire UI. React provides Error Boundaries as a mechanism to handle runtime errors in the component tree.","sidebar":"tutorialSidebar"},"frameworks-libraries/frontend/react/event-driven-programming":{"id":"frameworks-libraries/frontend/react/event-driven-programming","title":"Event-Driven Programming","description":"Event-driven programming is a programming paradigm where the flow of the program is determined by events such as user interactions (e.g., clicks, keystrokes, mouse movements) or messages from other programs. In the context of React, this involves handling user interactions in the browser, such as clicking a button, typing into an input field, or hovering over an element, and responding to these interactions through event handlers.","sidebar":"tutorialSidebar"},"frameworks-libraries/frontend/react/hooks":{"id":"frameworks-libraries/frontend/react/hooks","title":"React Hooks","description":"React introduced hooks in version 16.8 to allow developers to use state and other React features in functional components, which were previously only available in class components. Hooks make it possible to write components that are concise, easy to read, and maintain while providing more powerful capabilities.","sidebar":"tutorialSidebar"},"frameworks-libraries/frontend/react/imperative-react":{"id":"frameworks-libraries/frontend/react/imperative-react","title":"Imperative React","description":"In React, imperative programming refers to directly controlling the behavior or operations of a component, rather than relying solely on the declarative state-based updates that React encourages. While React is largely declarative (focusing on what the UI should look like based on state), there are situations where you need to directly interact with a component\u2019s behavior or DOM elements in an imperative manner.","sidebar":"tutorialSidebar"},"frameworks-libraries/frontend/react/introduction":{"id":"frameworks-libraries/frontend/react/introduction","title":"Introduction","description":"React is a popular open-source JavaScript library for building user interfaces, specifically for single-page applications (SPAs), where you can create reusable UI components. React was developed by Facebook and is maintained by Facebook along with a community of developers. React focuses on creating interactive UIs by updating only the parts of the page that need to be changed, making the UI more efficient and responsive.","sidebar":"tutorialSidebar"},"frameworks-libraries/frontend/react/jsx":{"id":"frameworks-libraries/frontend/react/jsx","title":"JSX","description":"What is JSX?","sidebar":"tutorialSidebar"},"frameworks-libraries/frontend/react/performance-optimization":{"id":"frameworks-libraries/frontend/react/performance-optimization","title":"Performance Optimization","description":"In React, performance optimization is crucial to ensure that your application remains fast, responsive, and scalable, especially as the size of the application grows. React provides various techniques and tools to optimize the rendering process, reduce unnecessary re-renders, and improve load times.","sidebar":"tutorialSidebar"},"frameworks-libraries/frontend/react/portals":{"id":"frameworks-libraries/frontend/react/portals","title":"Portals","description":"In web development, portals are a feature that allows developers to render a piece of React component or HTML content into a DOM node that exists outside the current hierarchy of the parent component. Portals are particularly useful when UI components need to break out of the DOM tree for styling or functionality reasons while maintaining a logical connection with their parent React component.","sidebar":"tutorialSidebar"},"frameworks-libraries/frontend/react/props":{"id":"frameworks-libraries/frontend/react/props","title":"Props","description":"- Props (short for \\"properties\\") are a core concept in React. They are used to pass data from a parent component to a child component.","sidebar":"tutorialSidebar"},"frameworks-libraries/frontend/react/refs":{"id":"frameworks-libraries/frontend/react/refs","title":"Refs","description":"In React, Refs (short for references) are a way to directly access and interact with DOM elements or React components. Refs provide a way to bypass the normal data flow and interact with the underlying DOM or components, which is useful for cases like focusing an input, measuring an element\u2019s size, or triggering animations.","sidebar":"tutorialSidebar"},"frameworks-libraries/frontend/react/routing":{"id":"frameworks-libraries/frontend/react/routing","title":"Routing","description":"In React, routing refers to the navigation between different views or components based on the URL. Since React is primarily used to build Single-Page Applications (SPAs), React Router is the most commonly used library to implement routing in React. It allows you to map different components to specific URL paths, manage navigation, and handle dynamic routes.","sidebar":"tutorialSidebar"},"frameworks-libraries/frontend/react/ssr":{"id":"frameworks-libraries/frontend/react/ssr","title":"Server-Side Rendering (SSR)","description":"Server-Side Rendering (SSR) is a technique where the server renders the HTML for a React application before sending it to the client. This contrasts with the default behavior of React, where rendering happens on the client side. SSR can improve performance, SEO, and the initial loading experience of your application.","sidebar":"tutorialSidebar"},"frameworks-libraries/frontend/react/state-management":{"id":"frameworks-libraries/frontend/react/state-management","title":"State Management","description":"State management refers to the process of managing the state of an application efficiently. In React, the \\"state\\" represents the dynamic data of a component or application, which can change over time as users interact with the UI.","sidebar":"tutorialSidebar"},"frameworks-libraries/frontend/react/styling":{"id":"frameworks-libraries/frontend/react/styling","title":"Styling","description":"In React, styling is an essential part of building user interfaces that are both functional and aesthetically pleasing. There are various methods to style React components, and the choice of method depends on factors like scalability, reusability, and maintainability. Three popular approaches for styling React components are CSS-in-JS, CSS Modules, and Inline Styles. Below is a detailed explanation of each approach:","sidebar":"tutorialSidebar"},"frameworks-libraries/frontend/react/under-the-hood":{"id":"frameworks-libraries/frontend/react/under-the-hood","title":"React Under the Hood","description":"React is a JavaScript library that simplifies the process of building user interfaces by using a declarative, component-based approach. Under the hood, React uses a Virtual DOM and a process called Reconciliation to efficiently update and render the UI. This internal mechanism is key to React\u2019s performance and usability.","sidebar":"tutorialSidebar"},"frameworks-libraries/introduction":{"id":"frameworks-libraries/introduction","title":"Introduction","description":"These are my notes on various framework and libraries.","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"Introduction","description":"This repository contains my personal collection of notes, primarily focused on Computer Science, Software Engineering, and Backend Development. As I explore various topics in these areas, I document my learnings and publish them on this website.","sidebar":"tutorialSidebar"},"networking/communication-design-patterns/event-streaming":{"id":"networking/communication-design-patterns/event-streaming","title":"Event Streaming","description":"Event streaming is the practice of capturing data (events) in real time from various sources (such as databases, applications, IoT devices, etc.), storing them in a durable manner, and enabling applications or systems to process and analyze them either in real time or at a later point in time.","sidebar":"tutorialSidebar"},"networking/communication-design-patterns/long-pooling":{"id":"networking/communication-design-patterns/long-pooling","title":"Long Polling","description":"Long Polling is a client-server communication technique used to achieve real-time updates by reducing unnecessary network requests and server load compared to short polling. It allows a client to wait for updates from the server without repeatedly sending requests at fixed intervals. Instead, the server holds the client\'s request open until there is new data available to send or a timeout occurs.","sidebar":"tutorialSidebar"},"networking/communication-design-patterns/pub-sub":{"id":"networking/communication-design-patterns/pub-sub","title":"Pub/Sub (Publish-Subscribe)","description":"The publish-subscribe model is an asynchronous communication pattern where senders (publishers) do not send messages directly to receivers (subscribers). Instead, messages are sent to an intermediary (topic or message broker), and subscribers receive messages based on their expressed interest in the topics.","sidebar":"tutorialSidebar"},"networking/communication-design-patterns/request-response":{"id":"networking/communication-design-patterns/request-response","title":"Request-Response","description":"The request-response model is one of the most commonly used patterns in backend communication. It forms the backbone of web application architecture, enabling interaction between clients (e.g., browsers, mobile apps, or other systems) and servers.","sidebar":"tutorialSidebar"},"networking/communication-design-patterns/short-pooling":{"id":"networking/communication-design-patterns/short-pooling","title":"Short Polling","description":"Short Polling is a client-server communication pattern in which the client repeatedly sends requests to the server at regular intervals (polling) to check for new data or updates. It is one of the simplest methods for implementing communication between systems, especially when real-time updates are needed.","sidebar":"tutorialSidebar"},"networking/communication-design-patterns/sse":{"id":"networking/communication-design-patterns/sse","title":"Server-Sent Events (SSE)","description":"Server-Sent Events (SSE) is a unidirectional, server-to-client communication technology that allows servers to push real-time updates to clients over a single, persistent HTTP connection. It is based on the HTML5 EventSource API, which is specifically designed for streaming updates from a server to a web browser.","sidebar":"tutorialSidebar"},"networking/introduction":{"id":"networking/introduction","title":"Introduction","description":"Contents","sidebar":"tutorialSidebar"},"networking/protocols/client-server-architecture":{"id":"networking/protocols/client-server-architecture","title":"Client-Server Architecture","description":"Client-Server Architecture is a foundational model in network computing that structures applications into two main components: clients and servers. This architecture facilitates resource sharing, scalability, and efficient management of networked systems. Below are detailed notes covering various aspects of Client-Server Architecture.","sidebar":"tutorialSidebar"},"networking/protocols/extra/cdn":{"id":"networking/protocols/extra/cdn","title":"CDN","description":"","sidebar":"tutorialSidebar"},"networking/protocols/extra/dhcp":{"id":"networking/protocols/extra/dhcp","title":"dhcp","description":"","sidebar":"tutorialSidebar"},"networking/protocols/extra/ntp":{"id":"networking/protocols/extra/ntp","title":"NTP","description":"","sidebar":"tutorialSidebar"},"networking/protocols/layer-2/arp":{"id":"networking/protocols/layer-2/arp","title":"ARP","description":"","sidebar":"tutorialSidebar"},"networking/protocols/layer-3/bgp":{"id":"networking/protocols/layer-3/bgp","title":"BGP","description":"The Border Gateway Protocol (BGP) is the protocol that powers the internet\'s routing system. It is responsible for exchanging routing information between autonomous systems (AS), which are networks or groups of networks managed by a single organization. BGP is classified as a path-vector protocol, and it operates on TCP port 179.","sidebar":"tutorialSidebar"},"networking/protocols/layer-3/icmp":{"id":"networking/protocols/layer-3/icmp","title":"ICMP","description":"","sidebar":"tutorialSidebar"},"networking/protocols/layer-3/internet-protocol":{"id":"networking/protocols/layer-3/internet-protocol","title":"Internet Protocol","description":"The Internet Protocol (IP) is a core protocol in the Internet protocol suite responsible for delivering data packets from a source to a destination across network boundaries. It operates at the Network Layer (Layer 3) of the OSI model and is designed to address, route, and transfer data efficiently in a packet-switched network.","sidebar":"tutorialSidebar"},"networking/protocols/layer-3/nat":{"id":"networking/protocols/layer-3/nat","title":"NAT","description":"","sidebar":"tutorialSidebar"},"networking/protocols/layer-4/quic":{"id":"networking/protocols/layer-4/quic","title":"QUIC","description":"QUIC (Quick UDP Internet Connections) is a modern transport layer protocol developed by Google to address the limitations of older protocols like TCP (Transmission Control Protocol) and improve web performance, especially in high-latency and unreliable network conditions. QUIC runs on top of UDP (User Datagram Protocol), which is a connectionless protocol, and provides features typically associated with TCP, such as reliability, flow control, and congestion control, but with lower latency and better performance.","sidebar":"tutorialSidebar"},"networking/protocols/layer-4/tcp":{"id":"networking/protocols/layer-4/tcp","title":"TCP","description":"Overview","sidebar":"tutorialSidebar"},"networking/protocols/layer-4/udp":{"id":"networking/protocols/layer-4/udp","title":"UDP","description":"User Datagram Protocol (UDP) is a transport layer protocol defined by the Internet Protocol Suite. It is designed for simplicity and speed, providing a connectionless communication mechanism between applications.","sidebar":"tutorialSidebar"},"networking/protocols/layer-6/tls":{"id":"networking/protocols/layer-6/tls","title":"TLS","description":"Transport Layer Security (TLS) is a cryptographic protocol that ensures secure communication over a computer network. It is the successor to Secure Sockets Layer (SSL) and provides confidentiality, integrity, and authentication between applications. TLS is widely used in securing web traffic (HTTPS), email, voice over IP (VoIP), and other internet services.","sidebar":"tutorialSidebar"},"networking/protocols/layer-7/dns":{"id":"networking/protocols/layer-7/dns","title":"DNS","description":"The Domain Name System (DNS) is a hierarchical and decentralized naming system used to resolve human-readable domain names (like www.example.com) into machine-readable IP addresses (such as 192.0.2.1). It acts as the \\"phonebook\\" of the internet, translating friendly domain names into IP addresses that computers use to communicate with each other.","sidebar":"tutorialSidebar"},"networking/protocols/layer-7/ftp":{"id":"networking/protocols/layer-7/ftp","title":"FTP","description":"File Transfer Protocol (FTP) is a standard network protocol used to transfer files between a client and a server over a TCP/IP-based network, like the internet or an intranet. It operates on the client-server model, where the client initiates a connection to the server and requests files to be uploaded or downloaded.","sidebar":"tutorialSidebar"},"networking/protocols/layer-7/http":{"id":"networking/protocols/layer-7/http","title":"HTTP","description":"HTTP (Hypertext Transfer Protocol) is the foundation of data communication on the World Wide Web. It is an application layer protocol used to request and transfer hypertext data between a client (usually a web browser) and a server (hosting the website or service). HTTP is stateless, meaning each request and response are independent, with no stored state between requests. It follows a client-server architecture, where the client sends requests, and the server responds with the appropriate resource or status message.","sidebar":"tutorialSidebar"},"networking/protocols/layer-7/mqtt-amqp":{"id":"networking/protocols/layer-7/mqtt-amqp","title":"MQTT and AMQP","description":"MQTT (Message Queuing Telemetry Transport) and AMQP (Advanced Message Queuing Protocol) are two widely used messaging protocols in distributed systems. Both facilitate communication between devices, applications, and systems, but they are designed with different use cases and requirements in mind.","sidebar":"tutorialSidebar"},"networking/protocols/layer-7/rest":{"id":"networking/protocols/layer-7/rest","title":"RESTful","description":"REST (Representational State Transfer) is an architectural style for designing networked applications. It is based on a set of constraints and principles that make it suitable for creating scalable, reliable, and stateless web services. RESTful APIs (Application Programming Interfaces) are those that conform to the REST principles.","sidebar":"tutorialSidebar"},"networking/protocols/layer-7/rpc":{"id":"networking/protocols/layer-7/rpc","title":"RPC and gRPC","description":"RPC (Remote Procedure Call) is a protocol that allows a program to execute functions on a remote server as if they were local. It abstracts the complexity of network communication, enabling developers to build distributed systems with ease. Traditional RPC frameworks may run over TCP, UDP, or other transport protocols, depending on the implementation.","sidebar":"tutorialSidebar"},"networking/protocols/layer-7/smtp":{"id":"networking/protocols/layer-7/smtp","title":"SMTP","description":"","sidebar":"tutorialSidebar"},"networking/protocols/layer-7/ssh":{"id":"networking/protocols/layer-7/ssh","title":"SSH","description":"SSH (Secure Shell) is a cryptographic network protocol used to securely access remote systems over an unsecured network. It ensures confidentiality, integrity, and authentication for data communication between a client and a server. SSH is widely used for remote login, file transfers, and secure command execution.","sidebar":"tutorialSidebar"},"networking/protocols/layer-7/webrtc":{"id":"networking/protocols/layer-7/webrtc","title":"WebRTC","description":"WebRTC (Web Real-Time Communication) is an open-source project that provides web browsers and mobile applications with real-time communication (RTC) capabilities via simple APIs. It supports peer-to-peer audio, video, and data sharing without requiring any additional plugins.","sidebar":"tutorialSidebar"},"networking/protocols/layer-7/websocket":{"id":"networking/protocols/layer-7/websocket","title":"WebSocket","description":"WebSocket is a communication protocol that provides full-duplex (two-way) communication channels over a single, long-lived TCP connection. Unlike traditional HTTP requests, which are stateless and require a new connection for each exchange, WebSocket enables continuous communication between a client (such as a browser) and a server. WebSocket is particularly useful in scenarios requiring real-time communication, such as chat applications, live notifications, and online gaming.","sidebar":"tutorialSidebar"},"networking/protocols/osi-model":{"id":"networking/protocols/osi-model","title":"OSI Model","description":"The OSI (Open Systems Interconnection) model is a conceptual framework used to understand and implement standard protocols in network communications. It divides the communication process into seven distinct layers, each with specific functions and responsibilities.","sidebar":"tutorialSidebar"},"operating-systems/components-os":{"id":"operating-systems/components-os","title":"Components of OS","description":"Operating Systems are complex software systems composed of various components, each responsible for managing different aspects of the computer system. Their architecture defines how these components interact with one another and with hardware and applications.","sidebar":"tutorialSidebar"},"operating-systems/introduction":{"id":"operating-systems/introduction","title":"Introduction","description":"An Operating System (OS) is a software layer that sits between the hardware and user applications, providing an abstraction of hardware resources and managing them efficiently. It acts as an intermediary between the user and the computer hardware.","sidebar":"tutorialSidebar"},"other/mitm-attack":{"id":"other/mitm-attack","title":"Man-in-the-Middle (MITM) Attack","description":"A Man-in-the-Middle (MITM) attack is a type of cyberattack where a malicious actor intercepts and potentially alters communications between two parties without their knowledge. The attacker essentially \\"sits in the middle\\" of the communication channel, acting as a proxy to capture or manipulate data.","sidebar":"tutorialSidebar"},"other/protocolbuf":{"id":"other/protocolbuf","title":"Protocol Buffers","description":"Protocol Buffers (Protobuf) is a language-neutral, platform-neutral mechanism for serializing structured data developed by Google. It is highly efficient, compact, and suitable for communication between services, especially in distributed systems.","sidebar":"tutorialSidebar"},"other/regex":{"id":"other/regex","title":"Regular Expressions (RegEx)","description":"Regular Expressions (RegEx) are powerful tools used for pattern matching and text manipulation. They provide a way to search, match, and manipulate strings using specific patterns. RegEx is commonly used in programming, text processing, data validation, and web development.","sidebar":"tutorialSidebar"},"other/splunk/architecture":{"id":"other/splunk/architecture","title":"Architecture","description":"Splunk\'s architecture is designed to handle large-scale ingestion, indexing, and querying of machine data in real-time. It is modular, distributed, and scalable, making it suitable for small setups to massive enterprise deployments.","sidebar":"tutorialSidebar"},"other/splunk/conf":{"id":"other/splunk/conf","title":"Configuration Files","description":"Splunk is highly configurable and extensible, and its behavior is primarily controlled through a set of configuration files known as .conf files. These files define settings for inputs, indexing, parsing, search behavior, user roles, apps, deployment configurations, and more.","sidebar":"tutorialSidebar"},"other/splunk/introduction":{"id":"other/splunk/introduction","title":"Introduction","description":"Splunk is a powerful platform for searching, monitoring, and analyzing machine-generated data (also known as log or event data) in real time. It is widely used for log management, application monitoring, security information and event management (SIEM), infrastructure monitoring, and business intelligence.","sidebar":"tutorialSidebar"},"programming/fundamentals/regex":{"id":"programming/fundamentals/regex","title":"Regular Expressions (RegEx)","description":"Regular Expressions (RegEx) are powerful tools used for pattern matching and text manipulation. They provide a way to search, match, and manipulate strings using specific patterns. RegEx is commonly used in programming, text processing, data validation, and web development.","sidebar":"tutorialSidebar"},"programming/introduction":{"id":"programming/introduction","title":"Introduction","description":"These are my notes on programming, covering both programming languages and core concepts. Currently, I\u2019ve documented Python, JavaScript, and Go. I plan to explore C, C++, Rust, and Assembly next. While I\u2019ve studied C, C++, and Assembly in the past, my familiarity with them has faded over time. As a developer, I believe it\'s essential to have a strong grasp of C, C++, and Assembly, since they form the foundation of many modern programming languages and system-level concepts.","sidebar":"tutorialSidebar"},"programming/programming-languages/go/array-maps":{"id":"programming/programming-languages/go/array-maps","title":"Arrays, Slices and, Maps","description":"In Go, arrays, slices, and maps are built-in types used for storing and working with collections of data. Each of these data structures serves a different purpose and has its own unique characteristics and use cases. Understanding how they work will help you write more efficient and effective Go code.","sidebar":"tutorialSidebar"},"programming/programming-languages/go/condition":{"id":"programming/programming-languages/go/condition","title":"Conditions and Loops","description":"Go provides concise and flexible syntax for implementing conditional statements and loops. These constructs are essential for controlling the flow of execution and iterating over data structures.","sidebar":"tutorialSidebar"},"programming/programming-languages/go/error-handling":{"id":"programming/programming-languages/go/error-handling","title":"Error Handling","description":"Error handling in Go (Golang) is a fundamental part of writing robust and reliable programs. Unlike many other languages that use exceptions, Go uses a simple, explicit, and lightweight approach based on returning error values.","sidebar":"tutorialSidebar"},"programming/programming-languages/go/files":{"id":"programming/programming-languages/go/files","title":"File Handling","description":"File operations are a core part of many Go applications. Go provides a rich set of APIs in the os, io, and io/fs packages for file and directory management. This note covers file creation, reading, writing, permissions, metadata, directory operations, and best practices.","sidebar":"tutorialSidebar"},"programming/programming-languages/go/fmt-package":{"id":"programming/programming-languages/go/fmt-package","title":"fmt Package","description":"The fmt package in Go provides formatted I/O functions similar to C\u2019s printf family. It is one of the most commonly used standard libraries in Go and supports:","sidebar":"tutorialSidebar"},"programming/programming-languages/go/functions":{"id":"programming/programming-languages/go/functions","title":"Functions","description":"Functions are fundamental building blocks in Go, allowing you to write reusable, modular, and maintainable code. A function is a group of statements that perform a specific task and can optionally return a result.","sidebar":"tutorialSidebar"},"programming/programming-languages/go/interfaces":{"id":"programming/programming-languages/go/interfaces","title":"Interfaces and Generics","description":"Go provides powerful features for abstraction and code reuse through interfaces and, since Go 1.18, generics. These concepts are essential for writing flexible, maintainable, and idiomatic Go code.","sidebar":"tutorialSidebar"},"programming/programming-languages/go/introduction":{"id":"programming/programming-languages/go/introduction","title":"Introduction","description":"Go, often referred to as Golang, is an open-source, statically typed, compiled programming language designed at Google. It was created by Robert Griesemer, Rob Pike, and Ken Thompson in 2007 and released publicly in 2009. Go was designed to address the shortcomings of existing languages when it comes to building scalable, efficient systems. With a strong focus on simplicity, performance, and concurrency, Go has gained widespread adoption, particularly in the cloud-native and microservices space.","sidebar":"tutorialSidebar"},"programming/programming-languages/go/mutation":{"id":"programming/programming-languages/go/mutation","title":"Mutation","description":"Mutation refers to the process of altering the state or value of a variable, object, or data structure after it has been created. In Go, mutation is a common concept, especially in data structures like slices, maps, and structs. Go provides mechanisms to perform mutations while also emphasizing immutability in certain contexts (like strings).","sidebar":"tutorialSidebar"},"programming/programming-languages/go/packages-modules":{"id":"programming/programming-languages/go/packages-modules","title":"Packages and Modules","description":"Go Modules","sidebar":"tutorialSidebar"},"programming/programming-languages/go/pointers":{"id":"programming/programming-languages/go/pointers","title":"Pointers","description":"Pointers are one of the fundamental concepts in Go (and many other programming languages). A pointer is a variable that stores the memory address of another variable. By using pointers, you can directly access and modify the value stored in a particular memory location.","sidebar":"tutorialSidebar"},"programming/programming-languages/go/structs":{"id":"programming/programming-languages/go/structs","title":"Structs and Custom Types","description":"Structs are Go\'s way of creating user-defined types that group together related data. They are similar to classes in other languages but without inheritance. Go also allows you to create custom types based on existing types, providing flexibility and type safety.","sidebar":"tutorialSidebar"},"programming/programming-languages/go/variable":{"id":"programming/programming-languages/go/variable","title":"Variables and Scope","description":"Variables","sidebar":"tutorialSidebar"},"programming/programming-languages/javascript/asynchronous":{"id":"programming/programming-languages/javascript/asynchronous","title":"Asynchronous Programming","description":"Asynchronous programming in JavaScript allows you to perform tasks like I/O operations, network requests, and file reading without blocking the execution of the rest of the program. JavaScript uses callbacks, promises, and async/await to handle asynchronous code. Let\u2019s explore each concept in detail:","sidebar":"tutorialSidebar"},"programming/programming-languages/javascript/call-stack":{"id":"programming/programming-languages/javascript/call-stack","title":"Call Stack","description":"The Call Stack is a data structure that keeps track of the active execution contexts in a program. It follows the LIFO (Last In, First Out) principle, meaning the last function added to the stack is the first one to be executed and removed after completion.","sidebar":"tutorialSidebar"},"programming/programming-languages/javascript/callback-hof":{"id":"programming/programming-languages/javascript/callback-hof","title":"Callbacks and Higher-Order Functions","description":"In JavaScript, callbacks and higher-order functions are key concepts, especially when dealing with asynchronous programming, functional programming paradigms, and code modularity.","sidebar":"tutorialSidebar"},"programming/programming-languages/javascript/closures":{"id":"programming/programming-languages/javascript/closures","title":"Closures and Lexical Scoping","description":"Closures","sidebar":"tutorialSidebar"},"programming/programming-languages/javascript/coercion-conversion":{"id":"programming/programming-languages/javascript/coercion-conversion","title":"Type Coercion vs Type Conversion","description":"In JavaScript, handling data types and performing operations that involve different data types is a common occurrence. JavaScript has two important concepts related to types: Type Coercion and Type Conversion. Although these terms are often used interchangeably, they have distinct meanings in the context of JavaScript programming.","sidebar":"tutorialSidebar"},"programming/programming-languages/javascript/concurrency-and-parallelism":{"id":"programming/programming-languages/javascript/concurrency-and-parallelism","title":"Concurrency and Parallelism","description":"In modern JavaScript, handling multiple tasks simultaneously is crucial for building fast, responsive applications. However, understanding the difference between concurrency and parallelism is important for developers to design systems that can efficiently manage multiple tasks. JavaScript is single-threaded but can still handle multiple operations concurrently without blocking the main thread.","sidebar":"tutorialSidebar"},"programming/programming-languages/javascript/conditions-loops":{"id":"programming/programming-languages/javascript/conditions-loops","title":"Conditions and Loops","description":"Conditionals","sidebar":"tutorialSidebar"},"programming/programming-languages/javascript/currying-iife":{"id":"programming/programming-languages/javascript/currying-iife","title":"Currying and IIFE","description":"JavaScript has several advanced functional programming concepts that make it highly versatile. Two such concepts are currying and Immediately Invoked Function Expressions (IIFE). This note explains these concepts in detail, with examples.","sidebar":"tutorialSidebar"},"programming/programming-languages/javascript/data-types":{"id":"programming/programming-languages/javascript/data-types","title":"Data Types","description":"JavaScript is a dynamically typed language, which means variables are not bound to specific data types. However, it still categorizes values into distinct data types, broadly divided into primitive and non-primitive types.","sidebar":"tutorialSidebar"},"programming/programming-languages/javascript/es6":{"id":"programming/programming-languages/javascript/es6","title":"ES6 and Beyond","description":"Modern JavaScript (ES6+) introduced several powerful features that simplify code, improve readability, and enable developers to write more expressive and maintainable applications. Below is a detailed explanation of these features.","sidebar":"tutorialSidebar"},"programming/programming-languages/javascript/event-handling":{"id":"programming/programming-languages/javascript/event-handling","title":"Event Handling","description":"Event handling is a crucial part of JavaScript, enabling interactivity in web applications. Events are actions or occurrences, such as user interactions (clicks, key presses, or mouse movements), browser events (page load, resize, etc.), or programmatically triggered events. Event handling in JavaScript involves listening for these events and executing specific functions in response.","sidebar":"tutorialSidebar"},"programming/programming-languages/javascript/event-loop":{"id":"programming/programming-languages/javascript/event-loop","title":"Event Loop","description":"The Event Loop is one of the most critical components of JavaScript\'s concurrency model, enabling the language to handle asynchronous tasks while maintaining its single-threaded nature. It is a mechanism that orchestrates the execution of tasks, ensuring that code runs in a non-blocking and seamless manner.","sidebar":"tutorialSidebar"},"programming/programming-languages/javascript/execution-context":{"id":"programming/programming-languages/javascript/execution-context","title":"Execution Context","description":"JavaScript is a single-threaded, synchronous programming language. Despite its asynchronous capabilities (using features like setTimeout, Promises, etc.), its execution model revolves around the Execution Context, which is the environment in which JavaScript code is evaluated and executed.","sidebar":"tutorialSidebar"},"programming/programming-languages/javascript/functions":{"id":"programming/programming-languages/javascript/functions","title":"Functions","description":"In JavaScript, functions are core building blocks. A function is a reusable block of code that performs a specific task. Functions allow for modular code, encapsulation, and are essential for asynchronous operations and callback handling.","sidebar":"tutorialSidebar"},"programming/programming-languages/javascript/introduction":{"id":"programming/programming-languages/javascript/introduction","title":"Introduction","description":"- JavaScript is a high-level, interpreted programming language.","sidebar":"tutorialSidebar"},"programming/programming-languages/javascript/mutation":{"id":"programming/programming-languages/javascript/mutation","title":"Mutation and Immutability","description":"In JavaScript, mutation refers to modifying or changing a value directly in memory, while immutability involves creating new values without altering the original data. Understanding which data types are mutable or immutable is essential for managing data flow and avoiding unintended side effects.","sidebar":"tutorialSidebar"},"programming/programming-languages/javascript/oop":{"id":"programming/programming-languages/javascript/oop","title":"Object-Oriented Programming (OOPs)","description":"Object-Oriented Programming (OOPs) is a programming paradigm that models real-world entities using objects. It provides a structured approach to organize and manage code by encapsulating data and functionality together. OOPs promotes reusability, scalability, and maintainability by employing key principles such as inheritance, encapsulation, polymorphism, and abstraction.","sidebar":"tutorialSidebar"},"programming/programming-languages/javascript/prototype-inheritance":{"id":"programming/programming-languages/javascript/prototype-inheritance","title":"Prototypes and Inheritance","description":"Prototypes","sidebar":"tutorialSidebar"},"programming/programming-languages/javascript/queues":{"id":"programming/programming-languages/javascript/queues","title":"Microtask Queue, Macrotask Queue, and Rendering Queue","description":"JavaScript uses queues to manage the execution of asynchronous tasks and UI updates, ensuring that tasks are executed in the right order and at the right time. The Microtask Queue, Macrotask Queue, and Rendering Queue are critical components that work together to maintain performance and responsiveness in JavaScript applications. Understanding these concepts is essential for optimizing task scheduling and avoiding common pitfalls like UI jank or delayed task execution.","sidebar":"tutorialSidebar"},"programming/programming-languages/javascript/this":{"id":"programming/programming-languages/javascript/this","title":"The this Keyword","description":"In JavaScript, the this keyword is a powerful and often misunderstood concept. It refers to the execution context (the object to which the function belongs) at runtime. The value of this depends on how and where a function is invoked, rather than where it is declared.","sidebar":"tutorialSidebar"},"programming/programming-languages/javascript/use-strict":{"id":"programming/programming-languages/javascript/use-strict","title":"\\"use strict\\"","description":"\\"use strict\\" is a directive introduced in ECMAScript 5 (ES5) that enables strict mode in JavaScript. Strict mode is a restricted variant of JavaScript that helps catch common coding mistakes, prevents the use of unsafe features, and enforces stricter parsing and error handling.","sidebar":"tutorialSidebar"},"programming/programming-languages/javascript/variables":{"id":"programming/programming-languages/javascript/variables","title":"Variables","description":"Variables in JavaScript are used to store data values, which can be of various types like numbers, strings, objects, and arrays.","sidebar":"tutorialSidebar"},"programming/programming-languages/python/args-kwargs":{"id":"programming/programming-languages/python/args-kwargs","title":"*args and **kwargs","description":"In Python, args and *kwargs are used to handle variable numbers of arguments passed to a function. These allow We to write more flexible functions that can accept a range of input values without needing to explicitly define every parameter.","sidebar":"tutorialSidebar"},"programming/programming-languages/python/async":{"id":"programming/programming-languages/python/async","title":"Asynchronous Programming","description":"Python\'s asyncio is a library introduced in Python 3.4 to enable asynchronous programming, allowing developers to write concurrent code that can handle I/O-bound operations efficiently. It\u2019s particularly useful for tasks like network programming, web scraping, or any scenario where operations spend significant time waiting (e.g., for network responses or file I/O). Below is a detailed exploration of asyncio and its core components: Event Loop, Coroutines, Tasks, Futures, and Synchronization.","sidebar":"tutorialSidebar"},"programming/programming-languages/python/context-manager":{"id":"programming/programming-languages/python/context-manager","title":"Context Managers","description":"What is a Context Manager?","sidebar":"tutorialSidebar"},"programming/programming-languages/python/data-structure":{"id":"programming/programming-languages/python/data-structure","title":"Common Data Structures in Python","description":"Python provides several built-in data structures that are highly optimized and allow developers to efficiently manage and manipulate data. The key ones are list, dict, set, tuple, and str (string). Let\u2019s explore these data structures, their implementations, and the common methods associated with each.","sidebar":"tutorialSidebar"},"programming/programming-languages/python/decorator":{"id":"programming/programming-languages/python/decorator","title":"Decorators","description":"What are Decorators?","sidebar":"tutorialSidebar"},"programming/programming-languages/python/exceptions":{"id":"programming/programming-languages/python/exceptions","title":"Exception Handling","description":"Exception handling in Python is a powerful feature that allows a program to deal with errors (exceptions) in a controlled manner. It prevents abrupt termination of the program and allows the developer to handle errors in a way that is appropriate to the context.","sidebar":"tutorialSidebar"},"programming/programming-languages/python/execution-flow":{"id":"programming/programming-languages/python/execution-flow","title":"Execution Flow","description":"How CPython Works","sidebar":"tutorialSidebar"},"programming/programming-languages/python/file-handling":{"id":"programming/programming-languages/python/file-handling","title":"File Handling","description":"File handling is an essential part of Python programming. It allows We to perform various operations such as reading, writing, and manipulating files stored on Our system. Python provides built-in functions and modules to work with files in a simple and efficient manner.","sidebar":"tutorialSidebar"},"programming/programming-languages/python/generational-garbage-collector":{"id":"programming/programming-languages/python/generational-garbage-collector","title":"Generational Garbage Collection","description":"The Object Graph","sidebar":"tutorialSidebar"},"programming/programming-languages/python/introduction":{"id":"programming/programming-languages/python/introduction","title":"Introduction","description":"Python is a versatile, high-level, and general-purpose programming language known for its readability, simplicity, and extensive ecosystem. Created by Guido van Rossum and first released in 1991, Python has grown to be one of the most popular programming languages in the world. Its design philosophy emphasizes code readability and uses significant indentation to define blocks of code.","sidebar":"tutorialSidebar"},"programming/programming-languages/python/iterators-generators":{"id":"programming/programming-languages/python/iterators-generators","title":"Iterators and Generators","description":"Iterators","sidebar":"tutorialSidebar"},"programming/programming-languages/python/loop-control-functions":{"id":"programming/programming-languages/python/loop-control-functions","title":"Loops, Control Structures, and Functions","description":"Python Loops","sidebar":"tutorialSidebar"},"programming/programming-languages/python/memory-management":{"id":"programming/programming-languages/python/memory-management","title":"Memory Management","description":"Memory management in Python is a critical part of its runtime, ensuring efficient use of system resources and proper handling of objects. Python provides automatic memory management using techniques like reference counting and garbage collection to allocate and deallocate memory efficiently.","sidebar":"tutorialSidebar"},"programming/programming-languages/python/metaprogramming":{"id":"programming/programming-languages/python/metaprogramming","title":"Metaprogramming","description":"Metaprogramming refers to the ability of a program to treat other programs as data. It involves writing code that manipulates or generates other code at runtime, often modifying its behavior dynamically. Python is an excellent language for metaprogramming because of its dynamic nature, where classes and functions can be modified or generated on the fly. This gives developers a high degree of flexibility and power.","sidebar":"tutorialSidebar"},"programming/programming-languages/python/multiprocessing":{"id":"programming/programming-languages/python/multiprocessing","title":"Multiprocessing","description":"Multiprocessing is Python\'s solution to achieving true parallelism by running multiple processes simultaneously. Unlike threading (which shares memory but is limited by the GIL), multiprocessing creates separate Python processes, each with its own memory space and Python interpreter.","sidebar":"tutorialSidebar"},"programming/programming-languages/python/oop":{"id":"programming/programming-languages/python/oop","title":"Object-Oriented Programming (OOP)","description":"Object-Oriented Programming (OOP) is a programming paradigm that uses \\"objects\\" to model real-world or abstract entities. Objects contain data (attributes) and behaviors (methods). Python supports OOP principles like encapsulation, inheritance, polymorphism, and abstraction, which help in creating structured, reusable, and modular code.","sidebar":"tutorialSidebar"},"programming/programming-languages/python/pytest":{"id":"programming/programming-languages/python/pytest","title":"Pytest","description":"Pytest is one of the most widely used testing frameworks in Python. It is known for its simplicity, scalability, and rich feature set. Pytest allows developers to write simple unit tests as well as complex functional tests, and it can easily integrate with other tools to provide a powerful testing experience. It also supports various testing styles, including functional, object-oriented, and parameterized testing.","sidebar":"tutorialSidebar"},"programming/programming-languages/python/python-basics":{"id":"programming/programming-languages/python/python-basics","title":"Python Basics","description":"Variables and Data Types","sidebar":"tutorialSidebar"},"programming/programming-languages/python/pythonic-code":{"id":"programming/programming-languages/python/pythonic-code","title":"Pythonic Code","description":"\\"Pythonic\\" refers to writing code that adheres to the conventions, idioms, and best practices that are considered natural and efficient in Python. Pythonic code is not only functional but also elegant, readable, and maintainable. Writing Pythonic code typically involves using the language\u2019s features in a way that is most efficient and idiomatic, making it easy to understand for others who are familiar with Python.","sidebar":"tutorialSidebar"},"programming/programming-languages/python/reference-counting":{"id":"programming/programming-languages/python/reference-counting","title":"Reference Counting","description":"Reference counting is the primary memory management technique in Python. It keeps track of how many references (or pointers) are pointing to an object in memory. When an object\'s reference count drops to zero, it means the object is no longer accessible and can be safely deallocated by Python\'s memory manager.","sidebar":"tutorialSidebar"},"programming/programming-languages/python/scoping":{"id":"programming/programming-languages/python/scoping","title":"Variable Scoping","description":"Variable scoping in Python determines the accessibility of variables within different parts of the code. It defines where a variable can be read or modified. Python follows specific scoping rules, which are influenced by the LEGB rule (Local, Enclosing, Global, Built-in). Understanding scoping is crucial to avoid conflicts and unexpected behavior in Our programs.","sidebar":"tutorialSidebar"},"programming/programming-languages/python/standard-library":{"id":"programming/programming-languages/python/standard-library","title":"Standard Library","description":"Python\'s Standard Library is a collection of modules that are included with Python. These modules provide a wide variety of functionalities that help solve common programming tasks like working with files, handling data, and performing operations on collections, strings, etc. The great thing about the Python Standard Library is that it\u2019s built-in and doesn\u2019t require any external installation.","sidebar":"tutorialSidebar"},"programming/programming-languages/python/threads":{"id":"programming/programming-languages/python/threads","title":"Threading","description":"Threading is a technique that allows a program to perform multiple operations concurrently within the same process. In Python, the threading module provides a way to create and manage threads, enabling developers to write programs that can execute multiple tasks seemingly simultaneously.","sidebar":"tutorialSidebar"},"programming/programming-languages/python/unit-test":{"id":"programming/programming-languages/python/unit-test","title":"Unit Testing","description":"Unit testing is a fundamental concept in software development where individual units (typically functions or methods) of a program are tested in isolation to ensure that each part of the code functions as expected. In Python, unit testing is typically done using the unittest module, which is a built-in testing framework inspired by Java\'s JUnit. Unit tests help identify bugs early in the development cycle and provide a safety net when making changes or refactoring code.","sidebar":"tutorialSidebar"},"system-design/containers/cgroups":{"id":"system-design/containers/cgroups","title":"cgroups in Linux","description":"What Are cgroups?","sidebar":"tutorialSidebar"},"system-design/containers/chroot":{"id":"system-design/containers/chroot","title":"chroot in Linux","description":"What is chroot?","sidebar":"tutorialSidebar"},"system-design/containers/docker-cli":{"id":"system-design/containers/docker-cli","title":"Docker CLI","description":"Docker CLI (Command Line Interface) is a powerful tool for interacting with Docker, allowing users to manage containers, images, networks, and volumes through commands in the terminal. Below is a detailed guide covering common Docker commands, flags they accept, and usage examples.","sidebar":"tutorialSidebar"},"system-design/containers/docker-images":{"id":"system-design/containers/docker-images","title":"Docker Images","description":"Docker images are the core building blocks of Docker containers. They serve as lightweight, stand-alone, and executable software packages that include everything needed to run a piece of software: the code, runtime, libraries, environment variables, and configurations.","sidebar":"tutorialSidebar"},"system-design/containers/dockerfile":{"id":"system-design/containers/dockerfile","title":"Dockerfile","description":"A Dockerfile is a text file that contains a set of instructions on how to build a Docker image. It defines everything required to set up an environment, install dependencies, configure the software, and run applications inside a container. Dockerfiles are crucial for automating the process of building Docker images, making the process repeatable and consistent across different environments.","sidebar":"tutorialSidebar"},"system-design/containers/internals":{"id":"system-design/containers/internals","title":"Docker Internals","description":"Docker is a tool designed to make it easier to create, deploy, and run applications using containers. The internal working of Docker involves several components, each playing a specific role in the containerization process. Below, I will explain the key components and how they interact within Docker using diagrams in Mermaid.","sidebar":"tutorialSidebar"},"system-design/containers/introduction":{"id":"system-design/containers/introduction","title":"Introduction","description":"Containers are lightweight, portable, and self-sufficient units that allow developers to package applications along with their dependencies, libraries, and configuration files. They ensure that the application runs consistently across different environments, such as development, testing, and production. Containers isolate applications from their underlying host system, enabling them to operate in a predictable and repeatable manner.","sidebar":"tutorialSidebar"},"system-design/containers/namespaces":{"id":"system-design/containers/namespaces","title":"Linux Namespaces","description":"Overview of Namespaces","sidebar":"tutorialSidebar"},"system-design/distributed-system-communication/mq-vs-ms":{"id":"system-design/distributed-system-communication/mq-vs-ms","title":"Message Queues and Message Streams","description":"Message queues and message streams are both mechanisms for enabling communication between distributed systems, but they serve different purposes and use distinct paradigms. Understanding their differences, features, and use cases is critical for designing scalable and reliable systems.","sidebar":"tutorialSidebar"},"system-design/distributed-system-communication/rabbit-mq":{"id":"system-design/distributed-system-communication/rabbit-mq","title":"RabbitMQ","description":"RabbitMQ is an open-source message broker that facilitates the exchange of messages between producers and consumers. It supports various messaging protocols and patterns, making it a versatile choice for building distributed systems.","sidebar":"tutorialSidebar"},"system-design/distributed-system-communication/sns":{"id":"system-design/distributed-system-communication/sns","title":"AWS SNS","description":"Amazon Simple Notification Service (SNS) is a fully managed messaging service provided by AWS that enables the decoupling of microservices, distributed systems, and serverless applications through a publish-subscribe (pub/sub) messaging pattern. It is primarily used for sending notifications in real-time to multiple subscribers over different protocols.","sidebar":"tutorialSidebar"},"system-design/distributed-system-communication/sqs":{"id":"system-design/distributed-system-communication/sqs","title":"AWS SQS","description":"Amazon SQS (Simple Queue Service) is a fully managed message queuing service that enables decoupling and scalability in distributed systems. It is highly reliable, secure, and scalable, making it a popular choice for applications requiring asynchronous communication.","sidebar":"tutorialSidebar"},"system-design/fundamental-concepts/caching":{"id":"system-design/fundamental-concepts/caching","title":"Caching","description":"Caching is a technique used to store copies of data temporarily in high-speed storage (cache) so that future requests for that data can be served faster. Caching improves application performance and reduces latency by reducing the need to repeatedly fetch or compute the same data.","sidebar":"tutorialSidebar"},"system-design/fundamental-concepts/cap-theorem":{"id":"system-design/fundamental-concepts/cap-theorem","title":"CAP Theorem","description":"The CAP Theorem, also known as Brewer\'s Theorem, is a fundamental principle in distributed systems. It was introduced by Eric Brewer in 2000 and formally proven by Seth Gilbert and Nancy Lynch in 2002. The theorem states that in a distributed system, it is impossible to simultaneously guarantee all three of the following properties:","sidebar":"tutorialSidebar"},"system-design/fundamental-concepts/high-and-low-level-design":{"id":"system-design/fundamental-concepts/high-and-low-level-design","title":"High and Low Level Design","description":"Low-Level Design (LLD) and High-Level Design (HLD) are essential components of software development, specifically in the architecture and design phases of a project. Both serve distinct purposes and focus on different levels of abstraction in system design. Below is a detailed breakdown of both concepts.","sidebar":"tutorialSidebar"},"system-design/fundamental-concepts/latency-and-throughput":{"id":"system-design/fundamental-concepts/latency-and-throughput","title":"Latency and Throughput","description":"Latency and throughput are key performance metrics often used to assess the performance of systems, networks, and applications. While they are related, they measure different aspects of performance. Understanding the distinction and the interplay between them is crucial in designing and optimizing systems.","sidebar":"tutorialSidebar"},"system-design/fundamental-concepts/load-balancer":{"id":"system-design/fundamental-concepts/load-balancer","title":"Distributed Load Balancer","description":"A Distributed Load Balancer is a specialized system designed to distribute network traffic across multiple servers or resources in a distributed environment. Unlike traditional load balancers, which may operate within a single data center, distributed load balancers function across multiple geographic locations or cloud regions.","sidebar":"tutorialSidebar"},"system-design/fundamental-concepts/proxies":{"id":"system-design/fundamental-concepts/proxies","title":"Proxies","description":"A proxy is an intermediary server that sits between a client and a server to facilitate communication, enforce security, or enhance performance. Depending on its position and purpose, a proxy can be categorized as:","sidebar":"tutorialSidebar"},"system-design/introduction":{"id":"system-design/introduction","title":"Introduction","description":"Contents","sidebar":"tutorialSidebar"},"system-design/kubernetes/components":{"id":"system-design/kubernetes/components","title":"Components of Kubernetes","description":"Kubernetes has a rich architecture that includes a variety of components working together to enable the deployment, scaling, and management of containerized applications. These components can be divided into two main categories: Master Node components and Worker Node components.","sidebar":"tutorialSidebar"},"system-design/kubernetes/introduction":{"id":"system-design/kubernetes/introduction","title":"Introduction","description":"What is Kubernetes?","sidebar":"tutorialSidebar"},"version-control/git/git-config":{"id":"version-control/git/git-config","title":"Git config","description":"The git config command is used to configure Git settings, including user information, repository-specific settings, and system-wide configurations. These configurations help customize how Git behaves in different scenarios, like defining who commits to the repository, setting editor preferences, and more.","sidebar":"tutorialSidebar"},"version-control/git/git-internals":{"id":"version-control/git/git-internals","title":"Git Internals","description":"The .git Folder","sidebar":"tutorialSidebar"},"version-control/git/head-reflog":{"id":"version-control/git/head-reflog","title":"HEAD and reflog","description":"HEAD in Git","sidebar":"tutorialSidebar"},"version-control/git/introduction":{"id":"version-control/git/introduction","title":"Introduction","description":"Git is a distributed version control system that helps developers track changes in source code during software development. Created by Linus Torvalds in 2005, Git is designed to handle projects of all sizes with speed and efficiency. Its primary purpose is to coordinate work among multiple developers, manage code changes, and maintain a history of every modification made to the codebase.","sidebar":"tutorialSidebar"},"version-control/git/merge-and-rebase":{"id":"version-control/git/merge-and-rebase","title":"Git Merge, Rebase, and Squash","description":"Git is a powerful version control system, and understanding how to manage commits and branches effectively is key to maintaining a clean and organized codebase. Below are detailed explanations of some core Git concepts: Merge, Rebase, Squash, Three-Way Merge, Fast Forward, and how they work in different scenarios.","sidebar":"tutorialSidebar"},"version-control/git/remote-repositories":{"id":"version-control/git/remote-repositories","title":"Remote Repositories in Git","description":"A remote repository is a version of your project that is hosted on the internet or another network. This allows multiple people to collaborate on the same project from different locations. Common platforms for hosting remote repositories include GitHub, GitLab, Bitbucket, and others.","sidebar":"tutorialSidebar"},"version-control/git/stashing":{"id":"version-control/git/stashing","title":"Stashing in Git","description":"Stashing is a feature in Git that allows you to temporarily save changes in your working directory and index (staged files) without committing them. It\u2019s useful when you need to switch branches or perform other tasks but aren\u2019t ready to commit your current changes.","sidebar":"tutorialSidebar"},"version-control/introduction":{"id":"version-control/introduction","title":"Introduction","description":"Notes on version control software.","sidebar":"tutorialSidebar"}}}}')}}]);