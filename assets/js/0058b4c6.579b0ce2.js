"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[849],{6164:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Introduction","href":"/docs/intro","docId":"intro","unlisted":false},{"type":"category","label":"Data Structure and Algorithms","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Arrays and Hashing","href":"/docs/data-structure-and-algorithms/arrays-and-hasing","docId":"data-structure-and-algorithms/arrays-and-hasing","unlisted":false},{"type":"link","label":"Two Pointers","href":"/docs/data-structure-and-algorithms/two-pointers","docId":"data-structure-and-algorithms/two-pointers","unlisted":false}]},{"type":"category","label":"Networking","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Client-Server Architecture","href":"/docs/networking/client-server-architecture","docId":"networking/client-server-architecture","unlisted":false},{"type":"link","label":"OSI Model","href":"/docs/networking/osi-model","docId":"networking/osi-model","unlisted":false},{"type":"link","label":"Internet Protocol","href":"/docs/networking/internet-protocol","docId":"networking/internet-protocol","unlisted":false}]},{"type":"category","label":"Databases","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction to Databases","href":"/docs/databases/introduction","docId":"databases/introduction","unlisted":false},{"type":"link","label":"SQL","href":"/docs/databases/sql","docId":"databases/sql","unlisted":false},{"type":"link","label":"Hash Tables","href":"/docs/databases/hash-tables","docId":"databases/hash-tables","unlisted":false}]},{"type":"category","label":"System Design","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Horizontal Scaling and Vertical Scaling","href":"/docs/system-design/vertical-and-horizontal-scaling","docId":"system-design/vertical-and-horizontal-scaling","unlisted":false},{"type":"link","label":"Latency and Throughput","href":"/docs/system-design/latency-and-throughput","docId":"system-design/latency-and-throughput","unlisted":false},{"type":"link","label":"CAP Theorem: An Overview","href":"/docs/system-design/cap-theorem","docId":"system-design/cap-theorem","unlisted":false}]}]},"docs":{"data-structure-and-algorithms/arrays-and-hasing":{"id":"data-structure-and-algorithms/arrays-and-hasing","title":"Arrays and Hashing","description":"Arrays","sidebar":"tutorialSidebar"},"data-structure-and-algorithms/two-pointers":{"id":"data-structure-and-algorithms/two-pointers","title":"Two Pointers","description":"Definition","sidebar":"tutorialSidebar"},"databases/hash-tables":{"id":"databases/hash-tables","title":"Hash Tables","description":"A Hash Table is a data structure that provides an efficient way to store and retrieve data using key-value pairs. The underlying mechanism relies on a hash function that maps keys to specific indices in an array, ensuring fast access times.","sidebar":"tutorialSidebar"},"databases/introduction":{"id":"databases/introduction","title":"Introduction to Databases","description":"What is a database?","sidebar":"tutorialSidebar"},"databases/sql":{"id":"databases/sql","title":"SQL","description":"SQL is a computer language used to communicate and manage data within a relational database. It is used to perform tasks such as retrieving, inserting, updating, and deleting data.","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"Introduction","description":"This repository contains my personal collection of notes, primarily focused on Computer Science, Software Engineering, and Backend Development. As I explore various topics in these areas, I document my learnings and publish them on this website.","sidebar":"tutorialSidebar"},"networking/client-server-architecture":{"id":"networking/client-server-architecture","title":"Client-Server Architecture","description":"Client-Server Architecture is a foundational model in network computing that structures applications into two main components: clients and servers. This architecture facilitates resource sharing, scalability, and efficient management of networked systems. Below are detailed notes covering various aspects of Client-Server Architecture.","sidebar":"tutorialSidebar"},"networking/internet-protocol":{"id":"networking/internet-protocol","title":"Internet Protocol","description":"The Internet Protocol (IP) is a core protocol in the Internet protocol suite responsible for delivering data packets from a source to a destination across network boundaries. It operates at the Network Layer (Layer 3) of the OSI model and is designed to address, route, and transfer data efficiently in a packet-switched network.","sidebar":"tutorialSidebar"},"networking/osi-model":{"id":"networking/osi-model","title":"OSI Model","description":"The OSI (Open Systems Interconnection) model is a conceptual framework used to understand and implement standard protocols in network communications. It divides the communication process into seven distinct layers, each with specific functions and responsibilities.","sidebar":"tutorialSidebar"},"system-design/cap-theorem":{"id":"system-design/cap-theorem","title":"CAP Theorem: An Overview","description":"The CAP Theorem, also known as Brewer\'s Theorem, is a fundamental principle in distributed systems. It was introduced by Eric Brewer in 2000 and formally proven by Seth Gilbert and Nancy Lynch in 2002. The theorem states that in a distributed system, it is impossible to simultaneously guarantee all three of the following properties:","sidebar":"tutorialSidebar"},"system-design/latency-and-throughput":{"id":"system-design/latency-and-throughput","title":"Latency and Throughput","description":"Latency and throughput are key performance metrics often used to assess the performance of systems, networks, and applications. While they are related, they measure different aspects of performance. Understanding the distinction and the interplay between them is crucial in designing and optimizing systems.","sidebar":"tutorialSidebar"},"system-design/vertical-and-horizontal-scaling":{"id":"system-design/vertical-and-horizontal-scaling","title":"Horizontal Scaling and Vertical Scaling","description":"Scaling in computing refers to the ability to handle increasing workloads by expanding resources. There are two primary types of scaling: horizontal scaling and vertical scaling. Below is a detailed breakdown of both approaches, including their definitions, benefits, challenges, and use cases.","sidebar":"tutorialSidebar"}}}}')}}]);