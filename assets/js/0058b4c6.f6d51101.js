"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[849],{6164:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Introduction","href":"/docs/intro","docId":"intro","unlisted":false},{"type":"category","label":"Databases","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/docs/databases/introduction","docId":"databases/introduction","unlisted":false},{"type":"link","label":"SQL","href":"/docs/databases/sql/","docId":"databases/sql/sql","unlisted":false},{"type":"category","label":"Database Systems","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/docs/databases/database-systems/introduction","docId":"databases/database-systems/introduction","unlisted":false},{"type":"link","label":"Database Storage","href":"/docs/databases/database-systems/database-storage","docId":"databases/database-systems/database-storage","unlisted":false},{"type":"link","label":"Hash Tables","href":"/docs/databases/database-systems/hash-tables","docId":"databases/database-systems/hash-tables","unlisted":false},{"type":"link","label":"B-Trees","href":"/docs/databases/database-systems/b-tree","docId":"databases/database-systems/b-tree","unlisted":false}]}]},{"type":"category","label":"System Design","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/docs/system-design/introduction","docId":"system-design/introduction","unlisted":false},{"type":"category","label":"Networking","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Client-Server Architecture","href":"/docs/system-design/networking/client-server-architecture","docId":"system-design/networking/client-server-architecture","unlisted":false},{"type":"link","label":"OSI Model","href":"/docs/system-design/networking/osi-model","docId":"system-design/networking/osi-model","unlisted":false},{"type":"link","label":"Internet Protocol","href":"/docs/system-design/networking/internet-protocol","docId":"system-design/networking/internet-protocol","unlisted":false},{"type":"link","label":"User Datagram Protocol (UDP)","href":"/docs/system-design/networking/udp","docId":"system-design/networking/udp","unlisted":false},{"type":"link","label":"Transmission Control Protocol (TCP)","href":"/docs/system-design/networking/tcp","docId":"system-design/networking/tcp","unlisted":false}]},{"type":"category","label":"Fundamental Concepts","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"High and Low Level Design","href":"/docs/system-design/fundamental-concepts/high-and-low-level-design","docId":"system-design/fundamental-concepts/high-and-low-level-design","unlisted":false},{"type":"link","label":"Scalability","href":"/docs/system-design/fundamental-concepts/scalability","docId":"system-design/fundamental-concepts/scalability","unlisted":false},{"type":"link","label":"Availability","href":"/docs/system-design/fundamental-concepts/availability","docId":"system-design/fundamental-concepts/availability","unlisted":false},{"type":"link","label":"Reliability","href":"/docs/system-design/fundamental-concepts/reliability","docId":"system-design/fundamental-concepts/reliability","unlisted":false},{"type":"link","label":"Fault Tolerance","href":"/docs/system-design/fundamental-concepts/fault-tolarance","docId":"system-design/fundamental-concepts/fault-tolarance","unlisted":false},{"type":"link","label":"CAP Theorem","href":"/docs/system-design/fundamental-concepts/cap-theorem","docId":"system-design/fundamental-concepts/cap-theorem","unlisted":false},{"type":"link","label":"Latency and Throughput","href":"/docs/system-design/fundamental-concepts/latency-and-throughput","docId":"system-design/fundamental-concepts/latency-and-throughput","unlisted":false},{"type":"link","label":"Caching","href":"/docs/system-design/fundamental-concepts/caching","docId":"system-design/fundamental-concepts/caching","unlisted":false}]},{"type":"category","label":"Communication in Distributed Systems","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Message Queues and Message Streams","href":"/docs/system-design/distributed-system-communication/mq-vs-ms","docId":"system-design/distributed-system-communication/mq-vs-ms","unlisted":false},{"type":"link","label":"AWS SQS","href":"/docs/system-design/distributed-system-communication/sqs","docId":"system-design/distributed-system-communication/sqs","unlisted":false},{"type":"link","label":"RabbitMQ","href":"/docs/system-design/distributed-system-communication/rabbit-mq","docId":"system-design/distributed-system-communication/rabbit-mq","unlisted":false}]}]},{"type":"category","label":"Data Structure and Algorithms","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/docs/data-structure-and-algorithms/introduction","docId":"data-structure-and-algorithms/introduction","unlisted":false},{"type":"link","label":"Arrays and Hashing","href":"/docs/data-structure-and-algorithms/arrays-and-hasing","docId":"data-structure-and-algorithms/arrays-and-hasing","unlisted":false},{"type":"link","label":"Two Pointers","href":"/docs/data-structure-and-algorithms/two-pointers","docId":"data-structure-and-algorithms/two-pointers","unlisted":false}]},{"type":"category","label":"Programming Languages","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/docs/programming-languages/introduction","docId":"programming-languages/introduction","unlisted":false},{"type":"category","label":"Python","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/docs/programming-languages/python/introduction","docId":"programming-languages/python/introduction","unlisted":false},{"type":"link","label":"Python Basics","href":"/docs/programming-languages/python/python-basics","docId":"programming-languages/python/python-basics","unlisted":false},{"type":"link","label":"Variable Scoping","href":"/docs/programming-languages/python/scoping","docId":"programming-languages/python/scoping","unlisted":false},{"type":"link","label":"Common Data Structures in Python","href":"/docs/programming-languages/python/data-structure","docId":"programming-languages/python/data-structure","unlisted":false}]},{"type":"category","label":"JavaScript","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/docs/programming-languages/javascript/introduction","docId":"programming-languages/javascript/introduction","unlisted":false},{"type":"link","label":"Variables","href":"/docs/programming-languages/javascript/variables","docId":"programming-languages/javascript/variables","unlisted":false},{"type":"link","label":"Data Types","href":"/docs/programming-languages/javascript/data-types","docId":"programming-languages/javascript/data-types","unlisted":false},{"type":"link","label":"Mutation and Immutability","href":"/docs/programming-languages/javascript/mutation","docId":"programming-languages/javascript/mutation","unlisted":false}]}]}]},"docs":{"data-structure-and-algorithms/arrays-and-hasing":{"id":"data-structure-and-algorithms/arrays-and-hasing","title":"Arrays and Hashing","description":"Arrays","sidebar":"tutorialSidebar"},"data-structure-and-algorithms/introduction":{"id":"data-structure-and-algorithms/introduction","title":"Introduction","description":"","sidebar":"tutorialSidebar"},"data-structure-and-algorithms/two-pointers":{"id":"data-structure-and-algorithms/two-pointers","title":"Two Pointers","description":"Definition","sidebar":"tutorialSidebar"},"databases/database-systems/b-tree":{"id":"databases/database-systems/b-tree","title":"B-Trees","description":"B-Trees (Balanced Trees) are self-balancing tree data structures widely used in database systems for indexing and efficient data retrieval. They maintain sorted data and allow searches, sequential access, insertions, and deletions in logarithmic time. The B+ Tree, a variant of the B-Tree, is particularly optimized for disk-oriented DBMSs and is the most commonly used type in modern databases.","sidebar":"tutorialSidebar"},"databases/database-systems/database-storage":{"id":"databases/database-systems/database-storage","title":"Database Storage","description":"Database storage is the physical representation of data within a database system. It\'s typically organized into files and pages.","sidebar":"tutorialSidebar"},"databases/database-systems/hash-tables":{"id":"databases/database-systems/hash-tables","title":"Hash Tables","description":"A Hash Table is a data structure that provides an efficient way to store and retrieve data using key-value pairs. The underlying mechanism relies on a hash function that maps keys to specific indices in an array, ensuring fast access times.","sidebar":"tutorialSidebar"},"databases/database-systems/introduction":{"id":"databases/database-systems/introduction","title":"Introduction","description":"What is a database?","sidebar":"tutorialSidebar"},"databases/introduction":{"id":"databases/introduction","title":"Introduction","description":"","sidebar":"tutorialSidebar"},"databases/sql/sql":{"id":"databases/sql/sql","title":"SQL","description":"SQL is a computer language used to communicate and manage data within a relational database. It is used to perform tasks such as retrieving, inserting, updating, and deleting data.","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"Introduction","description":"This repository contains my personal collection of notes, primarily focused on Computer Science, Software Engineering, and Backend Development. As I explore various topics in these areas, I document my learnings and publish them on this website.","sidebar":"tutorialSidebar"},"programming-languages/introduction":{"id":"programming-languages/introduction","title":"Introduction","description":"","sidebar":"tutorialSidebar"},"programming-languages/javascript/data-types":{"id":"programming-languages/javascript/data-types","title":"Data Types","description":"JavaScript is a dynamically typed language, which means variables are not bound to specific data types. However, it still categorizes values into distinct data types, broadly divided into primitive and non-primitive types.","sidebar":"tutorialSidebar"},"programming-languages/javascript/introduction":{"id":"programming-languages/javascript/introduction","title":"Introduction","description":"- JavaScript is a high-level, interpreted programming language.","sidebar":"tutorialSidebar"},"programming-languages/javascript/mutation":{"id":"programming-languages/javascript/mutation","title":"Mutation and Immutability","description":"In JavaScript, mutation refers to modifying or changing a value directly in memory, while immutability involves creating new values without altering the original data. Understanding which data types are mutable or immutable is essential for managing data flow and avoiding unintended side effects.","sidebar":"tutorialSidebar"},"programming-languages/javascript/variables":{"id":"programming-languages/javascript/variables","title":"Variables","description":"Variables in JavaScript are used to store data values, which can be of various types like numbers, strings, objects, and arrays.","sidebar":"tutorialSidebar"},"programming-languages/python/data-structure":{"id":"programming-languages/python/data-structure","title":"Common Data Structures in Python","description":"An overview of common data structures in Python, including properties, pros, cons, and mutability.","sidebar":"tutorialSidebar"},"programming-languages/python/introduction":{"id":"programming-languages/python/introduction","title":"Introduction","description":"Python is a versatile, high-level, and general-purpose programming language known for its readability, simplicity, and extensive ecosystem. Created by Guido van Rossum and first released in 1991, Python has grown to be one of the most popular programming languages in the world. Its design philosophy emphasizes code readability and uses significant indentation to define blocks of code.","sidebar":"tutorialSidebar"},"programming-languages/python/python-basics":{"id":"programming-languages/python/python-basics","title":"Python Basics","description":"Variables and Data Types","sidebar":"tutorialSidebar"},"programming-languages/python/scoping":{"id":"programming-languages/python/scoping","title":"Variable Scoping","description":"Variable scoping in Python determines the accessibility of variables within different parts of the code. It defines where a variable can be read or modified. Python follows specific scoping rules, which are influenced by the LEGB rule (Local, Enclosing, Global, Built-in). Understanding scoping is crucial to avoid conflicts and unexpected behavior in your programs.","sidebar":"tutorialSidebar"},"system-design/distributed-system-communication/mq-vs-ms":{"id":"system-design/distributed-system-communication/mq-vs-ms","title":"Message Queues and Message Streams","description":"Message queues and message streams are both mechanisms for enabling communication between distributed systems, but they serve different purposes and use distinct paradigms. Understanding their differences, features, and use cases is critical for designing scalable and reliable systems.","sidebar":"tutorialSidebar"},"system-design/distributed-system-communication/rabbit-mq":{"id":"system-design/distributed-system-communication/rabbit-mq","title":"RabbitMQ","description":"RabbitMQ is an open-source message broker that facilitates the exchange of messages between producers and consumers. It supports various messaging protocols and patterns, making it a versatile choice for building distributed systems.","sidebar":"tutorialSidebar"},"system-design/distributed-system-communication/sqs":{"id":"system-design/distributed-system-communication/sqs","title":"AWS SQS","description":"Amazon SQS (Simple Queue Service) is a fully managed message queuing service that enables decoupling and scalability in distributed systems. It is highly reliable, secure, and scalable, making it a popular choice for applications requiring asynchronous communication.","sidebar":"tutorialSidebar"},"system-design/fundamental-concepts/availability":{"id":"system-design/fundamental-concepts/availability","title":"Availability","description":"Availability refers to the degree to which a system is operational and accessible when needed. It is typically expressed as a percentage (e.g., 99.9% uptime).","sidebar":"tutorialSidebar"},"system-design/fundamental-concepts/caching":{"id":"system-design/fundamental-concepts/caching","title":"Caching","description":"Caching is a technique used to store copies of data temporarily in high-speed storage (cache) so that future requests for that data can be served faster. Caching improves application performance and reduces latency by reducing the need to repeatedly fetch or compute the same data.","sidebar":"tutorialSidebar"},"system-design/fundamental-concepts/cap-theorem":{"id":"system-design/fundamental-concepts/cap-theorem","title":"CAP Theorem","description":"The CAP Theorem, also known as Brewer\'s Theorem, is a fundamental principle in distributed systems. It was introduced by Eric Brewer in 2000 and formally proven by Seth Gilbert and Nancy Lynch in 2002. The theorem states that in a distributed system, it is impossible to simultaneously guarantee all three of the following properties:","sidebar":"tutorialSidebar"},"system-design/fundamental-concepts/fault-tolarance":{"id":"system-design/fundamental-concepts/fault-tolarance","title":"Fault Tolerance","description":"Fault tolerance is the ability of a system to continue operating properly in the event of a failure of one or more of its components.","sidebar":"tutorialSidebar"},"system-design/fundamental-concepts/high-and-low-level-design":{"id":"system-design/fundamental-concepts/high-and-low-level-design","title":"High and Low Level Design","description":"Low-Level Design (LLD) and High-Level Design (HLD) are essential components of software development, specifically in the architecture and design phases of a project. Both serve distinct purposes and focus on different levels of abstraction in system design. Below is a detailed breakdown of both concepts.","sidebar":"tutorialSidebar"},"system-design/fundamental-concepts/latency-and-throughput":{"id":"system-design/fundamental-concepts/latency-and-throughput","title":"Latency and Throughput","description":"Latency and throughput are key performance metrics often used to assess the performance of systems, networks, and applications. While they are related, they measure different aspects of performance. Understanding the distinction and the interplay between them is crucial in designing and optimizing systems.","sidebar":"tutorialSidebar"},"system-design/fundamental-concepts/reliability":{"id":"system-design/fundamental-concepts/reliability","title":"Reliability","description":"Reliability refers to a system\u2019s ability to perform its intended function consistently and correctly over time, even under adverse conditions.","sidebar":"tutorialSidebar"},"system-design/fundamental-concepts/scalability":{"id":"system-design/fundamental-concepts/scalability","title":"Scalability","description":"Scaling in computing refers to the ability to handle increasing workloads by expanding resources. There are two primary types of scaling: horizontal scaling and vertical scaling. Below is a detailed breakdown of both approaches, including their definitions, benefits, challenges, and use cases.","sidebar":"tutorialSidebar"},"system-design/introduction":{"id":"system-design/introduction","title":"Introduction","description":"","sidebar":"tutorialSidebar"},"system-design/networking/client-server-architecture":{"id":"system-design/networking/client-server-architecture","title":"Client-Server Architecture","description":"Client-Server Architecture is a foundational model in network computing that structures applications into two main components: clients and servers. This architecture facilitates resource sharing, scalability, and efficient management of networked systems. Below are detailed notes covering various aspects of Client-Server Architecture.","sidebar":"tutorialSidebar"},"system-design/networking/internet-protocol":{"id":"system-design/networking/internet-protocol","title":"Internet Protocol","description":"The Internet Protocol (IP) is a core protocol in the Internet protocol suite responsible for delivering data packets from a source to a destination across network boundaries. It operates at the Network Layer (Layer 3) of the OSI model and is designed to address, route, and transfer data efficiently in a packet-switched network.","sidebar":"tutorialSidebar"},"system-design/networking/osi-model":{"id":"system-design/networking/osi-model","title":"OSI Model","description":"The OSI (Open Systems Interconnection) model is a conceptual framework used to understand and implement standard protocols in network communications. It divides the communication process into seven distinct layers, each with specific functions and responsibilities.","sidebar":"tutorialSidebar"},"system-design/networking/tcp":{"id":"system-design/networking/tcp","title":"Transmission Control Protocol (TCP)","description":"Overview","sidebar":"tutorialSidebar"},"system-design/networking/udp":{"id":"system-design/networking/udp","title":"User Datagram Protocol (UDP)","description":"User Datagram Protocol (UDP) is a transport layer protocol defined by the Internet Protocol Suite. It is designed for simplicity and speed, providing a connectionless communication mechanism between applications.","sidebar":"tutorialSidebar"}}}}')}}]);