"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[245],{3277:(n,r,e)=>{e.r(r),e.d(r,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"data-structure-and-algorithms/sorting","title":"Sorting Algorithms","description":"Sorting is the process of arranging data in a specific order, often ascending or descending. Sorting is fundamental in computer science as it makes data more manageable, improves the performance of search operations, and forms the foundation of various algorithms.","source":"@site/docs/data-structure-and-algorithms/sorting.md","sourceDirName":"data-structure-and-algorithms","slug":"/data-structure-and-algorithms/sorting","permalink":"/docs/data-structure-and-algorithms/sorting","draft":false,"unlisted":false,"editUrl":"https://github.com/imdeepmind/imdeepmind.github.io/blob/main/docs/data-structure-and-algorithms/sorting.md","tags":[],"version":"current","lastUpdatedBy":"Abhishek Chatterjee","lastUpdatedAt":1736053602000,"sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Arrays and Hashing","permalink":"/docs/data-structure-and-algorithms/arrays-and-hasing"},"next":{"title":"Two Pointers","permalink":"/docs/data-structure-and-algorithms/two-pointers"}}');var s=e(4848),t=e(8453);const o={sidebar_position:3},l="Sorting Algorithms",a={},d=[{value:"Classification of Sorting Algorithms",id:"classification-of-sorting-algorithms",level:2},{value:"By Comparison",id:"by-comparison",level:2},{value:"By Stability",id:"by-stability",level:3},{value:"By Time Complexity",id:"by-time-complexity",level:3},{value:"By Recursion",id:"by-recursion",level:3},{value:"Common Sorting Algorithms",id:"common-sorting-algorithms",level:2},{value:"Bubble Sort",id:"bubble-sort",level:3},{value:"Selection Sort",id:"selection-sort",level:3},{value:"Insertion Sort",id:"insertion-sort",level:3},{value:"Merge Sort",id:"merge-sort",level:3},{value:"Quick Sort",id:"quick-sort",level:3},{value:"Heap Sort",id:"heap-sort",level:3},{value:"Counting Sort (Non-Comparison)",id:"counting-sort-non-comparison",level:3},{value:"Comparison of Sorting Algorithms",id:"comparison-of-sorting-algorithms",level:2}];function c(n){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"sorting-algorithms",children:"Sorting Algorithms"})}),"\n",(0,s.jsx)(r.p,{children:"Sorting is the process of arranging data in a specific order, often ascending or descending. Sorting is fundamental in computer science as it makes data more manageable, improves the performance of search operations, and forms the foundation of various algorithms."}),"\n",(0,s.jsx)(r.h2,{id:"classification-of-sorting-algorithms",children:"Classification of Sorting Algorithms"}),"\n",(0,s.jsx)(r.p,{children:"Sorting algorithms can be classified based on various factors:"}),"\n",(0,s.jsx)(r.h2,{id:"by-comparison",children:"By Comparison"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Comparison-Based Sorting"}),": Elements are compared with each other to decide their order (e.g., Bubble Sort, Merge Sort)."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Non-Comparison Sorting"}),": Sorting is done without direct comparison of elements (e.g., Counting Sort, Radix Sort)."]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"by-stability",children:"By Stability"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Stable Sort"}),": Maintains the relative order of records with equal keys (e.g., Merge Sort)."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Unstable Sort"}),": Does not guarantee relative order (e.g., Quick Sort)."]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"by-time-complexity",children:"By Time Complexity"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"O(n\xb2) Algorithms"}),": Bubble Sort, Insertion Sort, Selection Sort."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"O(n log n) Algorithms"}),": Merge Sort, Quick Sort, Heap Sort."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Linear Time"}),": Counting Sort, Radix Sort, Bucket Sort (for specific scenarios)."]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"by-recursion",children:"By Recursion"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Recursive Algorithms"}),": Merge Sort, Quick Sort."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Iterative Algorithms"}),": Bubble Sort, Selection Sort."]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"common-sorting-algorithms",children:"Common Sorting Algorithms"}),"\n",(0,s.jsx)(r.h3,{id:"bubble-sort",children:"Bubble Sort"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Description"}),": Repeatedly swaps adjacent elements if they are in the wrong order."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Time Complexity"}),":","\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Best Case: (O(n)) (when the list is already sorted)."}),"\n",(0,s.jsx)(r.li,{children:"Worst Case: (O(n^2))."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Space Complexity"}),": (O(1))."]}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:"def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n    return arr\n\n# Example\nprint(bubble_sort([64, 34, 25, 12, 22, 11, 90]))\n"})}),"\n",(0,s.jsx)(r.h3,{id:"selection-sort",children:"Selection Sort"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Description"}),": Finds the minimum element and places it at the correct position in each iteration."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Time Complexity"}),": (O(n^2)) for all cases."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Space Complexity"}),": (O(1))."]}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:"def selection_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        min_index = i\n        for j in range(i + 1, n):\n            if arr[j] < arr[min_index]:\n                min_index = j\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n    return arr\n\n# Example\nprint(selection_sort([64, 34, 25, 12, 22, 11, 90]))\n"})}),"\n",(0,s.jsx)(r.h3,{id:"insertion-sort",children:"Insertion Sort"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Description"}),": Builds the sorted array one element at a time by inserting elements into their correct position."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Time Complexity"}),":","\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Best Case: (O(n)) (already sorted)."}),"\n",(0,s.jsx)(r.li,{children:"Worst Case: (O(n^2))."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Space Complexity"}),": (O(1))."]}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:"def insertion_sort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i - 1\n        while j >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = key\n    return arr\n\n# Example\nprint(insertion_sort([64, 34, 25, 12, 22, 11, 90]))\n"})}),"\n",(0,s.jsx)(r.h3,{id:"merge-sort",children:"Merge Sort"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Description"}),": Divides the array into halves, sorts each half, and merges them."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Time Complexity"}),": (O(n \\log n)) for all cases."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Space Complexity"}),": (O(n))."]}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:"def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        L = arr[:mid]\n        R = arr[mid:]\n\n        merge_sort(L)\n        merge_sort(R)\n\n        i = j = k = 0\n\n        while i < len(L) and j < len(R):\n            if L[i] < R[j]:\n                arr[k] = L[i]\n                i += 1\n            else:\n                arr[k] = R[j]\n                j += 1\n            k += 1\n\n        while i < len(L):\n            arr[k] = L[i]\n            i += 1\n            k += 1\n\n        while j < len(R):\n            arr[k] = R[j]\n            j += 1\n            k += 1\n    return arr\n\n# Example\nprint(merge_sort([64, 34, 25, 12, 22, 11, 90]))\n"})}),"\n",(0,s.jsx)(r.h3,{id:"quick-sort",children:"Quick Sort"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Description"}),": Picks a pivot and partitions the array around it, recursively sorting subarrays."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Time Complexity"}),":","\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Best and Average Case: (O(n \\log n))."}),"\n",(0,s.jsx)(r.li,{children:"Worst Case: (O(n^2)) (occurs when pivot selection is poor, e.g., sorted array with last element as pivot)."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Space Complexity"}),": (O(\\log n)) (due to recursion)."]}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:"def quick_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n\n# Example\nprint(quick_sort([64, 34, 25, 12, 22, 11, 90]))\n"})}),"\n",(0,s.jsx)(r.h3,{id:"heap-sort",children:"Heap Sort"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Description"}),": Builds a max-heap and repeatedly extracts the maximum element."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Time Complexity"}),": (O(n \\log n)) for all cases."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Space Complexity"}),": (O(1))."]}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:"def heapify(arr, n, i):\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n\n    if l < n and arr[i] < arr[l]:\n        largest = l\n\n    if r < n and arr[largest] < arr[r]:\n        largest = r\n\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\ndef heap_sort(arr):\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n    return arr\n\n# Example\nprint(heap_sort([64, 34, 25, 12, 22, 11, 90]))\n"})}),"\n",(0,s.jsx)(r.h3,{id:"counting-sort-non-comparison",children:"Counting Sort (Non-Comparison)"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Description"}),": Counts the occurrence of elements and sorts based on their frequency."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Time Complexity"}),": (O(n + k)), where (k) is the range of input values."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Space Complexity"}),": (O(k))."]}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:"def counting_sort(arr):\n    max_val = max(arr)\n    count = [0] * (max_val + 1)\n    for num in arr:\n        count[num] += 1\n    sorted_arr = []\n    for i in range(len(count)):\n        sorted_arr.extend([i] * count[i])\n    return sorted_arr\n\n# Example\nprint(counting_sort([4, 2, 2, 8, 3, 3, 1]))\n"})}),"\n",(0,s.jsx)(r.h2,{id:"comparison-of-sorting-algorithms",children:"Comparison of Sorting Algorithms"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Algorithm"}),(0,s.jsx)(r.th,{children:"Time Complexity (Best)"}),(0,s.jsx)(r.th,{children:"Time Complexity (Worst)"}),(0,s.jsx)(r.th,{children:"Time Complexity (Average)"}),(0,s.jsx)(r.th,{children:"Space Complexity"}),(0,s.jsx)(r.th,{children:"Stable"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Bubble Sort"}),(0,s.jsx)(r.td,{children:"(O(n))"}),(0,s.jsx)(r.td,{children:"(O(n^2))"}),(0,s.jsx)(r.td,{children:"(O(n^2))"}),(0,s.jsx)(r.td,{children:"(O(1))"}),(0,s.jsx)(r.td,{children:"Yes"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Selection Sort"}),(0,s.jsx)(r.td,{children:"(O(n^2))"}),(0,s.jsx)(r.td,{children:"(O(n^2))"}),(0,s.jsx)(r.td,{children:"(O(n^2))"}),(0,s.jsx)(r.td,{children:"(O(1))"}),(0,s.jsx)(r.td,{children:"No"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Insertion Sort"}),(0,s.jsx)(r.td,{children:"(O(n))"}),(0,s.jsx)(r.td,{children:"(O(n^2))"}),(0,s.jsx)(r.td,{children:"(O(n^2))"}),(0,s.jsx)(r.td,{children:"(O(1))"}),(0,s.jsx)(r.td,{children:"Yes"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Merge Sort"}),(0,s.jsx)(r.td,{children:"(O(n \\log n))"}),(0,s.jsx)(r.td,{children:"(O(n \\log n))"}),(0,s.jsx)(r.td,{children:"(O(n \\log n))"}),(0,s.jsx)(r.td,{children:"(O(n))"}),(0,s.jsx)(r.td,{children:"Yes"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Quick Sort"}),(0,s.jsx)(r.td,{children:"(O(n \\log n))"}),(0,s.jsx)(r.td,{children:"(O(n^2))"}),(0,s.jsx)(r.td,{children:"(O(n \\log n))"}),(0,s.jsx)(r.td,{children:"(O(\\log n))"}),(0,s.jsx)(r.td,{children:"No"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Heap Sort"}),(0,s.jsx)(r.td,{children:"(O(n \\log n))"}),(0,s.jsx)(r.td,{children:"(O(n \\log n))"}),(0,s.jsx)(r.td,{children:"(O(n \\log n))"}),(0,s.jsx)(r.td,{children:"(O(1))"}),(0,s.jsx)(r.td,{children:"No"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Counting Sort"}),(0,s.jsx)(r.td,{children:"(O(n + k))"}),(0,s.jsx)(r.td,{children:"(O(n + k))"}),(0,s.jsx)(r.td,{children:"(O(n + k))"}),(0,s.jsx)(r.td,{children:"(O(k))"}),(0,s.jsx)(r.td,{children:"Yes"})]})]})]})]})}function h(n={}){const{wrapper:r}={...(0,t.R)(),...n.components};return r?(0,s.jsx)(r,{...n,children:(0,s.jsx)(c,{...n})}):c(n)}},8453:(n,r,e)=>{e.d(r,{R:()=>o,x:()=>l});var i=e(6540);const s={},t=i.createContext(s);function o(n){const r=i.useContext(t);return i.useMemo((function(){return"function"==typeof n?n(r):{...r,...n}}),[r,n])}function l(n){let r;return r=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:o(n.components),i.createElement(t.Provider,{value:r},n.children)}}}]);