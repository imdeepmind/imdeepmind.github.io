"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[3551],{99387:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"ml/lang-chain/agents","title":"Agents","description":"A LangChain Agent is an orchestrator that decides how to use an LLM and external tools to achieve a goal. Instead of just generating text, an agent can take actions, like calling APIs, performing calculations, or interacting with databases, based on a user query.","source":"@site/docs/ml/lang-chain/agents.md","sourceDirName":"ml/lang-chain","slug":"/ml/lang-chain/agents","permalink":"/docs/ml/lang-chain/agents","draft":false,"unlisted":false,"editUrl":"https://github.com/imdeepmind/imdeepmind.github.io/blob/main/docs/ml/lang-chain/agents.md","tags":[],"version":"current","lastUpdatedBy":"Abhishek Chatterjee","lastUpdatedAt":1758462496000,"sidebarPosition":8,"frontMatter":{"sidebar_position":8},"sidebar":"tutorialSidebar","previous":{"title":"Tools","permalink":"/docs/ml/lang-chain/tools"},"next":{"title":"Regular Expressions (RegEx)","permalink":"/docs/other/regex"}}');var i=t(74848),r=t(28453);const a={sidebar_position:8},l="Agents",o={},c=[{value:"Core Concepts",id:"core-concepts",level:2},{value:"ReAct Framework",id:"react-framework",level:2},{value:"Setting up a ReAct Agent in LangChain",id:"setting-up-a-react-agent-in-langchain",level:2},{value:"Advantages of ReAct Agents",id:"advantages-of-react-agents",level:2},{value:"Practical Example: Multi-step Reasoning",id:"practical-example-multi-step-reasoning",level:2},{value:"Best Practices",id:"best-practices",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"agents",children:"Agents"})}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.strong,{children:"LangChain Agent"})," is an orchestrator that ",(0,i.jsx)(n.strong,{children:"decides how to use an LLM and external tools"})," to achieve a goal. Instead of just generating text, an agent can ",(0,i.jsx)(n.strong,{children:"take actions"}),", like calling APIs, performing calculations, or interacting with databases, based on a user query."]}),"\n",(0,i.jsx)(n.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Agent vs LLM"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"An LLM generates text based on input."}),"\n",(0,i.jsxs)(n.li,{children:["An Agent uses an LLM ",(0,i.jsx)(n.strong,{children:"to plan actions and call tools"})," iteratively until a solution is reached."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Tool Integration"}),"\nAgents work closely with tools. The LLM acts as a decision-maker:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Receives user input."}),"\n",(0,i.jsx)(n.li,{children:"Determines the best tool(s) to call."}),"\n",(0,i.jsx)(n.li,{children:"Executes the tool and observes the result."}),"\n",(0,i.jsx)(n.li,{children:"Repeats if needed, producing the final answer."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Agent Workflow"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)("div",{style:{textAlign:"center"},children:(0,i.jsx)(n.mermaid,{value:'flowchart TD\n    UserInput["User Query"] --\x3e LLM["LLM"]\n    LLM --\x3e Decision{"Which Tool?"}\n    Decision --\x3e Tool1["Tool A"]\n    Decision --\x3e Tool2["Tool B"]\n    Tool1 --\x3e Observation1["Observation/Result"]\n    Tool2 --\x3e Observation2["Observation/Result"]\n    Observation1 --\x3e LLM\n    Observation2 --\x3e LLM\n    LLM --\x3e Output["Final Output to User"]'})}),"\n",(0,i.jsxs)(n.p,{children:["This flow shows that the agent interacts in ",(0,i.jsx)(n.strong,{children:"loops"}),", letting the LLM guide tool usage until the query is fully answered."]}),"\n",(0,i.jsx)(n.h2,{id:"react-framework",children:"ReAct Framework"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"ReAct (Reasoning + Acting)"})," is a specific type of agent reasoning paradigm introduced in LangChain for multi-step decision making."]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Key Idea"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["LLM interleaves ",(0,i.jsx)(n.strong,{children:"reasoning"})," and ",(0,i.jsx)(n.strong,{children:"acting"})," in steps:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Reasoning"}),": The LLM thinks about what action to take next."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Acting"}),": The LLM executes a tool or takes an action."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Why ReAct"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Enables agents to handle ",(0,i.jsx)(n.strong,{children:"complex tasks"})," that require multiple steps."]}),"\n",(0,i.jsxs)(n.li,{children:["Improves accuracy by ",(0,i.jsx)(n.strong,{children:"observing intermediate results"})," and adjusting the next step."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"ReAct Loop Example"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)("div",{style:{textAlign:"center"},children:(0,i.jsx)(n.mermaid,{value:'flowchart TD\n    UserQuery["User Query"] --\x3e LLM["LLM Reasoning Step"]\n    LLM --\x3e Action["Select Tool & Execute Action"]\n    Action --\x3e Observation["Tool Result / Observation"]\n    Observation --\x3e LLM\n    LLM --\x3e|Repeat| Action\n    Observation --\x3e FinalOutput["Final Answer"]'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Here, the LLM ",(0,i.jsx)(n.strong,{children:"thinks, acts, observes, and repeats"})," until a complete answer is reached."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"setting-up-a-react-agent-in-langchain",children:"Setting up a ReAct Agent in LangChain"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Define Tools"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from langchain.tools import Tool\n\ndef calculator_fn(query: str) -> str:\n    return str(eval(query))\n\ncalculator_tool = Tool(\n    name="Calculator",\n    func=calculator_fn,\n    description="Use this tool to perform math operations."\n)\n\ndef get_weather(city: str) -> str:\n    return f"The weather in {city} is sunny"\n\nweather_tool = Tool(\n    name="Weather",\n    func=get_weather,\n    description="Use this tool to get the current weather of a city."\n)\n\ntools = [calculator_tool, weather_tool]\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Initialize ReAct Agent"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from langchain.chat_models import ChatOpenAI\nfrom langchain.agents import initialize_agent, AgentType\n\nllm = ChatOpenAI(model="gpt-4", temperature=0)\n\nreact_agent = initialize_agent(\n    tools=tools,\n    llm=llm,\n    agent=AgentType.REACT_DESCRIPTION,\n    verbose=True\n)\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Run Queries"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'query1 = "Add 23 and 19"\nquery2 = "What\'s the weather in Paris?"\n\nprint(react_agent.run(query1))  # Output: 42\nprint(react_agent.run(query2))  # Output: The weather in Paris is sunny\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"advantages-of-react-agents",children:"Advantages of ReAct Agents"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Stepwise Reasoning"}),": Handles multi-step problems with intermediate observations."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Tool Flexibility"}),": Can use multiple tools in sequence."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Dynamic"}),": Adjusts actions based on observations."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Explainability"}),": ReAct agents can log their reasoning and actions, making the process interpretable."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"practical-example-multi-step-reasoning",children:"Practical Example: Multi-step Reasoning"}),"\n",(0,i.jsxs)(n.p,{children:["Suppose we want an agent to ",(0,i.jsx)(n.strong,{children:"calculate the area of a rectangle and check if it\u2019s greater than 50"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def area_rectangle(length: int, width: int) -> str:\n    return str(length * width)\n\narea_tool = Tool(\n    name="RectangleArea",\n    func=area_rectangle,\n    description="Calculate area of rectangle given length and width."\n)\n\ntools.append(area_tool)\n\nreact_agent = initialize_agent(\n    tools=tools,\n    llm=llm,\n    agent=AgentType.REACT_DESCRIPTION,\n    verbose=True\n)\n\nquery = "Calculate area of rectangle with length 8 and width 7, is it greater than 50?"\nprint(react_agent.run(query))\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"The agent:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Calls ",(0,i.jsx)(n.code,{children:"RectangleArea"}),"."]}),"\n",(0,i.jsx)(n.li,{children:"Observes result (56)."}),"\n",(0,i.jsx)(n.li,{children:"Compares to 50."}),"\n",(0,i.jsx)(n.li,{children:"Returns final answer."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Tool Descriptions Matter"}),": Provide clear instructions to guide the LLM."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Limit Tools per Agent"}),": Too many tools can confuse the agent."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Verbose Mode"}),": Useful for debugging reasoning and action steps."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Chaining ReAct"}),": ReAct agents can be combined with multi-tool setups for complex workflows."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var s=t(96540);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);