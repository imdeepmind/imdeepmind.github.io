"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[3551],{99387:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"ml/lang-chain/agents","title":"LangChain Agents","description":"Agents in LangChain are entities that use large language models not just to generate text, but to decide actions. Instead of producing only direct responses, an agent can choose which tools to call, when to call them, and how to use the results in order to solve a task.","source":"@site/docs/ml/lang-chain/agents.md","sourceDirName":"ml/lang-chain","slug":"/ml/lang-chain/agents","permalink":"/docs/ml/lang-chain/agents","draft":false,"unlisted":false,"editUrl":"https://github.com/imdeepmind/imdeepmind.github.io/blob/main/docs/ml/lang-chain/agents.md","tags":[],"version":"current","lastUpdatedBy":"Abhishek Chatterjee","lastUpdatedAt":1757838476000,"sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"LangChain Fundamentals","permalink":"/docs/ml/lang-chain/fundamentals"},"next":{"title":"Regular Expressions (RegEx)","permalink":"/docs/other/regex"}}');var s=t(74848),o=t(28453);const i={sidebar_position:3},l="LangChain Agents",r={},c=[{value:"ReAct Agents",id:"react-agents",level:2},{value:"LangChain Tools",id:"langchain-tools",level:2},{value:"Example code: ReAct Agent with tools",id:"example-code-react-agent-with-tools",level:2},{value:"Explanation of the code",id:"explanation-of-the-code",level:3}];function h(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"langchain-agents",children:"LangChain Agents"})}),"\n",(0,s.jsxs)(n.p,{children:["Agents in LangChain are entities that use large language models not just to generate text, but to ",(0,s.jsx)(n.strong,{children:"decide actions"}),". Instead of producing only direct responses, an agent can choose which tools to call, when to call them, and how to use the results in order to solve a task."]}),"\n",(0,s.jsx)(n.p,{children:"The workflow of an agent:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Take user input"}),"\n",(0,s.jsx)(n.li,{children:"Use the LLM to decide what action to take (e.g., call a tool, query a database, or just respond)"}),"\n",(0,s.jsx)(n.li,{children:"Execute the chosen action"}),"\n",(0,s.jsx)(n.li,{children:"Feed the result back into the agent"}),"\n",(0,s.jsx)(n.li,{children:"Repeat the cycle until a final answer is produced"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Agents are useful when the problem requires multiple steps, reasoning, or external data sources."}),"\n",(0,s.jsx)("div",{style:{textAlign:"center"},children:(0,s.jsx)(n.mermaid,{value:"flowchart TD\n    A[User Input] --\x3e B[Agent]\n    B --\x3e C[Decide Action with LLM]\n    C --\x3e D[Tool Call]\n    D --\x3e E[Result from Tool]\n    E --\x3e F[Back to Agent]\n    F --\x3e G[Final Response]"})}),"\n",(0,s.jsx)(n.h2,{id:"react-agents",children:"ReAct Agents"}),"\n",(0,s.jsxs)(n.p,{children:["ReAct (Reason + Act) is a framework for building agents that combines reasoning and acting. Instead of producing only a final output, the LLM generates both ",(0,s.jsx)(n.strong,{children:"thoughts"})," (reasoning steps) and ",(0,s.jsx)(n.strong,{children:"actions"})," (tool invocations)."]}),"\n",(0,s.jsx)(n.p,{children:"For example:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:'Thought: "I need to find today\u2019s weather."'}),"\n",(0,s.jsx)(n.li,{children:'Action: "Call Weather API with city=London."'}),"\n",(0,s.jsx)(n.li,{children:'Observation: "It is 22\xb0C and sunny."'}),"\n",(0,s.jsx)(n.li,{children:'Thought: "Now I can answer the user."'}),"\n",(0,s.jsx)(n.li,{children:'Final Answer: "The weather in London today is 22\xb0C and sunny."'}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"ReAct agents are particularly effective because they let the LLM explain its reasoning process, making the workflow more transparent and reliable."}),"\n",(0,s.jsx)("div",{style:{textAlign:"center"},children:(0,s.jsx)(n.mermaid,{value:"sequenceDiagram\n    participant User\n    participant Agent\n    participant Tool\n    User->>Agent: Ask a question\n    Agent->>Agent: Reason (Thought)\n    Agent->>Tool: Take Action\n    Tool--\x3e>Agent: Observation\n    Agent->>Agent: More Reasoning\n    Agent->>User: Final Answer"})}),"\n",(0,s.jsx)(n.h2,{id:"langchain-tools",children:"LangChain Tools"}),"\n",(0,s.jsx)(n.p,{children:"Tools are external functions or services that agents can use to complete tasks. They extend the capabilities of the agent beyond the LLM\u2019s knowledge."}),"\n",(0,s.jsx)(n.p,{children:"Examples of tools include:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Web search APIs"}),"\n",(0,s.jsx)(n.li,{children:"Database queries (SQL, vector search)"}),"\n",(0,s.jsx)(n.li,{children:"File systems"}),"\n",(0,s.jsx)(n.li,{children:"Calculators"}),"\n",(0,s.jsx)(n.li,{children:"Custom APIs"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Each tool has:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["A ",(0,s.jsx)(n.strong,{children:"name"})," (used by the agent to identify it)"]}),"\n",(0,s.jsxs)(n.li,{children:["A ",(0,s.jsx)(n.strong,{children:"description"})," (explains what it does)"]}),"\n",(0,s.jsxs)(n.li,{children:["A ",(0,s.jsx)(n.strong,{children:"function"})," (the actual implementation that runs when the tool is called)"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Agents rely on tools to access fresh data, perform computations, or interact with external systems."}),"\n",(0,s.jsx)(n.h2,{id:"example-code-react-agent-with-tools",children:"Example code: ReAct Agent with tools"}),"\n",(0,s.jsxs)(n.p,{children:["Below is an example of building an agent using the ReAct framework with LangChain. The agent can use a ",(0,s.jsx)(n.strong,{children:"math tool"})," to answer numerical queries."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from langchain_openai import ChatOpenAI\nfrom langchain.agents import initialize_agent, Tool\nfrom langchain.agents import AgentType\nimport math\n\n# Define a custom tool\ndef calculate_square_root(x: str) -> str:\n    try:\n        number = float(x)\n        return f"The square root of {number} is {math.sqrt(number)}"\n    except ValueError:\n        return "Please provide a valid number."\n\nmath_tool = Tool(\n    name="Square Root Calculator",\n    func=calculate_square_root,\n    description="Useful for calculating square roots of numbers."\n)\n\n# Load a chat model\nllm = ChatOpenAI(model="gpt-3.5-turbo", temperature=0)\n\n# Initialize ReAct agent with the tool\nagent = initialize_agent(\n    tools=[math_tool],\n    llm=llm,\n    agent=AgentType.CHAT_ZERO_SHOT_REACT_DESCRIPTION,\n    verbose=True\n)\n\n# Run an example query\nresponse = agent.run("What is the square root of 144?")\nprint(response)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"explanation-of-the-code",children:"Explanation of the code"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Custom Tool"}),": A function ",(0,s.jsx)(n.code,{children:"calculate_square_root"})," is defined and wrapped as a LangChain ",(0,s.jsx)(n.code,{children:"Tool"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Model"}),": ",(0,s.jsx)(n.code,{children:"ChatOpenAI"})," is loaded to serve as the reasoning engine."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Agent Initialization"}),": ",(0,s.jsx)(n.code,{children:"initialize_agent"})," creates a ReAct-style agent that knows how to use the tool."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Query Execution"}),": The user asks for the square root of 144. The agent reasons that it needs the tool, calls it, gets the result, and then produces the final answer."]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var a=t(96540);const s={},o=a.createContext(s);function i(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);