"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[5517],{88848:(n,e,o)=>{o.r(e),o.d(e,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"databases/database-engineering/pooling","title":"Connection Pooling","description":"Connection pooling is a technique used to improve the performance and scalability of applications interacting with databases. It maintains a pool of database connections that can be reused rather than creating and destroying connections for every request.","source":"@site/docs/databases/database-engineering/pooling.md","sourceDirName":"databases/database-engineering","slug":"/databases/database-engineering/pooling","permalink":"/docs/databases/database-engineering/pooling","draft":false,"unlisted":false,"editUrl":"https://github.com/imdeepmind/imdeepmind.github.io/blob/main/docs/databases/database-engineering/pooling.md","tags":[],"version":"current","lastUpdatedBy":"Abhishek Chatterjee","lastUpdatedAt":1735227237000,"sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Introduction","permalink":"/docs/databases/database-engineering/introduction"},"next":{"title":"Transactions","permalink":"/docs/databases/database-engineering/transactions"}}');var t=o(74848),s=o(28453);const a={sidebar_position:2},r="Connection Pooling",c={},l=[{value:"How Connection Pooling Works",id:"how-connection-pooling-works",level:2},{value:"Benefits of Connection Pooling",id:"benefits-of-connection-pooling",level:2},{value:"Normal Database Connections vs. Connection Pooling",id:"normal-database-connections-vs-connection-pooling",level:2},{value:"Example Using PostgreSQL and PGBouncer",id:"example-using-postgresql-and-pgbouncer",level:2},{value:"Configure PGBouncer",id:"configure-pgbouncer",level:3},{value:"Application Connection",id:"application-connection",level:3}];function d(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"connection-pooling",children:"Connection Pooling"})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Connection pooling"})," is a technique used to improve the performance and scalability of applications interacting with databases. It maintains a pool of database connections that can be reused rather than creating and destroying connections for every request."]}),"\n",(0,t.jsx)(e.h2,{id:"how-connection-pooling-works",children:"How Connection Pooling Works"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Create the Pool:"})," When the application starts, a fixed number of database connections are created and added to the pool."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Borrow a Connection:"})," When the application needs a database connection, it borrows an available connection from the pool."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Return the Connection:"})," After the operation is complete, the connection is returned to the pool for reuse."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Connection Reuse:"})," Connections are reused until they become stale or are removed from the pool. Typically when a connected become staled or removed from the pool, a new connection then added to the pool ",(0,t.jsx)(e.strong,{children:"on demand"}),"."]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"benefits-of-connection-pooling",children:"Benefits of Connection Pooling"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Reduced Overhead:"})," Opening and closing database connections is expensive; connection pooling reuses connections, avoiding the setup costs."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Improved Performance:"})," Connections are readily available, which leads to faster query processing and reduced waiting time."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Better Resource Management:"})," The pool controls the number of active connections, preventing the database from being overwhelmed by too many concurrent requests."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Scalability:"})," Connection pooling allows applications to handle more requests with feOur resources."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Connection Health Checks:"})," Pooling libraries often include automatic handling of stale or broken connections."]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"normal-database-connections-vs-connection-pooling",children:"Normal Database Connections vs. Connection Pooling"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Normal Connections:"})," Every request opens a new connection, which is slow and resource-intensive, leading to high latency and poor scalability."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Connection Pooling:"})," Connections are established once and reused, reducing latency, optimizing resource usage, and improving scalability."]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"example-using-postgresql-and-pgbouncer",children:"Example Using PostgreSQL and PGBouncer"}),"\n",(0,t.jsx)(e.h3,{id:"configure-pgbouncer",children:"Configure PGBouncer"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["Install and configure ",(0,t.jsx)(e.code,{children:"pgbouncer"})," to manage connections to PostgreSQL. Example configuration:","\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ini",children:"[databases]\nmydb = host=localhost dbname=mydb user=myuser password=mypassword\n[pgbouncer]\npool_mode = transaction\nmax_client_conn = 100\ndefault_pool_size = 20\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"application-connection",children:"Application Connection"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Configure Our app to connect through PGBouncer, not directly to PostgreSQL."}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-plaintext",children:"host=pgbouncer_host port=6432 dbname=mydb user=myuser password=mypassword\n"})})]})}function h(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}},28453:(n,e,o)=>{o.d(e,{R:()=>a,x:()=>r});var i=o(96540);const t={},s=i.createContext(t);function a(n){const e=i.useContext(s);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:a(n.components),i.createElement(s.Provider,{value:e},n.children)}}}]);