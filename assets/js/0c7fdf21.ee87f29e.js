"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[2814],{48158:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"programming/programming-languages/go/pointers","title":"Pointers","description":"Pointers are one of the fundamental concepts in Go (and many other programming languages). A pointer is a variable that stores the memory address of another variable. By using pointers, you can directly access and modify the value stored in a particular memory location.","source":"@site/docs/programming/programming-languages/go/pointers.md","sourceDirName":"programming/programming-languages/go","slug":"/programming/programming-languages/go/pointers","permalink":"/docs/programming/programming-languages/go/pointers","draft":false,"unlisted":false,"editUrl":"https://github.com/imdeepmind/imdeepmind.github.io/blob/main/docs/programming/programming-languages/go/pointers.md","tags":[],"version":"current","lastUpdatedBy":"Abhishek Chatterjee","lastUpdatedAt":1749211863000,"sidebarPosition":60,"frontMatter":{"sidebar_position":60},"sidebar":"tutorialSidebar","previous":{"title":"Functions","permalink":"/docs/programming/programming-languages/go/functions"},"next":{"title":"Regular Expressions (RegEx)","permalink":"/docs/programming/fundamentals/regex"}}');var t=i(74848),s=i(28453);const a={sidebar_position:60},o="Pointers",l={},c=[{value:"What Are Pointers?",id:"what-are-pointers",level:2},{value:"Declaring and Initializing Pointers",id:"declaring-and-initializing-pointers",level:2},{value:"Declaring a Pointer",id:"declaring-a-pointer",level:3},{value:"Syntax:",id:"syntax",level:4},{value:"Initializing a Pointer",id:"initializing-a-pointer",level:3},{value:"Example:",id:"example",level:4},{value:"Dereferencing Pointers",id:"dereferencing-pointers",level:2},{value:"Example:",id:"example-1",level:4},{value:"Pointer Operations",id:"pointer-operations",level:2},{value:"Passing Pointers to Functions",id:"passing-pointers-to-functions",level:3},{value:"Example:",id:"example-2",level:4},{value:"Returning Pointers from Functions",id:"returning-pointers-from-functions",level:3},{value:"Example:",id:"example-3",level:4},{value:"Pointers with Structs",id:"pointers-with-structs",level:2},{value:"Example:",id:"example-4",level:4},{value:"Pointers with Slices and Arrays",id:"pointers-with-slices-and-arrays",level:2},{value:"Pointers and Arrays",id:"pointers-and-arrays",level:3},{value:"Example:",id:"example-5",level:4},{value:"Slices",id:"slices",level:3},{value:"Example:",id:"example-6",level:4},{value:"Pointers to Pointers",id:"pointers-to-pointers",level:2},{value:"Example:",id:"example-7",level:4},{value:"Pointers and <code>nil</code>",id:"pointers-and-nil",level:2},{value:"Example:",id:"example-8",level:4},{value:"Pointers in Concurrency",id:"pointers-in-concurrency",level:2},{value:"Example:",id:"example-9",level:4},{value:"Common Pitfalls with Pointers",id:"common-pitfalls-with-pointers",level:2},{value:"Best Practices with Pointers",id:"best-practices-with-pointers",level:2}];function d(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"pointers",children:"Pointers"})}),"\n",(0,t.jsx)(e.p,{children:"Pointers are one of the fundamental concepts in Go (and many other programming languages). A pointer is a variable that stores the memory address of another variable. By using pointers, you can directly access and modify the value stored in a particular memory location."}),"\n",(0,t.jsx)(e.h2,{id:"what-are-pointers",children:"What Are Pointers?"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"A pointer is a variable that stores the memory address of another variable."}),"\n",(0,t.jsxs)(e.li,{children:["The zero value of a pointer is ",(0,t.jsx)(e.code,{children:"nil"}),"."]}),"\n",(0,t.jsx)(e.li,{children:"Pointers enable efficient handling of data by avoiding copying large data structures and allowing direct memory access."}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"declaring-and-initializing-pointers",children:"Declaring and Initializing Pointers"}),"\n",(0,t.jsx)(e.h3,{id:"declaring-a-pointer",children:"Declaring a Pointer"}),"\n",(0,t.jsxs)(e.p,{children:["Use the ",(0,t.jsx)(e.code,{children:"*"})," symbol to declare a pointer type."]}),"\n",(0,t.jsx)(e.h4,{id:"syntax",children:"Syntax:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-go",children:"var ptr *int // Pointer to an integer\n"})}),"\n",(0,t.jsx)(e.h3,{id:"initializing-a-pointer",children:"Initializing a Pointer"}),"\n",(0,t.jsxs)(e.p,{children:["Pointers are initialized using the address-of operator ",(0,t.jsx)(e.code,{children:"&"}),"."]}),"\n",(0,t.jsx)(e.h4,{id:"example",children:"Example:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-go",children:'package main\n\nimport "fmt"\n\nfunc main() {\n    var num int = 10\n    var ptr *int = &num // Pointer to the address of num\n    fmt.Println("Value of num:", num)\n    fmt.Println("Address of num:", &num)\n    fmt.Println("Value of ptr (address of num):", ptr)\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:"Output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"Value of num: 10\nAddress of num: 0xc000018090\nValue of ptr (address of num): 0xc000018090\n"})}),"\n",(0,t.jsx)(e.h2,{id:"dereferencing-pointers",children:"Dereferencing Pointers"}),"\n",(0,t.jsxs)(e.p,{children:["The dereference operator ",(0,t.jsx)(e.code,{children:"*"})," is used to access or modify the value stored at the memory address a pointer refers to."]}),"\n",(0,t.jsx)(e.h4,{id:"example-1",children:"Example:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-go",children:'package main\n\nimport "fmt"\n\nfunc main() {\n    var num int = 20\n    var ptr *int = &num\n\n    fmt.Println("Value of num:", num)\n    fmt.Println("Value of num using pointer:", *ptr) // Dereference the pointer\n\n    *ptr = 30 // Modify the value using the pointer\n    fmt.Println("Updated value of num:", num)\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:"Output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"Value of num: 20\nValue of num using pointer: 20\nUpdated value of num: 30\n"})}),"\n",(0,t.jsx)(e.h2,{id:"pointer-operations",children:"Pointer Operations"}),"\n",(0,t.jsx)(e.h3,{id:"passing-pointers-to-functions",children:"Passing Pointers to Functions"}),"\n",(0,t.jsx)(e.p,{children:"You can pass pointers to functions to modify the original variable."}),"\n",(0,t.jsx)(e.h4,{id:"example-2",children:"Example:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-go",children:'package main\n\nimport "fmt"\n\nfunc updateValue(ptr *int) {\n    *ptr = 50 // Modify the value at the address\n}\n\nfunc main() {\n    num := 10\n    fmt.Println("Before:", num)\n\n    updateValue(&num)\n    fmt.Println("After:", num)\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:"Output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"Before: 10\nAfter: 50\n"})}),"\n",(0,t.jsx)(e.h3,{id:"returning-pointers-from-functions",children:"Returning Pointers from Functions"}),"\n",(0,t.jsx)(e.p,{children:"Functions can return pointers."}),"\n",(0,t.jsx)(e.h4,{id:"example-3",children:"Example:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-go",children:'package main\n\nimport "fmt"\n\nfunc newInt(value int) *int {\n    ptr := value\n    return &ptr\n}\n\nfunc main() {\n    p := newInt(42)\n    fmt.Println("Value:", *p) // Dereference to get the value\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"pointers-with-structs",children:"Pointers with Structs"}),"\n",(0,t.jsx)(e.p,{children:"Pointers are often used with structs to modify fields without copying the entire struct."}),"\n",(0,t.jsx)(e.h4,{id:"example-4",children:"Example:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-go",children:'package main\n\nimport "fmt"\n\ntype Person struct {\n    Name string\n    Age  int\n}\n\nfunc updateAge(p *Person, newAge int) {\n    p.Age = newAge // Modify struct field through pointer\n}\n\nfunc main() {\n    person := Person{Name: "John", Age: 25}\n    fmt.Println("Before:", person)\n\n    updateAge(&person, 30)\n    fmt.Println("After:", person)\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:"Output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"Before: {John 25}\nAfter: {John 30}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"pointers-with-slices-and-arrays",children:"Pointers with Slices and Arrays"}),"\n",(0,t.jsx)(e.h3,{id:"pointers-and-arrays",children:"Pointers and Arrays"}),"\n",(0,t.jsx)(e.p,{children:"You can use pointers to manipulate arrays."}),"\n",(0,t.jsx)(e.h4,{id:"example-5",children:"Example:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-go",children:'package main\n\nimport "fmt"\n\nfunc updateArray(arr *[3]int) {\n    (*arr)[0] = 100\n}\n\nfunc main() {\n    nums := [3]int{1, 2, 3}\n    fmt.Println("Before:", nums)\n\n    updateArray(&nums)\n    fmt.Println("After:", nums)\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:"Output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"Before: [1 2 3]\nAfter: [100 2 3]\n"})}),"\n",(0,t.jsx)(e.h3,{id:"slices",children:"Slices"}),"\n",(0,t.jsx)(e.p,{children:"Slices inherently use references to an underlying array, so you don\u2019t need explicit pointers to mutate them."}),"\n",(0,t.jsx)(e.h4,{id:"example-6",children:"Example:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-go",children:'package main\n\nimport "fmt"\n\nfunc updateSlice(s []int) {\n    s[0] = 100\n}\n\nfunc main() {\n    nums := []int{1, 2, 3}\n    fmt.Println("Before:", nums)\n\n    updateSlice(nums)\n    fmt.Println("After:", nums)\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:"Output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"Before: [1 2 3]\nAfter: [100 2 3]\n"})}),"\n",(0,t.jsx)(e.h2,{id:"pointers-to-pointers",children:"Pointers to Pointers"}),"\n",(0,t.jsx)(e.p,{children:"Go supports pointers to pointers (though not commonly used)."}),"\n",(0,t.jsx)(e.h4,{id:"example-7",children:"Example:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-go",children:'package main\n\nimport "fmt"\n\nfunc main() {\n    num := 10\n    ptr := &num\n    ptrToPtr := &ptr\n\n    fmt.Println("Value of num:", num)\n    fmt.Println("Pointer to num (ptr):", ptr)\n    fmt.Println("Pointer to pointer (ptrToPtr):", ptrToPtr)\n    fmt.Println("Value through ptrToPtr:", **ptrToPtr) // Double dereference\n}\n'})}),"\n",(0,t.jsxs)(e.h2,{id:"pointers-and-nil",children:["Pointers and ",(0,t.jsx)(e.code,{children:"nil"})]}),"\n",(0,t.jsxs)(e.p,{children:["A pointer with no value assigned defaults to ",(0,t.jsx)(e.code,{children:"nil"}),". Dereferencing a ",(0,t.jsx)(e.code,{children:"nil"})," pointer causes a runtime panic."]}),"\n",(0,t.jsx)(e.h4,{id:"example-8",children:"Example:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-go",children:'package main\n\nimport "fmt"\n\nfunc main() {\n    var ptr *int\n    if ptr == nil {\n        fmt.Println("Pointer is nil")\n    }\n\n    // Dereferencing a nil pointer\n    // fmt.Println(*ptr) // Uncommenting this line will cause a runtime panic\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:"Output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"Pointer is nil\n"})}),"\n",(0,t.jsx)(e.h2,{id:"pointers-in-concurrency",children:"Pointers in Concurrency"}),"\n",(0,t.jsx)(e.p,{children:"Pointers can be useful in concurrent programming to share data between goroutines."}),"\n",(0,t.jsx)(e.h4,{id:"example-9",children:"Example:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n    "sync"\n)\n\nfunc increment(ptr *int, wg *sync.WaitGroup) {\n    *ptr += 1\n    wg.Done()\n}\n\nfunc main() {\n    var num int\n    var wg sync.WaitGroup\n\n    for i := 0; i < 5; i++ {\n        wg.Add(1)\n        go increment(&num, &wg)\n    }\n\n    wg.Wait()\n    fmt.Println("Final value:", num)\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"common-pitfalls-with-pointers",children:"Common Pitfalls with Pointers"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsxs)(e.strong,{children:["Dereferencing a ",(0,t.jsx)(e.code,{children:"nil"})," Pointer:"]}),"\nDereferencing a ",(0,t.jsx)(e.code,{children:"nil"})," pointer causes a runtime panic. Always check for ",(0,t.jsx)(e.code,{children:"nil"})," before dereferencing."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-go",children:"if ptr != nil {\n    fmt.Println(*ptr)\n}\n"})}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Pointer Aliasing:"}),"\nMultiple pointers pointing to the same memory location can lead to unexpected behavior when modifying values."]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Pointer Arithmetic:"}),"\nUnlike languages like C, Go does not support pointer arithmetic for safety and simplicity."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"best-practices-with-pointers",children:"Best Practices with Pointers"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Use Pointers for Large Data Structures:"}),"\nPass large structs or arrays by pointer to avoid unnecessary copying."]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Avoid Overusing Pointers:"}),"\nUse pointers only when necessary. For example, slices and maps are already reference types and do not require pointers."]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Initialize Pointers Properly:"}),"\nAlways initialize pointers before dereferencing to avoid ",(0,t.jsx)(e.code,{children:"nil"})," pointer dereference errors."]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Document Pointer Usage:"}),"\nClearly document when a function modifies a value through a pointer to avoid confusion."]}),"\n"]}),"\n"]})]})}function p(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}},28453:(n,e,i)=>{i.d(e,{R:()=>a,x:()=>o});var r=i(96540);const t={},s=r.createContext(t);function a(n){const e=r.useContext(s);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:a(n.components),r.createElement(s.Provider,{value:e},n.children)}}}]);