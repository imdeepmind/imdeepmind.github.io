"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[1181],{2342:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>l,toc:()=>c});const l=JSON.parse('{"id":"programming-languages/go/condition","title":"Conditions and Loops","description":"Go provides concise and flexible syntax for implementing conditional statements and loops. These constructs are essential for controlling the flow of execution and iterating over data structures.","source":"@site/docs/programming-languages/go/condition.md","sourceDirName":"programming-languages/go","slug":"/programming-languages/go/condition","permalink":"/docs/programming-languages/go/condition","draft":false,"unlisted":false,"editUrl":"https://github.com/imdeepmind/imdeepmind.github.io/blob/main/docs/programming-languages/go/condition.md","tags":[],"version":"current","lastUpdatedBy":"Abhishek Chatterjee","lastUpdatedAt":1735124491000,"sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Mutation","permalink":"/docs/programming-languages/go/mutation"},"next":{"title":"Pointers","permalink":"/docs/programming-languages/go/pointers"}}');var s=i(4848),o=i(8453);const t={sidebar_position:4},a="Conditions and Loops",r={},c=[{value:"Conditional Statements",id:"conditional-statements",level:2},{value:"<code>if</code> Statement",id:"if-statement",level:3},{value:"Syntax:",id:"syntax",level:4},{value:"Example:",id:"example",level:4},{value:"<code>if-else</code> Statement",id:"if-else-statement",level:3},{value:"Syntax:",id:"syntax-1",level:4},{value:"Example:",id:"example-1",level:4},{value:"<code>if-else if</code> Ladder",id:"if-else-if-ladder",level:3},{value:"Syntax:",id:"syntax-2",level:4},{value:"Example:",id:"example-2",level:4},{value:"<code>switch</code> Statement",id:"switch-statement",level:3},{value:"Syntax:",id:"syntax-3",level:4},{value:"Example:",id:"example-3",level:4},{value:"Key Points:",id:"key-points",level:4},{value:"<code>fallthrough</code> in <code>switch</code>",id:"fallthrough-in-switch",level:3},{value:"Example:",id:"example-4",level:4},{value:"Loops",id:"loops",level:2},{value:"Basic <code>for</code> Loop",id:"basic-for-loop",level:3},{value:"Syntax:",id:"syntax-4",level:4},{value:"Example:",id:"example-5",level:4},{value:"<code>for</code> as a <code>while</code> Loop",id:"for-as-a-while-loop",level:3},{value:"Syntax:",id:"syntax-5",level:4},{value:"Example:",id:"example-6",level:4},{value:"Infinite Loop",id:"infinite-loop",level:3},{value:"Syntax:",id:"syntax-6",level:4},{value:"Example:",id:"example-7",level:4},{value:"<code>for</code> Range Loop",id:"for-range-loop",level:3},{value:"Syntax:",id:"syntax-7",level:4},{value:"Examples:",id:"examples",level:4},{value:"Key Points:",id:"key-points-1",level:4},{value:"Loop Control Statements",id:"loop-control-statements",level:3},{value:"Best Practices",id:"best-practices",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"conditions-and-loops",children:"Conditions and Loops"})}),"\n",(0,s.jsx)(n.p,{children:"Go provides concise and flexible syntax for implementing conditional statements and loops. These constructs are essential for controlling the flow of execution and iterating over data structures."}),"\n",(0,s.jsx)(n.h2,{id:"conditional-statements",children:"Conditional Statements"}),"\n",(0,s.jsxs)(n.p,{children:["Conditional statements allow decision-making in Go. The most common conditional constructs in Go are ",(0,s.jsx)(n.code,{children:"if"}),", ",(0,s.jsx)(n.code,{children:"if-else"}),", ",(0,s.jsx)(n.code,{children:"if-else if"}),", and ",(0,s.jsx)(n.code,{children:"switch"}),"."]}),"\n",(0,s.jsxs)(n.h3,{id:"if-statement",children:[(0,s.jsx)(n.code,{children:"if"})," Statement"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"if"})," statement evaluates a condition, and if the condition is ",(0,s.jsx)(n.code,{children:"true"}),", the code block inside the ",(0,s.jsx)(n.code,{children:"if"})," statement is executed."]}),"\n",(0,s.jsx)(n.h4,{id:"syntax",children:"Syntax:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:"if condition {\n    // Code to execute if condition is true\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"example",children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'package main\n\nimport "fmt"\n\nfunc main() {\n    x := 10\n    if x > 5 {\n        fmt.Println("x is greater than 5")\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"if-else-statement",children:[(0,s.jsx)(n.code,{children:"if-else"})," Statement"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"if-else"})," statement provides an alternative code block to execute if the condition is ",(0,s.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,s.jsx)(n.h4,{id:"syntax-1",children:"Syntax:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:"if condition {\n    // Code to execute if condition is true\n} else {\n    // Code to execute if condition is false\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"example-1",children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'package main\n\nimport "fmt"\n\nfunc main() {\n    x := 3\n    if x > 5 {\n        fmt.Println("x is greater than 5")\n    } else {\n        fmt.Println("x is not greater than 5")\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"if-else-if-ladder",children:[(0,s.jsx)(n.code,{children:"if-else if"})," Ladder"]}),"\n",(0,s.jsx)(n.p,{children:"This construct allows multiple conditions to be checked sequentially."}),"\n",(0,s.jsx)(n.h4,{id:"syntax-2",children:"Syntax:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:"if condition1 {\n    // Code to execute if condition1 is true\n} else if condition2 {\n    // Code to execute if condition2 is true\n} else {\n    // Code to execute if none of the conditions are true\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"example-2",children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'package main\n\nimport "fmt"\n\nfunc main() {\n    x := 15\n    if x < 10 {\n        fmt.Println("x is less than 10")\n    } else if x >= 10 && x <= 20 {\n        fmt.Println("x is between 10 and 20")\n    } else {\n        fmt.Println("x is greater than 20")\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"switch-statement",children:[(0,s.jsx)(n.code,{children:"switch"})," Statement"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"switch"})," statement is used for multiple conditional branches, often cleaner than an ",(0,s.jsx)(n.code,{children:"if-else if"})," ladder."]}),"\n",(0,s.jsx)(n.h4,{id:"syntax-3",children:"Syntax:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:"switch variable {\ncase value1:\n    // Code to execute if variable == value1\ncase value2:\n    // Code to execute if variable == value2\ndefault:\n    // Code to execute if no cases match\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"example-3",children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'package main\n\nimport "fmt"\n\nfunc main() {\n    day := "Tuesday"\n    switch day {\n    case "Monday":\n        fmt.Println("Start of the work week")\n    case "Friday":\n        fmt.Println("Almost weekend!")\n    default:\n        fmt.Println("It\'s just another day")\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"key-points",children:"Key Points:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["You can use ",(0,s.jsx)(n.code,{children:"switch"})," without a variable:","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'switch {\ncase x < 10:\n    fmt.Println("x is less than 10")\ncase x >= 10 && x <= 20:\n    fmt.Println("x is between 10 and 20")\ndefault:\n    fmt.Println("x is greater than 20")\n}\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Cases don't require explicit ",(0,s.jsx)(n.code,{children:"break"})," statements; Go automatically exits the ",(0,s.jsx)(n.code,{children:"switch"})," after the matching case."]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"fallthrough-in-switch",children:[(0,s.jsx)(n.code,{children:"fallthrough"})," in ",(0,s.jsx)(n.code,{children:"switch"})]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"fallthrough"})," keyword forces the execution of the next case, even if it doesn\u2019t match."]}),"\n",(0,s.jsx)(n.h4,{id:"example-4",children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'package main\n\nimport "fmt"\n\nfunc main() {\n    num := 2\n    switch num {\n    case 1:\n        fmt.Println("One")\n    case 2:\n        fmt.Println("Two")\n        fallthrough\n    case 3:\n        fmt.Println("Three")\n    default:\n        fmt.Println("Default case")\n    }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Output:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Two\nThree\n"})}),"\n",(0,s.jsx)(n.h2,{id:"loops",children:"Loops"}),"\n",(0,s.jsxs)(n.p,{children:["Loops are used to repeat a block of code multiple times. Go only provides the ",(0,s.jsx)(n.code,{children:"for"})," loop, but it can mimic ",(0,s.jsx)(n.code,{children:"while"})," and ",(0,s.jsx)(n.code,{children:"do-while"})," loops."]}),"\n",(0,s.jsxs)(n.h3,{id:"basic-for-loop",children:["Basic ",(0,s.jsx)(n.code,{children:"for"})," Loop"]}),"\n",(0,s.jsxs)(n.p,{children:["The basic ",(0,s.jsx)(n.code,{children:"for"})," loop iterates a specified number of times."]}),"\n",(0,s.jsx)(n.h4,{id:"syntax-4",children:"Syntax:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:"for initialization; condition; post {\n    // Code to execute in each iteration\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"example-5",children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'package main\n\nimport "fmt"\n\nfunc main() {\n    for i := 0; i < 5; i++ {\n        fmt.Println("Iteration:", i)\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"for-as-a-while-loop",children:[(0,s.jsx)(n.code,{children:"for"})," as a ",(0,s.jsx)(n.code,{children:"while"})," Loop"]}),"\n",(0,s.jsxs)(n.p,{children:["If only the condition is specified, the ",(0,s.jsx)(n.code,{children:"for"})," loop behaves like a ",(0,s.jsx)(n.code,{children:"while"})," loop."]}),"\n",(0,s.jsx)(n.h4,{id:"syntax-5",children:"Syntax:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:"for condition {\n    // Code to execute while condition is true\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"example-6",children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'package main\n\nimport "fmt"\n\nfunc main() {\n    x := 0\n    for x < 5 {\n        fmt.Println("x:", x)\n        x++\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"infinite-loop",children:"Infinite Loop"}),"\n",(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.code,{children:"for"})," loop without any condition creates an infinite loop."]}),"\n",(0,s.jsx)(n.h4,{id:"syntax-6",children:"Syntax:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:"for {\n    // Infinite loop\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"example-7",children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'package main\n\nimport "fmt"\n\nfunc main() {\n    i := 0\n    for {\n        if i >= 3 {\n            break\n        }\n        fmt.Println("Infinite loop iteration:", i)\n        i++\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"for-range-loop",children:[(0,s.jsx)(n.code,{children:"for"})," Range Loop"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"range"})," keyword is used to iterate over elements of arrays, slices, maps, and strings."]}),"\n",(0,s.jsx)(n.h4,{id:"syntax-7",children:"Syntax:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:"for index, value := range collection {\n    // Use index and value\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"examples",children:"Examples:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Iterating over a Slice:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'nums := []int{1, 2, 3}\nfor index, value := range nums {\n    fmt.Println("Index:", index, "Value:", value)\n}\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Iterating over a Map:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'scores := map[string]int{"Alice": 90, "Bob": 85}\nfor key, value := range scores {\n    fmt.Println("Key:", key, "Value:", value)\n}\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Iterating over a String:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'str := "Go"\nfor index, char := range str {\n    fmt.Println("Index:", index, "Char:", string(char))\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"key-points-1",children:"Key Points:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.code,{children:"_"})," to ignore either the index or value:","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'for _, value := range nums {\n    fmt.Println("Value:", value)\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"loop-control-statements",children:"Loop Control Statements"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsxs)(n.strong,{children:[(0,s.jsx)(n.code,{children:"break"}),":"]})," Exits the loop immediately."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:"for i := 0; i < 10; i++ {\n    if i == 5 {\n        break\n    }\n    fmt.Println(i)\n}\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsxs)(n.strong,{children:[(0,s.jsx)(n.code,{children:"continue"}),":"]})," Skips the current iteration and proceeds to the next."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:"for i := 0; i < 10; i++ {\n    if i%2 == 0 {\n        continue\n    }\n    fmt.Println(i)\n}\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsxs)(n.strong,{children:["Labeled ",(0,s.jsx)(n.code,{children:"break"})," and ",(0,s.jsx)(n.code,{children:"continue"}),":"]})," Used to control outer loops."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:"outer:\nfor i := 0; i < 3; i++ {\n    for j := 0; j < 3; j++ {\n        if i == 1 && j == 1 {\n            break outer\n        }\n        fmt.Println(i, j)\n    }\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Avoid infinite loops unless necessary (e.g., in servers)."}),"\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.code,{children:"switch"})," for cleaner, more readable conditional branching."]}),"\n",(0,s.jsx)(n.li,{children:"Minimize deeply nested loops or conditions by refactoring logic."}),"\n",(0,s.jsxs)(n.li,{children:["Prefer ",(0,s.jsx)(n.code,{children:"range"})," loops for iterating over collections."]}),"\n",(0,s.jsx)(n.li,{children:"Use labeled control statements sparingly to avoid confusing flow control."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>a});var l=i(6540);const s={},o=l.createContext(s);function t(e){const n=l.useContext(o);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),l.createElement(o.Provider,{value:n},e.children)}}}]);