"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[5740],{87032:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>l,default:()=>c,frontMatter:()=>s,metadata:()=>t,toc:()=>h});const t=JSON.parse('{"id":"data-structure-and-algorithms/algorithms/tree/common-algorithms","title":"Common Tree Algorithms","description":"Generating Binary Tree from In-order and Post-order Traversals","source":"@site/docs/data-structure-and-algorithms/algorithms/tree/common-algorithms.md","sourceDirName":"data-structure-and-algorithms/algorithms/tree","slug":"/data-structure-and-algorithms/algorithms/tree/common-algorithms","permalink":"/docs/data-structure-and-algorithms/algorithms/tree/common-algorithms","draft":false,"unlisted":false,"editUrl":"https://github.com/imdeepmind/imdeepmind.github.io/blob/main/docs/data-structure-and-algorithms/algorithms/tree/common-algorithms.md","tags":[],"version":"current","lastUpdatedBy":"Abhishek Chatterjee","lastUpdatedAt":1755188950000,"sidebarPosition":9,"frontMatter":{"sidebar_position":9},"sidebar":"tutorialSidebar","previous":{"title":"Binary Tree Traversals","permalink":"/docs/data-structure-and-algorithms/algorithms/tree/tree-traversal"},"next":{"title":"Time Complexity","permalink":"/docs/data-structure-and-algorithms/time-space-complexity/time-complexity"}}');var i=n(74848),o=n(28453);const s={sidebar_position:9},l="Common Tree Algorithms",d={},h=[{value:"Generating Binary Tree from In-order and Post-order Traversals",id:"generating-binary-tree-from-in-order-and-post-order-traversals",level:2},{value:"Algorithm",id:"algorithm",level:3},{value:"Python Code",id:"python-code",level:3},{value:"Complexity",id:"complexity",level:3},{value:"Generating Binary Tree from In-order and Pre-order Traversals",id:"generating-binary-tree-from-in-order-and-pre-order-traversals",level:2},{value:"Algorithm",id:"algorithm-1",level:3},{value:"Python Code",id:"python-code-1",level:3},{value:"Complexity",id:"complexity-1",level:3},{value:"Counting Nodes, Leaf Nodes, Height, and Levels in a Binary Tree",id:"counting-nodes-leaf-nodes-height-and-levels-in-a-binary-tree",level:2},{value:"Algorithm",id:"algorithm-2",level:3},{value:"Python Code",id:"python-code-2",level:3},{value:"Complexity",id:"complexity-2",level:3}];function a(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"common-tree-algorithms",children:"Common Tree Algorithms"})}),"\n",(0,i.jsx)(r.h2,{id:"generating-binary-tree-from-in-order-and-post-order-traversals",children:"Generating Binary Tree from In-order and Post-order Traversals"}),"\n",(0,i.jsx)(r.h3,{id:"algorithm",children:"Algorithm"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Idea"}),":"]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["In ",(0,i.jsx)(r.strong,{children:"post-order"}),", the ",(0,i.jsx)(r.strong,{children:"last element"})," is always the root of the current subtree."]}),"\n",(0,i.jsxs)(r.li,{children:["In ",(0,i.jsx)(r.strong,{children:"in-order"}),", elements to the ",(0,i.jsx)(r.strong,{children:"left"})," of root are in the left subtree, and elements to the ",(0,i.jsx)(r.strong,{children:"right"})," are in the right subtree."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:["\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Steps"}),":"]}),"\n",(0,i.jsxs)(r.ol,{children:["\n",(0,i.jsx)(r.li,{children:"Pick the last element from post-order as the root."}),"\n",(0,i.jsx)(r.li,{children:"Find this root in in-order traversal \u2014 split into left and right subtrees."}),"\n",(0,i.jsxs)(r.li,{children:["Recursively build ",(0,i.jsx)(r.strong,{children:"right subtree first"})," (because in post-order, right subtree comes before the root when reading from the end)."]}),"\n",(0,i.jsx)(r.li,{children:"Recursively build left subtree."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Visual Representation:"}),"\nExample:\nIn-order: ",(0,i.jsx)(r.code,{children:"[D, B, E, A, F, C]"}),"\nPost-order: ",(0,i.jsx)(r.code,{children:"[D, E, B, F, C, A]"})]}),"\n",(0,i.jsx)("div",{style:{textAlign:"center"},children:(0,i.jsx)(r.mermaid,{value:"graph TD\n    A\n    A --\x3e B\n    A --\x3e C\n    B --\x3e D\n    B --\x3e E\n    C --\x3e F"})}),"\n",(0,i.jsx)(r.h3,{id:"python-code",children:"Python Code"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-python",children:"class Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\ndef build_tree_in_post(inorder, postorder):\n    inorder_index_map = {val: idx for idx, val in enumerate(inorder)}\n    post_idx = [len(postorder) - 1]\n\n    def helper(in_left, in_right):\n        if in_left > in_right:\n            return None\n        root_val = postorder[post_idx[0]]\n        root = Node(root_val)\n        post_idx[0] -= 1\n        index = inorder_index_map[root_val]\n        root.right = helper(index + 1, in_right)\n        root.left = helper(in_left, index - 1)\n        return root\n\n    return helper(0, len(inorder) - 1)\n\n# Example usage:\ninorder = ['D', 'B', 'E', 'A', 'F', 'C']\npostorder = ['D', 'E', 'B', 'F', 'C', 'A']\nroot = build_tree_in_post(inorder, postorder)\n"})}),"\n",(0,i.jsx)(r.h3,{id:"complexity",children:"Complexity"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Time"}),": ",(0,i.jsx)(r.code,{children:"O(n)"})," \u2014 each node processed once, hashmap lookup is O(1)."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Space"}),": ",(0,i.jsx)(r.code,{children:"O(n)"})," \u2014 recursion stack + hashmap."]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"generating-binary-tree-from-in-order-and-pre-order-traversals",children:"Generating Binary Tree from In-order and Pre-order Traversals"}),"\n",(0,i.jsx)(r.h3,{id:"algorithm-1",children:"Algorithm"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Idea"}),":"]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["In ",(0,i.jsx)(r.strong,{children:"pre-order"}),", the ",(0,i.jsx)(r.strong,{children:"first element"})," is always the root of the current subtree."]}),"\n",(0,i.jsxs)(r.li,{children:["In ",(0,i.jsx)(r.strong,{children:"in-order"}),", elements to the left of root are in the left subtree, and to the right are in the right subtree."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:["\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Steps"}),":"]}),"\n",(0,i.jsxs)(r.ol,{children:["\n",(0,i.jsx)(r.li,{children:"Pick the first element from pre-order as the root."}),"\n",(0,i.jsx)(r.li,{children:"Find this root in in-order traversal \u2014 split into left and right subtrees."}),"\n",(0,i.jsxs)(r.li,{children:["Recursively build ",(0,i.jsx)(r.strong,{children:"left subtree first"})," (because in pre-order, left subtree comes before the right)."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Visual Representation:"}),"\nExample:\nIn-order: ",(0,i.jsx)(r.code,{children:"[D, B, E, A, F, C]"}),"\nPre-order: ",(0,i.jsx)(r.code,{children:"[A, B, D, E, C, F]"})]}),"\n",(0,i.jsx)("div",{style:{textAlign:"center"},children:(0,i.jsx)(r.mermaid,{value:"graph TD\n    A\n    A --\x3e B\n    A --\x3e C\n    B --\x3e D\n    B --\x3e E\n    C --\x3e F"})}),"\n",(0,i.jsx)(r.h3,{id:"python-code-1",children:"Python Code"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-python",children:"def build_tree_in_pre(inorder, preorder):\n    inorder_index_map = {val: idx for idx, val in enumerate(inorder)}\n    pre_idx = [0]\n\n    def helper(in_left, in_right):\n        if in_left > in_right:\n            return None\n        root_val = preorder[pre_idx[0]]\n        root = Node(root_val)\n        pre_idx[0] += 1\n        index = inorder_index_map[root_val]\n        root.left = helper(in_left, index - 1)\n        root.right = helper(index + 1, in_right)\n        return root\n\n    return helper(0, len(inorder) - 1)\n\n# Example usage:\ninorder = ['D', 'B', 'E', 'A', 'F', 'C']\npreorder = ['A', 'B', 'D', 'E', 'C', 'F']\nroot = build_tree_in_pre(inorder, preorder)\n"})}),"\n",(0,i.jsx)(r.h3,{id:"complexity-1",children:"Complexity"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Time"}),": ",(0,i.jsx)(r.code,{children:"O(n)"})]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Space"}),": ",(0,i.jsx)(r.code,{children:"O(n)"})]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"counting-nodes-leaf-nodes-height-and-levels-in-a-binary-tree",children:"Counting Nodes, Leaf Nodes, Height, and Levels in a Binary Tree"}),"\n",(0,i.jsx)(r.h3,{id:"algorithm-2",children:"Algorithm"}),"\n",(0,i.jsxs)(r.ol,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Count total nodes"}),": Recursively count left + right + 1."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Count leaf nodes"}),": Recursively check if both left & right are None \u2192 leaf."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Height"}),": ",(0,i.jsx)(r.code,{children:"1 + max(height(left), height(right))"}),", height of empty tree is 0."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Levels"}),": Height and levels are same numerically, but \u201clevels\u201d are counted starting at 1."]}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"python-code-2",children:"Python Code"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-python",children:"def count_nodes(root):\n    if root is None:\n        return 0\n    return 1 + count_nodes(root.left) + count_nodes(root.right)\n\ndef count_leaf_nodes(root):\n    if root is None:\n        return 0\n    if not root.left and not root.right:\n        return 1\n    return count_leaf_nodes(root.left) + count_leaf_nodes(root.right)\n\ndef tree_height(root):\n    if root is None:\n        return 0\n    return 1 + max(tree_height(root.left), tree_height(root.right))\n\ndef tree_levels(root):\n    return tree_height(root)  # same numeric value\n"})}),"\n",(0,i.jsx)(r.h3,{id:"complexity-2",children:"Complexity"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Time"}),": ",(0,i.jsx)(r.code,{children:"O(n)"})," for all counting and height functions."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Space"}),": ",(0,i.jsx)(r.code,{children:"O(h)"})," where ",(0,i.jsx)(r.code,{children:"h"})," is tree height (recursion stack)."]}),"\n"]})]})}function c(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},28453:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>l});var t=n(96540);const i={},o=t.createContext(i);function s(e){const r=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(o.Provider,{value:r},e.children)}}}]);