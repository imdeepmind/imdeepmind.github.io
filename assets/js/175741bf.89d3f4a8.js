"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[9454],{17078:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"containers/kubernetes/micro-service-demo","title":"VotingApp Deployment","description":"This note shows how to deploy a small microservice system to Kubernetes using Deployments and Services. The application components are:","source":"@site/docs/containers/kubernetes/micro-service-demo.md","sourceDirName":"containers/kubernetes","slug":"/containers/kubernetes/micro-service-demo","permalink":"/docs/containers/kubernetes/micro-service-demo","draft":false,"unlisted":false,"editUrl":"https://github.com/imdeepmind/imdeepmind.github.io/blob/main/docs/containers/kubernetes/micro-service-demo.md","tags":[],"version":"current","lastUpdatedBy":"Abhishek Chatterjee","lastUpdatedAt":1757850753000,"sidebarPosition":9,"frontMatter":{"sidebar_position":9},"sidebar":"tutorialSidebar","previous":{"title":"Services","permalink":"/docs/containers/kubernetes/services"},"next":{"title":"Introduction","permalink":"/docs/system-design/introduction"}}');var r=s(74848),t=s(28453);const i={sidebar_position:9},o="VotingApp Deployment",l={},c=[{value:"Namespace",id:"namespace",level:2},{value:"Secrets and Config",id:"secrets-and-config",level:2},{value:"PersistentVolumeClaim for Postgres",id:"persistentvolumeclaim-for-postgres",level:2},{value:"PostgreSQL Deployment",id:"postgresql-deployment",level:2},{value:"Redis Deployment + Service",id:"redis-deployment--service",level:2},{value:"Voting app Deployment + Service",id:"voting-app-deployment--service",level:2},{value:"Worker Deployment",id:"worker-deployment",level:2},{value:"Result app Deployment + Service",id:"result-app-deployment--service",level:2},{value:"Database initialization",id:"database-initialization",level:2},{value:"Apply order and commands",id:"apply-order-and-commands",level:2},{value:"Health checks and readiness",id:"health-checks-and-readiness",level:2},{value:"Monitoring and logs",id:"monitoring-and-logs",level:2},{value:"Security notes",id:"security-notes",level:2},{value:"Cleanup",id:"cleanup",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"votingapp-deployment",children:"VotingApp Deployment"})}),"\n",(0,r.jsx)(n.p,{children:"This note shows how to deploy a small microservice system to Kubernetes using Deployments and Services. The application components are:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"voting-app: Python Flask web app where users submit votes"}),"\n",(0,r.jsx)(n.li,{children:"redis: in-memory store used as a queue for votes"}),"\n",(0,r.jsx)(n.li,{children:"worker: background consumer that reads votes from Redis and writes to PostgreSQL"}),"\n",(0,r.jsx)(n.li,{children:"db: PostgreSQL database (stateful)"}),"\n",(0,r.jsx)(n.li,{children:"result-app: Python Flask web app that reads aggregated results from PostgreSQL"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The manifests below assume you already have container images for each component (for example ",(0,r.jsx)(n.code,{children:"your-registry/voting-app:latest"}),", ",(0,r.jsx)(n.code,{children:"your-registry/result-app:latest"}),", etc.). Replace image names with your actual images before applying."]}),"\n",(0,r.jsxs)(n.p,{children:["This demo creates a namespace, a Secret for DB credentials, a PVC for Postgres, Deployments for stateless services, a Deployment + PVC for the database, and Services to expose the components internally. For external access we expose ",(0,r.jsx)(n.code,{children:"result-app"})," via a NodePort example and recommend adding an Ingress in production."]}),"\n",(0,r.jsx)("div",{style:{textAlign:"center"},children:(0,r.jsx)(n.mermaid,{value:'flowchart LR\n    User[User]\n    subgraph Frontend\n      VA[voting-app]\n      RA[result-app]\n    end\n    subgraph Backend\n      REDIS[redis]\n      WORKER[worker]\n      DB["postgres (db)"]\n    end\n\n    User --\x3e|submit vote| VA\n    VA --\x3e|push vote| REDIS\n    WORKER --\x3e|consume| REDIS\n    WORKER --\x3e|write| DB\n    User --\x3e|view results| RA\n    RA --\x3e|read| DB\n'})}),"\n",(0,r.jsx)(n.h2,{id:"namespace",children:"Namespace"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Namespace\nmetadata:\n  name: voting-demo\n"})}),"\n",(0,r.jsx)(n.h2,{id:"secrets-and-config",children:"Secrets and Config"}),"\n",(0,r.jsxs)(n.p,{children:["Create a secret for Postgres credentials (base64-encoded values or use ",(0,r.jsx)(n.code,{children:"kubectl create secret"}),"):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Secret\nmetadata:\n  name: pg-credentials\n  namespace: voting-demo\ntype: Opaque\ndata:\n  POSTGRES_USER: cG9zdGdyZXM= # base64 for 'postgres'\n  POSTGRES_PASSWORD: c2VjcmV0 # base64 for 'secret'\n  POSTGRES_DB: dm90aW5n # base64 for 'voting'\n"})}),"\n",(0,r.jsx)(n.p,{children:"Alternatively create secret from literals:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"kubectl -n voting-demo create secret generic pg-credentials \\\n  --from-literal=POSTGRES_USER=postgres \\\n  --from-literal=POSTGRES_PASSWORD=secret \\\n  --from-literal=POSTGRES_DB=voting\n"})}),"\n",(0,r.jsx)(n.h2,{id:"persistentvolumeclaim-for-postgres",children:"PersistentVolumeClaim for Postgres"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: pg-data\n  namespace: voting-demo\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 5Gi\n"})}),"\n",(0,r.jsx)(n.p,{children:"Note: On cloud providers this will dynamically provision a PV. For local clusters (kind/minikube), ensure a storage class is available or use hostPath for demos."}),"\n",(0,r.jsx)(n.h2,{id:"postgresql-deployment",children:"PostgreSQL Deployment"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: voting-demo\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n        - name: postgres\n          image: postgres:15\n          env:\n            - name: POSTGRES_USER\n              valueFrom:\n                secretKeyRef:\n                  name: pg-credentials\n                  key: POSTGRES_USER\n            - name: POSTGRES_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  name: pg-credentials\n                  key: POSTGRES_PASSWORD\n            - name: POSTGRES_DB\n              valueFrom:\n                secretKeyRef:\n                  name: pg-credentials\n                  key: POSTGRES_DB\n          ports:\n            - containerPort: 5432\n          volumeMounts:\n            - name: pg-data\n              mountPath: /var/lib/postgresql/data\n      volumes:\n        - name: pg-data\n          persistentVolumeClaim:\n            claimName: pg-data\n"})}),"\n",(0,r.jsx)(n.p,{children:"Create a Service for Postgres (ClusterIP):"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Service\nmetadata:\n  name: postgres\n  namespace: voting-demo\nspec:\n  ports:\n    - port: 5432\n      targetPort: 5432\n  selector:\n    app: postgres\n  type: ClusterIP\n"})}),"\n",(0,r.jsx)(n.h2,{id:"redis-deployment--service",children:"Redis Deployment + Service"}),"\n",(0,r.jsx)(n.p,{children:"Redis will be used as a simple queue for votes."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: voting-demo\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n        - name: redis\n          image: redis:7\n          ports:\n            - containerPort: 6379\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: redis\n  namespace: voting-demo\nspec:\n  selector:\n    app: redis\n  ports:\n    - port: 6379\n      targetPort: 6379\n  type: ClusterIP\n"})}),"\n",(0,r.jsx)(n.h2,{id:"voting-app-deployment--service",children:"Voting app Deployment + Service"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"voting-app"})," receives user votes and pushes them to Redis. Replace the image with your built image."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: voting-app\n  namespace: voting-demo\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: voting-app\n  template:\n    metadata:\n      labels:\n        app: voting-app\n    spec:\n      containers:\n        - name: voting-app\n          image: your-registry/voting-app:latest\n          env:\n            - name: REDIS_HOST\n              value: redis\n            - name: REDIS_PORT\n              value: "6379"\n          ports:\n            - containerPort: 80\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: voting-app\n  namespace: voting-demo\nspec:\n  selector:\n    app: voting-app\n  ports:\n    - port: 80\n      targetPort: 80\n  type: ClusterIP\n'})}),"\n",(0,r.jsx)(n.h2,{id:"worker-deployment",children:"Worker Deployment"}),"\n",(0,r.jsx)(n.p,{children:"The worker reads votes from Redis and writes into Postgres. Configure DB connection via env and Secrets."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: worker\n  namespace: voting-demo\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: worker\n  template:\n    metadata:\n      labels:\n        app: worker\n    spec:\n      containers:\n        - name: worker\n          image: your-registry/worker:latest\n          env:\n            - name: REDIS_HOST\n              value: redis\n            - name: REDIS_PORT\n              value: "6379"\n            - name: PGHOST\n              value: postgres\n            - name: PGUSER\n              valueFrom:\n                secretKeyRef:\n                  name: pg-credentials\n                  key: POSTGRES_USER\n            - name: PGPASSWORD\n              valueFrom:\n                secretKeyRef:\n                  name: pg-credentials\n                  key: POSTGRES_PASSWORD\n            - name: PGDATABASE\n              valueFrom:\n                secretKeyRef:\n                  name: pg-credentials\n                  key: POSTGRES_DB\n'})}),"\n",(0,r.jsx)(n.h2,{id:"result-app-deployment--service",children:"Result app Deployment + Service"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"result-app"})," reads aggregated results from PostgreSQL and serves a web UI."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: result-app\n  namespace: voting-demo\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: result-app\n  template:\n    metadata:\n      labels:\n        app: result-app\n    spec:\n      containers:\n        - name: result-app\n          image: your-registry/result-app:latest\n          env:\n            - name: PGHOST\n              value: postgres\n            - name: PGUSER\n              valueFrom:\n                secretKeyRef:\n                  name: pg-credentials\n                  key: POSTGRES_USER\n            - name: PGPASSWORD\n              valueFrom:\n                secretKeyRef:\n                  name: pg-credentials\n                  key: POSTGRES_PASSWORD\n            - name: PGDATABASE\n              valueFrom:\n                secretKeyRef:\n                  name: pg-credentials\n                  key: POSTGRES_DB\n          ports:\n            - containerPort: 80\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: result-app\n  namespace: voting-demo\nspec:\n  selector:\n    app: result-app\n  ports:\n    - port: 80\n      targetPort: 80\n  type: NodePort\n  # nodePort: 30080 # optionally pin a nodePort\n"})}),"\n",(0,r.jsxs)(n.p,{children:["For external access (example): find the NodePort and access ",(0,r.jsx)(n.code,{children:"http://<node-ip>:<nodePort>"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"database-initialization",children:"Database initialization"}),"\n",(0,r.jsx)(n.p,{children:"If your worker or apps assume DB tables exist, initialize the schema by running a job or connect and run migrations. Example local one-off job:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"apiVersion: batch/v1\nkind: Job\nmetadata:\n  name: db-init\n  namespace: voting-demo\nspec:\n  template:\n    spec:\n      containers:\n        - name: migrate\n          image: your-registry/db-migrate:latest\n          env:\n            - name: PGHOST\n              value: postgres\n            - name: PGUSER\n              valueFrom:\n                secretKeyRef:\n                  name: pg-credentials\n                  key: POSTGRES_USER\n            - name: PGPASSWORD\n              valueFrom:\n                secretKeyRef:\n                  name: pg-credentials\n                  key: POSTGRES_PASSWORD\n            - name: PGDATABASE\n              valueFrom:\n                secretKeyRef:\n                  name: pg-credentials\n                  key: POSTGRES_DB\n      restartPolicy: OnFailure\n"})}),"\n",(0,r.jsx)(n.h2,{id:"apply-order-and-commands",children:"Apply order and commands"}),"\n",(0,r.jsx)(n.p,{children:"Recommended apply order:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Namespace"}),"\n",(0,r.jsx)(n.li,{children:"Secrets"}),"\n",(0,r.jsx)(n.li,{children:"PVC"}),"\n",(0,r.jsx)(n.li,{children:"Postgres Deployment + Service"}),"\n",(0,r.jsx)(n.li,{children:"Redis Deployment + Service"}),"\n",(0,r.jsx)(n.li,{children:"Voting app Deployment + Service"}),"\n",(0,r.jsx)(n.li,{children:"Worker Deployment"}),"\n",(0,r.jsx)(n.li,{children:"Result app Deployment + Service"}),"\n",(0,r.jsx)(n.li,{children:"DB init Job (if needed)"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Commands:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"kubectl apply -f namespace.yaml\nkubectl apply -f secret.yaml\nkubectl apply -f pg-pvc.yaml\nkubectl apply -f postgres-deployment.yaml\nkubectl apply -f redis.yaml\nkubectl apply -f voting-app.yaml\nkubectl apply -f worker.yaml\nkubectl apply -f result-app.yaml\nkubectl apply -f db-init-job.yaml\n"})}),"\n",(0,r.jsx)(n.h2,{id:"health-checks-and-readiness",children:"Health checks and readiness"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Add readiness probes to ",(0,r.jsx)(n.code,{children:"voting-app"}),", ",(0,r.jsx)(n.code,{children:"result-app"}),", and ",(0,r.jsx)(n.code,{children:"worker"})," so unhealthy Pods are removed from Service endpoints."]}),"\n",(0,r.jsx)(n.li,{children:"Example readiness probe snippet (HTTP):"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"readinessProbe:\n  httpGet:\n    path: /health\n    port: 80\n  initialDelaySeconds: 5\n  periodSeconds: 10\n"})}),"\n",(0,r.jsx)(n.h2,{id:"monitoring-and-logs",children:"Monitoring and logs"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"kubectl logs"})," and ",(0,r.jsx)(n.code,{children:"kubectl describe"})," to inspect Pods and Services for issues."]}),"\n",(0,r.jsxs)(n.li,{children:["Monitor resource usage with ",(0,r.jsx)(n.code,{children:"kubectl top"})," (requires metrics-server) or add Prometheus for production-grade monitoring."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"security-notes",children:"Security notes"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Do not store credentials in image or plain YAML; use ",(0,r.jsx)(n.code,{children:"Secrets"})," and RBAC."]}),"\n",(0,r.jsx)(n.li,{children:"Use network policies to restrict access between namespaces and services if needed."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"cleanup",children:"Cleanup"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"kubectl delete namespace voting-demo\n"})})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>o});var a=s(96540);const r={},t=a.createContext(r);function i(e){const n=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(t.Provider,{value:n},e.children)}}}]);