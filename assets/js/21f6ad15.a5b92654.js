"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[7817],{99853:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"frameworks-libraries/react/refs","title":"Refs","description":"In React, Refs (short for references) are a way to directly access and interact with DOM elements or React components. Refs provide a way to bypass the normal data flow and interact with the underlying DOM or components, which is useful for cases like focusing an input, measuring an element\u2019s size, or triggering animations.","source":"@site/docs/frameworks-libraries/react/refs.md","sourceDirName":"frameworks-libraries/react","slug":"/frameworks-libraries/react/refs","permalink":"/docs/frameworks-libraries/react/refs","draft":false,"unlisted":false,"editUrl":"https://github.com/imdeepmind/imdeepmind.github.io/blob/main/docs/frameworks-libraries/react/refs.md","tags":[],"version":"current","lastUpdatedBy":"Abhishek Chatterjee","lastUpdatedAt":1735711473000,"sidebarPosition":8,"frontMatter":{"sidebar_position":8},"sidebar":"tutorialSidebar","previous":{"title":"React Hooks","permalink":"/docs/frameworks-libraries/react/hooks"},"next":{"title":"Imperative React","permalink":"/docs/frameworks-libraries/react/imperative-react"}}');var r=s(74848),i=s(28453);const o={sidebar_position:8},c="Refs",a={},l=[{value:"Creating and Using Refs",id:"creating-and-using-refs",level:2},{value:"Class Component Refs",id:"class-component-refs",level:3},{value:"Functional Component Refs",id:"functional-component-refs",level:3},{value:"When to Use Refs",id:"when-to-use-refs",level:2},{value:"Accessing DOM Elements with Refs",id:"accessing-dom-elements-with-refs",level:2},{value:"Managing Component Instances with Refs",id:"managing-component-instances-with-refs",level:2},{value:"Mutable Values with Refs",id:"mutable-values-with-refs",level:2},{value:"Forward Refs",id:"forward-refs",level:2},{value:"When Not to Use Refs",id:"when-not-to-use-refs",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"refs",children:"Refs"})}),"\n",(0,r.jsxs)(n.p,{children:["In React, ",(0,r.jsx)(n.strong,{children:"Refs"})," (short for ",(0,r.jsx)(n.strong,{children:"references"}),") are a way to directly access and interact with DOM elements or React components. Refs provide a way to bypass the normal data flow and interact with the underlying DOM or components, which is useful for cases like focusing an input, measuring an element\u2019s size, or triggering animations."]}),"\n",(0,r.jsxs)(n.p,{children:["Refs allow you to ",(0,r.jsx)(n.strong,{children:"reference"})," a DOM node or a React component instance directly, bypassing the state and props system. This is helpful when you need to perform ",(0,r.jsx)(n.strong,{children:"imperative actions"})," (like focus or scroll) rather than relying on React's declarative model."]}),"\n",(0,r.jsxs)(n.p,{children:["React provides a way to create refs using the ",(0,r.jsx)(n.code,{children:"React.createRef()"})," API in class components and the ",(0,r.jsx)(n.code,{children:"useRef()"})," hook in functional components."]}),"\n",(0,r.jsx)(n.h2,{id:"creating-and-using-refs",children:"Creating and Using Refs"}),"\n",(0,r.jsx)(n.h3,{id:"class-component-refs",children:"Class Component Refs"}),"\n",(0,r.jsxs)(n.p,{children:["In ",(0,r.jsx)(n.strong,{children:"class components"}),", refs are created using ",(0,r.jsx)(n.code,{children:"React.createRef()"})," inside the constructor and then accessed through ",(0,r.jsx)(n.code,{children:"this.refs"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Example"})," (Class Component):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'import React, { Component } from "react";\n\nclass MyComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.inputRef = React.createRef();\n  }\n\n  focusInput = () => {\n    this.inputRef.current.focus(); // Focus on the input element\n  };\n\n  render() {\n    return (\n      <div>\n        <input ref={this.inputRef} />\n        <button onClick={this.focusInput}>Focus Input</button>\n      </div>\n    );\n  }\n}\n\nexport default MyComponent;\n'})}),"\n",(0,r.jsx)(n.p,{children:"In the example above:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"this.inputRef"})," is created using ",(0,r.jsx)(n.code,{children:"React.createRef()"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"ref"})," is assigned to the ",(0,r.jsx)(n.code,{children:"<input>"})," element."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"this.inputRef.current.focus()"})," focuses the input element when the button is clicked."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"functional-component-refs",children:"Functional Component Refs"}),"\n",(0,r.jsxs)(n.p,{children:["In ",(0,r.jsx)(n.strong,{children:"functional components"}),", the ",(0,r.jsx)(n.code,{children:"useRef()"})," hook is used to create refs. ",(0,r.jsx)(n.code,{children:"useRef()"})," returns a mutable object that persists across renders."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Example"})," (Functional Component):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'import React, { useRef } from "react";\n\nconst MyComponent = () => {\n  const inputRef = useRef(null);\n\n  const focusInput = () => {\n    inputRef.current.focus(); // Focus on the input element\n  };\n\n  return (\n    <div>\n      <input ref={inputRef} />\n      <button onClick={focusInput}>Focus Input</button>\n    </div>\n  );\n};\n\nexport default MyComponent;\n'})}),"\n",(0,r.jsx)(n.p,{children:"Here:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inputRef"})," is created using ",(0,r.jsx)(n.code,{children:"useRef()"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"ref"})," is assigned to the ",(0,r.jsx)(n.code,{children:"<input>"})," element."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inputRef.current.focus()"})," is used to focus the input element."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"when-to-use-refs",children:"When to Use Refs"}),"\n",(0,r.jsx)(n.p,{children:"Refs should generally be used for actions that are not directly tied to state or the normal React data flow. These include:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Accessing DOM Elements"}),": Refs provide a way to get a direct reference to a DOM element, such as focusing an input field, scrolling an element, or measuring its size."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Triggering Imperative Actions"}),": If you need to trigger an action imperatively (e.g., animations, changing focus, or interacting with third-party libraries), refs are useful."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Managing Third-Party Libraries"}),": When integrating third-party libraries that need access to a DOM element, refs allow you to interact with the DOM directly."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Storing Mutable Values"}),": Refs can be used to store values that don\u2019t trigger re-renders. For example, keeping track of a previous value or a value that doesn\u2019t need to trigger a UI update."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"accessing-dom-elements-with-refs",children:"Accessing DOM Elements with Refs"}),"\n",(0,r.jsx)(n.p,{children:"Refs provide a way to interact directly with DOM elements, which is useful when React\u2019s declarative rendering model isn\u2019t sufficient."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Focus an Input"}),": Directly focus on an input field."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Scroll an Element"}),": Programmatically scroll a container to a particular position."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Measure Element Dimensions"}),": Get the dimensions (height, width) of an element, such as when building custom layouts."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Example"})," (Accessing DOM with Refs):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'import React, { useRef, useEffect } from "react";\n\nconst ScrollComponent = () => {\n  const scrollRef = useRef();\n\n  useEffect(() => {\n    scrollRef.current.scrollIntoView({ behavior: "smooth" }); // Scroll to the element\n  }, []);\n\n  return (\n    <div>\n      <div style={{ height: "100vh" }}>Scroll down</div>\n      <div\n        ref={scrollRef}\n        style={{ height: "100px", backgroundColor: "lightblue" }}\n      >\n        This is the target element.\n      </div>\n    </div>\n  );\n};\n\nexport default ScrollComponent;\n'})}),"\n",(0,r.jsx)(n.p,{children:"In this example, we use a ref to scroll the page to a specific element when the component mounts."}),"\n",(0,r.jsx)(n.h2,{id:"managing-component-instances-with-refs",children:"Managing Component Instances with Refs"}),"\n",(0,r.jsxs)(n.p,{children:["Refs can also be used to interact with ",(0,r.jsx)(n.strong,{children:"class component instances"}),". You can use a ref to call methods of a class-based component or access its internal state."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Example"})," (Accessing Methods in Class Components):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'import React, { Component } from "react";\n\nclass Timer extends Component {\n  resetTimer() {\n    console.log("Timer reset!");\n  }\n\n  render() {\n    return <div>Timer</div>;\n  }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.timerRef = React.createRef();\n  }\n\n  handleReset = () => {\n    this.timerRef.current.resetTimer(); // Access method of Timer class\n  };\n\n  render() {\n    return (\n      <div>\n        <Timer ref={this.timerRef} />\n        <button onClick={this.handleReset}>Reset Timer</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n'})}),"\n",(0,r.jsxs)(n.p,{children:["In this case, the ",(0,r.jsx)(n.code,{children:"App"})," component calls the ",(0,r.jsx)(n.code,{children:"resetTimer"})," method of the ",(0,r.jsx)(n.code,{children:"Timer"})," component using the ref."]}),"\n",(0,r.jsx)(n.h2,{id:"mutable-values-with-refs",children:"Mutable Values with Refs"}),"\n",(0,r.jsxs)(n.p,{children:["Unlike state, refs do not cause a re-render when the referenced value changes. This makes refs useful for storing ",(0,r.jsx)(n.strong,{children:"mutable values"})," that need to persist across renders but shouldn\u2019t trigger re-renders."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Example"})," (Storing Mutable Values):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'import React, { useRef } from "react";\n\nconst Counter = () => {\n  const countRef = useRef(0);\n\n  const incrementCount = () => {\n    countRef.current += 1;\n    console.log(countRef.current);\n  };\n\n  return (\n    <div>\n      <button onClick={incrementCount}>Increment Count</button>\n    </div>\n  );\n};\n\nexport default Counter;\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Here, the ",(0,r.jsx)(n.code,{children:"countRef"})," stores a mutable value (",(0,r.jsx)(n.code,{children:"countRef.current"}),") that does not cause the component to re-render."]}),"\n",(0,r.jsx)(n.h2,{id:"forward-refs",children:"Forward Refs"}),"\n",(0,r.jsxs)(n.p,{children:["In some cases, you may need to pass a ref from a parent component to a child component. React provides the ",(0,r.jsx)(n.code,{children:"forwardRef"})," API to forward refs to a child component."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Example"})," (Forwarding Refs):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'import React, { forwardRef } from "react";\n\nconst Input = forwardRef((props, ref) => {\n  return <input ref={ref} />;\n});\n\nconst Parent = () => {\n  const inputRef = useRef();\n\n  const focusInput = () => {\n    inputRef.current.focus();\n  };\n\n  return (\n    <div>\n      <Input ref={inputRef} />\n      <button onClick={focusInput}>Focus Input</button>\n    </div>\n  );\n};\n\nexport default Parent;\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Here, ",(0,r.jsx)(n.code,{children:"Input"})," uses ",(0,r.jsx)(n.code,{children:"forwardRef"})," to allow the parent component (",(0,r.jsx)(n.code,{children:"Parent"}),") to directly access the input element."]}),"\n",(0,r.jsx)(n.h2,{id:"when-not-to-use-refs",children:"When Not to Use Refs"}),"\n",(0,r.jsx)(n.p,{children:"Refs should be used sparingly. They are typically used for imperative code, but they should not replace the declarative nature of React components. Here\u2019s when you should avoid refs:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Handling UI State"}),": Use React state for managing UI state instead of refs."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Complex Interactions"}),": Relying too much on refs for complex interactions can make the component harder to maintain. Use refs for simple, imperative actions (e.g., focusing an input)."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>c});var t=s(96540);const r={},i=t.createContext(r);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);