"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[7607],{66702:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"containers/introduction","title":"Introduction","description":"A container is a lightweight, portable, and isolated execution environment that allows applications to run reliably across different computing environments.","source":"@site/docs/containers/introduction.md","sourceDirName":"containers","slug":"/containers/introduction","permalink":"/docs/containers/introduction","draft":false,"unlisted":false,"editUrl":"https://github.com/imdeepmind/imdeepmind.github.io/blob/main/docs/containers/introduction.md","tags":[],"version":"current","lastUpdatedBy":"Abhishek Chatterjee","lastUpdatedAt":1757163278000,"sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Vector Index","permalink":"/docs/databases/database-systems/vector-index"},"next":{"title":"Terminologies","permalink":"/docs/containers/terminology"}}');var r=i(74848),s=i(28453);const o={sidebar_position:1},a="Introduction",l={},d=[{value:"Why do we need Containers?",id:"why-do-we-need-containers",level:2},{value:"Containers vs Virtual Machines",id:"containers-vs-virtual-machines",level:2},{value:"Comparison Table",id:"comparison-table",level:3},{value:"Container Platforms",id:"container-platforms",level:2},{value:"Docker",id:"docker",level:3},{value:"rkt (Rocket)",id:"rkt-rocket",level:3},{value:"LXC (Linux Containers)",id:"lxc-linux-containers",level:3},{value:"Podman",id:"podman",level:3},{value:"CRI-O",id:"cri-o",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"introduction",children:"Introduction"})}),"\n",(0,r.jsx)(n.p,{children:"A container is a lightweight, portable, and isolated execution environment that allows applications to run reliably across different computing environments.\nIt packages together:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Application code"}),"\n",(0,r.jsx)(n.li,{children:"Runtime"}),"\n",(0,r.jsx)(n.li,{children:"Libraries and dependencies"}),"\n",(0,r.jsx)(n.li,{children:"Configuration files"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Unlike virtual machines, containers share the host operating system\u2019s kernel, making them faster and more efficient."}),"\n",(0,r.jsx)(n.h2,{id:"why-do-we-need-containers",children:"Why do we need Containers?"}),"\n",(0,r.jsx)(n.p,{children:"Traditional application deployment faced issues such as:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u201cWorks on my machine\u201d problem \u2192 Applications behaved differently in dev, test, and prod"}),"\n",(0,r.jsx)(n.li,{children:"Dependency conflicts \u2192 Multiple apps required conflicting library versions"}),"\n",(0,r.jsx)(n.li,{children:"Resource overhead \u2192 Virtual machines consumed significant CPU/RAM for running separate OS instances"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Containers solve these problems by providing:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Portability \u2192 Same container runs anywhere (developer laptop, test server, cloud)"}),"\n",(0,r.jsx)(n.li,{children:"Consistency \u2192 Dependencies and configuration bundled within the container"}),"\n",(0,r.jsx)(n.li,{children:"Efficiency \u2192 Faster startup and lower overhead compared to VMs"}),"\n",(0,r.jsx)(n.li,{children:"Scalability \u2192 Easy replication and scaling in distributed environments"}),"\n",(0,r.jsx)(n.li,{children:"Isolation \u2192 Each container runs in its own environment without interfering with others"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"containers-vs-virtual-machines",children:"Containers vs Virtual Machines"}),"\n",(0,r.jsx)(n.p,{children:"Virtual machines virtualize hardware. Each VM includes its own OS, libraries, and apps, making them heavy and slower to boot.\nContainers virtualize the OS, share the host kernel, and are lightweight with much faster startup times."}),"\n",(0,r.jsx)("div",{style:{textAlign:"center"},children:(0,r.jsx)(n.mermaid,{value:"graph TD\n    A[Physical Server / Host Machine] --\x3e B[Hypervisor]\n    B --\x3e C[VM1: OS + Libraries + App]\n    B --\x3e D[VM2: OS + Libraries + App]\n    B --\x3e E[VM3: OS + Libraries + App]\n\n    A --\x3e F[Container Engine]\n    F --\x3e G[Container 1: Libraries + App]\n    F --\x3e H[Container 2: Libraries + App]\n    F --\x3e I[Container 3: Libraries + App]\n"})}),"\n",(0,r.jsx)(n.h3,{id:"comparison-table",children:"Comparison Table"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Feature"}),(0,r.jsx)(n.th,{children:"Virtual Machines"}),(0,r.jsx)(n.th,{children:"Containers"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Virtualization"}),(0,r.jsx)(n.td,{children:"Hardware-level (via hypervisor)"}),(0,r.jsx)(n.td,{children:"OS-level (via container engine)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"OS per Instance"}),(0,r.jsx)(n.td,{children:"Yes (each VM has its own OS)"}),(0,r.jsx)(n.td,{children:"No (all share host OS kernel)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Startup Time"}),(0,r.jsx)(n.td,{children:"Minutes"}),(0,r.jsx)(n.td,{children:"Seconds"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Resource Usage"}),(0,r.jsx)(n.td,{children:"High (each OS consumes resources)"}),(0,r.jsx)(n.td,{children:"Low (lightweight and efficient)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Portability"}),(0,r.jsx)(n.td,{children:"Limited (depends on hypervisor)"}),(0,r.jsx)(n.td,{children:"High (works across environments)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Isolation"}),(0,r.jsx)(n.td,{children:"Strong (separate OS per VM)"}),(0,r.jsx)(n.td,{children:"Strong but shares kernel"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"container-platforms",children:"Container Platforms"}),"\n",(0,r.jsx)(n.h3,{id:"docker",children:"Docker"}),"\n",(0,r.jsx)(n.p,{children:"The most popular container platform. It provides Docker Engine (container runtime), Docker CLI, and Docker Hub (registry).\nUses container images built from Dockerfiles.\nFeatures include portability, developer-friendly tooling, and a large community."}),"\n",(0,r.jsx)(n.h3,{id:"rkt-rocket",children:"rkt (Rocket)"}),"\n",(0,r.jsx)(n.p,{children:"Developed by CoreOS (now Red Hat). Designed as an alternative to Docker with more focus on security and composability.\nUses the App Container (appc) specification.\nNow mostly replaced by Podman and CRI-O in Kubernetes ecosystems."}),"\n",(0,r.jsx)(n.h3,{id:"lxc-linux-containers",children:"LXC (Linux Containers)"}),"\n",(0,r.jsx)(n.p,{children:"One of the earliest container technologies. Provides a lightweight VM-like environment.\nUses Linux kernel features like cgroups and namespaces.\nLower-level compared to Docker, with less developer tooling."}),"\n",(0,r.jsx)(n.h3,{id:"podman",children:"Podman"}),"\n",(0,r.jsxs)(n.p,{children:["A daemonless container engine. Compatible with Docker CLI commands (",(0,r.jsx)(n.code,{children:"docker run"})," \u2192 ",(0,r.jsx)(n.code,{children:"podman run"}),").\nBetter integration with Kubernetes (can generate Kubernetes YAML directly).\nRuns containers without requiring a root daemon, improving security."]}),"\n",(0,r.jsx)(n.h3,{id:"cri-o",children:"CRI-O"}),"\n",(0,r.jsx)(n.p,{children:"A lightweight container runtime specifically for Kubernetes.\nImplements the Container Runtime Interface (CRI).\nFocused on running containers efficiently in Kubernetes clusters."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>a});var t=i(96540);const r={},s=t.createContext(r);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);