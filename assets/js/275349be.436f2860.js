"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[640],{3160:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>t,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"system-design/containers/cgroups","title":"cgroups in Linux","description":"What Are cgroups?","source":"@site/docs/system-design/containers/cgroups.md","sourceDirName":"system-design/containers","slug":"/system-design/containers/cgroups","permalink":"/docs/system-design/containers/cgroups","draft":false,"unlisted":false,"editUrl":"https://github.com/imdeepmind/imdeepmind.github.io/blob/main/docs/system-design/containers/cgroups.md","tags":[],"version":"current","lastUpdatedBy":"Abhishek Chatterjee","lastUpdatedAt":1735140631000,"sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Linux Namespaces","permalink":"/docs/system-design/containers/namespaces"},"next":{"title":"Introduction","permalink":"/docs/data-structure-and-algorithms/introduction"}}');var n=r(4848),c=r(8453);const i={sidebar_position:5},a="cgroups in Linux",t={},l=[{value:"What Are cgroups?",id:"what-are-cgroups",level:2},{value:"Core Features of cgroups",id:"core-features-of-cgroups",level:3},{value:"Visualizing cgroup Resource Allocation",id:"visualizing-cgroup-resource-allocation",level:2},{value:"How cgroups Enable Containerization",id:"how-cgroups-enable-containerization",level:2},{value:"Managing cgroups with cgroup-tools",id:"managing-cgroups-with-cgroup-tools",level:2},{value:"Install cgroup-tools",id:"install-cgroup-tools",level:3},{value:"Create a cgroup",id:"create-a-cgroup",level:3},{value:"Create a CPU cgroup:",id:"create-a-cpu-cgroup",level:4},{value:"Create a Memory cgroup:",id:"create-a-memory-cgroup",level:4},{value:"Set Resource Limits",id:"set-resource-limits",level:3},{value:"Limit CPU Usage:",id:"limit-cpu-usage",level:4},{value:"Limit Memory Usage:",id:"limit-memory-usage",level:4},{value:"Run a Process Within a cgroup",id:"run-a-process-within-a-cgroup",level:3},{value:"Monitor Resource Usage",id:"monitor-resource-usage",level:3},{value:"Monitor CPU Usage:",id:"monitor-cpu-usage",level:4},{value:"Monitor Memory Usage:",id:"monitor-memory-usage",level:4},{value:"Complete Example: Managing a Process with cgroup-tools",id:"complete-example-managing-a-process-with-cgroup-tools",level:2},{value:"Step 1: Create a cgroup",id:"step-1-create-a-cgroup",level:3},{value:"Step 2: Set Resource Limits",id:"step-2-set-resource-limits",level:3},{value:"Step 3: Run a Process",id:"step-3-run-a-process",level:3},{value:"Step 4: Monitor Usage",id:"step-4-monitor-usage",level:3},{value:"Diagram: Process Constrained by cgroup",id:"diagram-process-constrained-by-cgroup",level:2}];function u(e){const s={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsxs)(s.h1,{id:"cgroups-in-linux",children:[(0,n.jsx)(s.code,{children:"cgroups"})," in Linux"]})}),"\n",(0,n.jsx)(s.h2,{id:"what-are-cgroups",children:"What Are cgroups?"}),"\n",(0,n.jsx)(s.p,{children:"Control Groups (cgroups) are a Linux kernel feature that provides the ability to allocate, limit, and monitor system resources\u2014such as CPU, memory, disk I/O, and network bandwidth\u2014across groups of processes. cgroups play an essential role in resource management and are a cornerstone of containerization technologies like Docker and Kubernetes."}),"\n",(0,n.jsx)(s.h3,{id:"core-features-of-cgroups",children:"Core Features of cgroups"}),"\n",(0,n.jsxs)(s.ol,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Resource Allocation:"})," Limit the use of resources such as CPU, memory, and I/O for specific process groups."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Monitoring:"})," Collect statistics and usage metrics for processes in a cgroup."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Isolation:"})," Ensure that resource usage in one cgroup does not affect others."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Prioritization:"})," Allocate resources to high-priority processes."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Dynamic Management:"})," Add or remove processes from a cgroup without restarting them."]}),"\n"]}),"\n",(0,n.jsx)(s.h2,{id:"visualizing-cgroup-resource-allocation",children:"Visualizing cgroup Resource Allocation"}),"\n",(0,n.jsx)(s.p,{children:"The diagram below illustrates how cgroups divide system resources between groups of processes:"}),"\n",(0,n.jsx)(s.mermaid,{value:"graph TD\n    A[Host System Resources] --\x3e|CPU| B[cgroup A]\n    A --\x3e|Memory| B\n    A --\x3e|Disk I/O| C[cgroup B]\n    A --\x3e|Network| C\n    B --\x3e|Processes| D[Process 1]\n    B --\x3e D[Process 2]\n    C --\x3e|Processes| E[Process 3]\n    C --\x3e E[Process 4]"}),"\n",(0,n.jsx)(s.p,{children:"Here:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"System resources are distributed among cgroups (e.g., cgroup A, cgroup B)."}),"\n",(0,n.jsx)(s.li,{children:"Each cgroup applies specific resource constraints to its processes."}),"\n"]}),"\n",(0,n.jsx)(s.h2,{id:"how-cgroups-enable-containerization",children:"How cgroups Enable Containerization"}),"\n",(0,n.jsx)(s.p,{children:"Containers use cgroups to:"}),"\n",(0,n.jsxs)(s.ol,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Enforce Resource Constraints:"})," Ensure no container monopolizes system resources."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Monitor Usage:"})," Track resource consumption per container."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Isolate Processes:"})," Provide isolated resource environments for containers."]}),"\n"]}),"\n",(0,n.jsx)(s.p,{children:"For example, Docker utilizes cgroups to enforce CPU, memory, and I/O limits specified in container configurations."}),"\n",(0,n.jsx)(s.h2,{id:"managing-cgroups-with-cgroup-tools",children:"Managing cgroups with cgroup-tools"}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"cgroup-tools"})," is a user-friendly package for managing cgroups. It includes commands like ",(0,n.jsx)(s.code,{children:"cgcreate"}),", ",(0,n.jsx)(s.code,{children:"cgset"}),", and ",(0,n.jsx)(s.code,{children:"cgexec"})," for creating and managing resource limits. Below is a guide to using these tools effectively."]}),"\n",(0,n.jsx)(s.h3,{id:"install-cgroup-tools",children:"Install cgroup-tools"}),"\n",(0,n.jsx)(s.p,{children:"Install the package using:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"sudo apt install cgroup-tools\n"})}),"\n",(0,n.jsx)(s.h3,{id:"create-a-cgroup",children:"Create a cgroup"}),"\n",(0,n.jsx)(s.p,{children:"To create a new cgroup for CPU and memory management:"}),"\n",(0,n.jsx)(s.h4,{id:"create-a-cpu-cgroup",children:"Create a CPU cgroup:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"sudo cgcreate -g cpu:/my_cgroup\n"})}),"\n",(0,n.jsx)(s.h4,{id:"create-a-memory-cgroup",children:"Create a Memory cgroup:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"sudo cgcreate -g memory:/my_cgroup\n"})}),"\n",(0,n.jsx)(s.h3,{id:"set-resource-limits",children:"Set Resource Limits"}),"\n",(0,n.jsxs)(s.p,{children:["Configure resource constraints for the cgroup using ",(0,n.jsx)(s.code,{children:"cgset"}),":"]}),"\n",(0,n.jsx)(s.h4,{id:"limit-cpu-usage",children:"Limit CPU Usage:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"sudo cgset -r cpu.cfs_quota_us=50000 my_cgroup\n"})}),"\n",(0,n.jsx)(s.p,{children:"This restricts the cgroup to 50% of one CPU core (50,000 microseconds per 100,000 microseconds)."}),"\n",(0,n.jsx)(s.h4,{id:"limit-memory-usage",children:"Limit Memory Usage:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"sudo cgset -r memory.limit_in_bytes=100M my_cgroup\n"})}),"\n",(0,n.jsx)(s.p,{children:"This sets a maximum memory usage limit of 100 MB."}),"\n",(0,n.jsx)(s.h3,{id:"run-a-process-within-a-cgroup",children:"Run a Process Within a cgroup"}),"\n",(0,n.jsxs)(s.p,{children:["Use ",(0,n.jsx)(s.code,{children:"cgexec"})," to execute a process within the cgroup:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"sudo cgexec -g cpu,memory:/my_cgroup stress --cpu 1 --vm 1 --vm-bytes 50M\n"})}),"\n",(0,n.jsxs)(s.p,{children:["This runs the ",(0,n.jsx)(s.code,{children:"stress"})," tool with the specified CPU and memory limits."]}),"\n",(0,n.jsx)(s.h3,{id:"monitor-resource-usage",children:"Monitor Resource Usage"}),"\n",(0,n.jsxs)(s.p,{children:["Check cgroup resource consumption using ",(0,n.jsx)(s.code,{children:"cgget"}),":"]}),"\n",(0,n.jsx)(s.h4,{id:"monitor-cpu-usage",children:"Monitor CPU Usage:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"sudo cgget -r cpuacct.usage my_cgroup\n"})}),"\n",(0,n.jsx)(s.h4,{id:"monitor-memory-usage",children:"Monitor Memory Usage:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"sudo cgget -r memory.usage_in_bytes my_cgroup\n"})}),"\n",(0,n.jsx)(s.h2,{id:"complete-example-managing-a-process-with-cgroup-tools",children:"Complete Example: Managing a Process with cgroup-tools"}),"\n",(0,n.jsx)(s.h3,{id:"step-1-create-a-cgroup",children:"Step 1: Create a cgroup"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"sudo cgcreate -g cpu,memory:/example_cgroup\n"})}),"\n",(0,n.jsx)(s.h3,{id:"step-2-set-resource-limits",children:"Step 2: Set Resource Limits"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"sudo cgset -r cpu.cfs_quota_us=50000 example_cgroup\nsudo cgset -r memory.limit_in_bytes=100M example_cgroup\n"})}),"\n",(0,n.jsx)(s.h3,{id:"step-3-run-a-process",children:"Step 3: Run a Process"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"sudo cgexec -g cpu,memory:/example_cgroup stress --cpu 1 --vm 1 --vm-bytes 50M\n"})}),"\n",(0,n.jsx)(s.h3,{id:"step-4-monitor-usage",children:"Step 4: Monitor Usage"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"sudo cgget -r cpuacct.usage example_cgroup\nsudo cgget -r memory.usage_in_bytes example_cgroup\n"})}),"\n",(0,n.jsx)(s.h2,{id:"diagram-process-constrained-by-cgroup",children:"Diagram: Process Constrained by cgroup"}),"\n",(0,n.jsx)(s.mermaid,{value:"graph TD\n    A[Host System Resources] --\x3e|CPU, Memory| B[example_cgroup]\n    B --\x3e|Limits: CPU 50%, Memory 100MB| C[Stress Process]"}),"\n",(0,n.jsx)(s.p,{children:"In this example:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["The ",(0,n.jsx)(s.code,{children:"example_cgroup"})," cgroup enforces CPU and memory constraints on the ",(0,n.jsx)(s.code,{children:"stress"})," process."]}),"\n",(0,n.jsx)(s.li,{children:"Other system processes remain unaffected."}),"\n"]})]})}function d(e={}){const{wrapper:s}={...(0,c.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}},8453:(e,s,r)=>{r.d(s,{R:()=>i,x:()=>a});var o=r(6540);const n={},c=o.createContext(n);function i(e){const s=o.useContext(c);return o.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),o.createElement(c.Provider,{value:s},e.children)}}}]);