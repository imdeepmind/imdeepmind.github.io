"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[3467],{35081:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>t,default:()=>c,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"frameworks-libraries/backend/django/hyperlinks","title":"Nested Relationships and Hyperlinked APIs","description":"Django Rest Framework (DRF) offers tools to manage related models effectively. This includes using hyperlinks for relationships and handling deeply nested relationships.","source":"@site/docs/frameworks-libraries/backend/django/hyperlinks.md","sourceDirName":"frameworks-libraries/backend/django","slug":"/frameworks-libraries/backend/django/hyperlinks","permalink":"/docs/frameworks-libraries/backend/django/hyperlinks","draft":false,"unlisted":false,"editUrl":"https://github.com/imdeepmind/imdeepmind.github.io/blob/main/docs/frameworks-libraries/backend/django/hyperlinks.md","tags":[],"version":"current","lastUpdatedBy":"Abhishek Chatterjee","lastUpdatedAt":1749212834000,"sidebarPosition":11,"frontMatter":{"sidebar_position":11},"sidebar":"tutorialSidebar","previous":{"title":"Querying and Filtering","permalink":"/docs/frameworks-libraries/backend/django/querying-filtering"},"next":{"title":"Error Handling and Response Customization","permalink":"/docs/frameworks-libraries/backend/django/error-handling"}}');var s=i(74848),l=i(28453);const a={sidebar_position:11},t="Nested Relationships and Hyperlinked APIs",o={},d=[{value:"Hyperlinked APIs and <code>HyperlinkedModelSerializer</code>",id:"hyperlinked-apis-and-hyperlinkedmodelserializer",level:2},{value:"What is a Hyperlinked API?",id:"what-is-a-hyperlinked-api",level:3},{value:"<code>HyperlinkedModelSerializer</code>",id:"hyperlinkedmodelserializer",level:3},{value:"Usage",id:"usage",level:4},{value:"Advantages",id:"advantages",level:4},{value:"Nested Relationships",id:"nested-relationships",level:2},{value:"What are Nested Relationships?",id:"what-are-nested-relationships",level:3},{value:"Implementing Nested Relationships",id:"implementing-nested-relationships",level:3},{value:"Key Considerations",id:"key-considerations",level:3},{value:"When to Use Hyperlinked vs Nested Relationships",id:"when-to-use-hyperlinked-vs-nested-relationships",level:2},{value:"Performance",id:"performance",level:2},{value:"Validation",id:"validation",level:2},{value:"Example: Combining Hyperlinked and Nested Relationships",id:"example-combining-hyperlinked-and-nested-relationships",level:2}];function h(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"nested-relationships-and-hyperlinked-apis",children:"Nested Relationships and Hyperlinked APIs"})}),"\n",(0,s.jsx)(n.p,{children:"Django Rest Framework (DRF) offers tools to manage related models effectively. This includes using hyperlinks for relationships and handling deeply nested relationships."}),"\n",(0,s.jsxs)(n.h2,{id:"hyperlinked-apis-and-hyperlinkedmodelserializer",children:["Hyperlinked APIs and ",(0,s.jsx)(n.code,{children:"HyperlinkedModelSerializer"})]}),"\n",(0,s.jsx)(n.h3,{id:"what-is-a-hyperlinked-api",children:"What is a Hyperlinked API?"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"In Hyperlinked APIs, relationships between resources are represented by URLs (hyperlinks) rather than raw data or primary keys."}),"\n",(0,s.jsx)(n.li,{children:"URLs improve API usability and adhere to REST principles by providing direct references to related resources."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"hyperlinkedmodelserializer",children:(0,s.jsx)(n.code,{children:"HyperlinkedModelSerializer"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"A specialized serializer class that uses hyperlinks for relationships instead of primary keys."}),"\n",(0,s.jsx)(n.li,{children:"Ideal for APIs where navigation between resources is a priority."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"usage",children:"Usage"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Basic Setup"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from rest_framework import serializers\nfrom myapp.models import Author, Book\n\nclass AuthorSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:\n        model = Author\n        fields = ['url', 'id', 'name', 'books']\n        extra_kwargs = {'url': {'view_name': 'author-detail'}}\n\nclass BookSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:\n        model = Book\n        fields = ['url', 'id', 'title', 'author']\n        extra_kwargs = {'url': {'view_name': 'book-detail'}}\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"url"}),": Automatically generated by ",(0,s.jsx)(n.code,{children:"HyperlinkedModelSerializer"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"view_name"}),": Specifies the name of the view used to generate the hyperlink."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Views"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from rest_framework import viewsets\nfrom myapp.models import Author, Book\nfrom myapp.serializers import AuthorSerializer, BookSerializer\n\nclass AuthorViewSet(viewsets.ModelViewSet):\n    queryset = Author.objects.all()\n    serializer_class = AuthorSerializer\n\nclass BookViewSet(viewsets.ModelViewSet):\n    queryset = Book.objects.all()\n    serializer_class = BookSerializer\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"URLs"}),":\nDefine routes in ",(0,s.jsx)(n.code,{children:"urls.py"})," using a router:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from rest_framework.routers import DefaultRouter\nfrom myapp.views import AuthorViewSet, BookViewSet\n\nrouter = DefaultRouter()\nrouter.register(r'authors', AuthorViewSet)\nrouter.register(r'books', BookViewSet)\n\nurlpatterns = router.urls\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Example API Response"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "id": 1,\n  "name": "J.K. Rowling",\n  "books": [\n    "http://example.com/api/books/1/",\n    "http://example.com/api/books/2/"\n  ],\n  "url": "http://example.com/api/authors/1/"\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"advantages",children:"Advantages"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Provides clear navigation paths."}),"\n",(0,s.jsx)(n.li,{children:"Simplifies client-side integration by allowing direct resource lookup."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"nested-relationships",children:"Nested Relationships"}),"\n",(0,s.jsx)(n.h3,{id:"what-are-nested-relationships",children:"What are Nested Relationships?"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"In nested relationships, related data is embedded within the parent object\u2019s representation."}),"\n",(0,s.jsx)(n.li,{children:"Commonly used for complex objects or when related data is required as part of the API response."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"implementing-nested-relationships",children:"Implementing Nested Relationships"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Direct Nesting"}),":\nSerialize related objects directly using another serializer."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from rest_framework import serializers\nfrom myapp.models import Author, Book\n\nclass BookSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Book\n        fields = ['id', 'title']\n\nclass AuthorSerializer(serializers.ModelSerializer):\n    books = BookSerializer(many=True)  # Nested serializer\n\n    class Meta:\n        model = Author\n        fields = ['id', 'name', 'books']\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Example Response"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "id": 1,\n  "name": "J.K. Rowling",\n  "books": [\n    { "id": 1, "title": "Harry Potter and the Philosopher\'s Stone" },\n    { "id": 2, "title": "Harry Potter and the Chamber of Secrets" }\n  ]\n}\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Writable Nested Relationships"}),":\nTo support creating or updating nested objects, override ",(0,s.jsx)(n.code,{children:"create"})," and ",(0,s.jsx)(n.code,{children:"update"})," methods in the serializer."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class AuthorSerializer(serializers.ModelSerializer):\n    books = BookSerializer(many=True)\n\n    class Meta:\n        model = Author\n        fields = ['id', 'name', 'books']\n\n    def create(self, validated_data):\n        books_data = validated_data.pop('books')\n        author = Author.objects.create(**validated_data)\n        for book_data in books_data:\n            Book.objects.create(author=author, **book_data)\n        return author\n\n    def update(self, instance, validated_data):\n        books_data = validated_data.pop('books')\n        instance.name = validated_data.get('name', instance.name)\n        instance.save()\n\n        # Update or create books\n        for book_data in books_data:\n            book, created = Book.objects.update_or_create(\n                author=instance, id=book_data.get('id'),\n                defaults=book_data\n            )\n        return instance\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Depth Option"}),":\nUse the ",(0,s.jsx)(n.code,{children:"depth"})," option to automatically serialize related fields to a specified depth."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class AuthorSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Author\n        fields = ['id', 'name', 'books']\n        depth = 1\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Limitations"}),": ",(0,s.jsx)(n.code,{children:"depth"})," is read-only and doesn\u2019t support writable nested objects."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"key-considerations",children:"Key Considerations"}),"\n",(0,s.jsx)(n.h2,{id:"when-to-use-hyperlinked-vs-nested-relationships",children:"When to Use Hyperlinked vs Nested Relationships"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"Hyperlinked Relationships"})}),(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"Nested Relationships"})})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Useful for RESTful navigation."}),(0,s.jsx)(n.td,{children:"Better for complex, hierarchical data."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Keeps responses smaller."}),(0,s.jsx)(n.td,{children:"Can lead to larger payloads."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Best for referencing resources."}),(0,s.jsx)(n.td,{children:"Best for including detailed, related data."})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"performance",children:"Performance"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Hyperlinked Relationships"}),": May require multiple database queries to resolve related object URLs."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Nested Relationships"}),": Can lead to large payloads, so ensure efficient queries using techniques like ",(0,s.jsx)(n.code,{children:"select_related"})," and ",(0,s.jsx)(n.code,{children:"prefetch_related"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"validation",children:"Validation"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"When using writable nested serializers, ensure proper validation for related objects."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"example-combining-hyperlinked-and-nested-relationships",children:"Example: Combining Hyperlinked and Nested Relationships"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from rest_framework import serializers\nfrom myapp.models import Author, Book, Publisher\n\nclass BookSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:\n        model = Book\n        fields = ['url', 'id', 'title']\n\nclass PublisherSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Publisher\n        fields = ['id', 'name']\n\nclass AuthorSerializer(serializers.HyperlinkedModelSerializer):\n    books = BookSerializer(many=True)\n    publisher = PublisherSerializer()\n\n    class Meta:\n        model = Author\n        fields = ['url', 'id', 'name', 'books', 'publisher']\n"})})]})}function c(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>t});var r=i(96540);const s={},l=r.createContext(s);function a(e){const n=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(l.Provider,{value:n},e.children)}}}]);