"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[8482],{29784:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"programming/programming-languages/python/oop","title":"Object-Oriented Programming (OOP)","description":"Object-Oriented Programming (OOP) is a programming paradigm that uses \\"objects\\" to model real-world or abstract entities. Objects contain data (attributes) and behaviors (methods). Python supports OOP principles like encapsulation, inheritance, polymorphism, and abstraction, which help in creating structured, reusable, and modular code.","source":"@site/docs/programming/programming-languages/python/oop.md","sourceDirName":"programming/programming-languages/python","slug":"/programming/programming-languages/python/oop","permalink":"/docs/programming/programming-languages/python/oop","draft":false,"unlisted":false,"editUrl":"https://github.com/imdeepmind/imdeepmind.github.io/blob/main/docs/programming/programming-languages/python/oop.md","tags":[],"version":"current","lastUpdatedBy":"Abhishek Chatterjee","lastUpdatedAt":1749211863000,"sidebarPosition":9,"frontMatter":{"sidebar_position":9},"sidebar":"tutorialSidebar","previous":{"title":"Pythonic Code","permalink":"/docs/programming/programming-languages/python/pythonic-code"},"next":{"title":"Exception Handling","permalink":"/docs/programming/programming-languages/python/exceptions"}}');var i=s(74848),l=s(28453);const a={sidebar_position:9},r="Object-Oriented Programming (OOP)",o={},d=[{value:"Classes and Objects",id:"classes-and-objects",level:2},{value:"Example",id:"example",level:3},{value:"Encapsulation",id:"encapsulation",level:2},{value:"Example",id:"example-1",level:3},{value:"Inheritance",id:"inheritance",level:2},{value:"Multiple Inheritance",id:"multiple-inheritance",level:3},{value:"Method Resolution Order (MRO)",id:"method-resolution-order-mro",level:3},{value:"The <code>super()</code> Function",id:"the-super-function",level:3},{value:"Key Points",id:"key-points",level:3},{value:"Practical Example with super()",id:"practical-example-with-super",level:3},{value:"Polymorphism",id:"polymorphism",level:2},{value:"Example",id:"example-2",level:3},{value:"Abstraction",id:"abstraction",level:2},{value:"Example",id:"example-3",level:3},{value:"Dunder (Magic) Methods",id:"dunder-magic-methods",level:2},{value:"Common Dunder Methods:",id:"common-dunder-methods",level:3},{value:"Examples of Dunder Methods:",id:"examples-of-dunder-methods",level:3},{value:"Class vs. Instance Attributes and Methods",id:"class-vs-instance-attributes-and-methods",level:2},{value:"Example",id:"example-4",level:3},{value:"Static and Class Methods",id:"static-and-class-methods",level:2},{value:"Example",id:"example-5",level:3},{value:"super() Method in Python",id:"super-method-in-python",level:2},{value:"Key Points",id:"key-points-1",level:3},{value:"Syntax",id:"syntax",level:3},{value:"Examples",id:"examples",level:3},{value:"Using <code>super()</code> in Single Inheritance:",id:"using-super-in-single-inheritance",level:4},{value:"Using <code>super()</code> in Multiple Inheritance:",id:"using-super-in-multiple-inheritance",level:4},{value:"Using <code>super()</code> to Avoid Redundant Code:",id:"using-super-to-avoid-redundant-code",level:4},{value:"Why Use <code>super()</code>?",id:"why-use-super",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"object-oriented-programming-oop",children:"Object-Oriented Programming (OOP)"})}),"\n",(0,i.jsx)(n.p,{children:'Object-Oriented Programming (OOP) is a programming paradigm that uses "objects" to model real-world or abstract entities. Objects contain data (attributes) and behaviors (methods). Python supports OOP principles like encapsulation, inheritance, polymorphism, and abstraction, which help in creating structured, reusable, and modular code.'}),"\n",(0,i.jsx)(n.h2,{id:"classes-and-objects",children:"Classes and Objects"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Class:"})," A blueprint or template for creating objects. It defines attributes and methods that the objects created from the class will have."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Object:"})," An instance of a class with specific values assigned to its attributes."]}),"\n",(0,i.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class Dog:\n    # Class Attribute\n    species = "Canis lupus familiaris"\n\n    # Constructor (initializer)\n    def __init__(self, name, age):\n        # Instance Attributes\n        self.name = name\n        self.age = age\n\n    # Method\n    def bark(self):\n        return f"{self.name} says woof!"\n\n# Creating objects\ndog1 = Dog("Buddy", 3)\ndog2 = Dog("Max", 5)\n\nprint(dog1.bark())  # Output: Buddy says woof!\nprint(dog2.age)     # Output: 5\n'})}),"\n",(0,i.jsx)(n.h2,{id:"encapsulation",children:"Encapsulation"}),"\n",(0,i.jsxs)(n.p,{children:["Encapsulation is the practice of restricting direct access to the attributes of an object to keep data secure. Private attributes are created by prefixing the attribute name with an underscore (",(0,i.jsx)(n.code,{children:"_"}),") or double underscore (",(0,i.jsx)(n.code,{children:"__"}),"), signaling that these should not be accessed directly."]}),"\n",(0,i.jsx)(n.h3,{id:"example-1",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class BankAccount:\n    def __init__(self, owner, balance=0):\n        self.owner = owner\n        self.__balance = balance  # Private attribute\n\n    def deposit(self, amount):\n        self.__balance += amount\n\n    def withdraw(self, amount):\n        if amount <= self.__balance:\n            self.__balance -= amount\n        else:\n            print("Insufficient funds.")\n\n    def get_balance(self):\n        return self.__balance\n\naccount = BankAccount("Alice", 1000)\naccount.deposit(500)\nprint(account.get_balance())  # Output: 1500\n# account.__balance = 10000  # This would raise an AttributeError\n'})}),"\n",(0,i.jsx)(n.h2,{id:"inheritance",children:"Inheritance"}),"\n",(0,i.jsx)(n.p,{children:"Inheritance allows a class to inherit attributes and methods from another class."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class Animal:\n    def __init__(self, name):\n        self.name = name\n\n    def speak(self):\n        return "Sound"\n\nclass Dog(Animal):  # Inherits from Animal\n    def speak(self):  # Method overriding\n        return "Bark"\n\ndog = Dog("Buddy")\nprint(dog.name)    # "Buddy" (inherited)\nprint(dog.speak()) # "Bark"  (overridden)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"multiple-inheritance",children:"Multiple Inheritance"}),"\n",(0,i.jsx)(n.p,{children:"Python supports inheriting from multiple parent classes."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class Flyer:\n    def fly(self):\n        return "Flying"\n\nclass Swimmer:\n    def swim(self):\n        return "Swimming"\n\nclass Duck(Flyer, Swimmer):  # Multiple inheritance\n    pass\n\nduck = Duck()\nprint(duck.fly())  # "Flying"\nprint(duck.swim()) # "Swimming"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"method-resolution-order-mro",children:"Method Resolution Order (MRO)"}),"\n",(0,i.jsx)(n.p,{children:"MRO determines the order in which Python searches for methods in inheritance hierarchies."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class A:\n    def show(self):\n        print("A")\n\nclass B(A):\n    def show(self):\n        print("B")\n\nclass C(A):\n    def show(self):\n        print("C")\n\nclass D(B, C):\n    pass\n\nprint(D.mro())\n# Output: [D, B, C, A, object]\n# This is the search order for methods\n'})}),"\n",(0,i.jsxs)(n.h3,{id:"the-super-function",children:["The ",(0,i.jsx)(n.code,{children:"super()"})," Function"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"super()"})," provides a way to call methods from parent classes."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class Parent:\n    def __init__(self, name):\n        self.name = name\n\nclass Child(Parent):\n    def __init__(self, name, age):\n        super().__init__(name)  # Calls Parent.__init__\n        self.age = age\n\nchild = Child("Alice", 10)\nprint(child.name, child.age)  # "Alice 10"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"key-points",children:"Key Points"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Single Inheritance"}),": Simple parent-child relationship"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Multiple Inheritance"}),": Inherit from multiple classes (order matters)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"MRO"}),": Determines method lookup order (",(0,i.jsx)(n.code,{children:"Class.mro()"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"super()"}),": Delegates method calls to parent classes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Diamond Problem"}),": Handled by Python's MRO algorithm (C3 linearization)"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"practical-example-with-super",children:"Practical Example with super()"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class Person:\n    def __init__(self, name):\n        self.name = name\n\n    def greet(self):\n        return f"Hello, I\'m {self.name}"\n\nclass Employee(Person):\n    def __init__(self, name, id):\n        super().__init__(name)\n        self.id = id\n\n    def greet(self):\n        base_greet = super().greet()\n        return f"{base_greet} (ID: {self.id})"\n\nemp = Employee("John", "E123")\nprint(emp.greet())\n# "Hello, I\'m John (ID: E123)"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"polymorphism",children:"Polymorphism"}),"\n",(0,i.jsx)(n.p,{children:"Polymorphism allows objects of different classes to be treated as objects of a common superclass. It enables the same method to have different meanings based on the object calling it."}),"\n",(0,i.jsx)(n.h3,{id:"example-2",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def animal_sound(animal):\n    print(animal.sound())\n\ndog = Dog("Buddy")\ncat = Cat("Whiskers")\nanimal_sound(dog)  # Output: Buddy barks\nanimal_sound(cat)  # Output: Whiskers meows\n'})}),"\n",(0,i.jsx)(n.h2,{id:"abstraction",children:"Abstraction"}),"\n",(0,i.jsxs)(n.p,{children:["Abstraction hides the complexity of implementation and exposes only what is necessary. In Python, abstract classes can be created using the ",(0,i.jsx)(n.code,{children:"abc"})," (Abstract Base Class) module."]}),"\n",(0,i.jsx)(n.h3,{id:"example-3",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from abc import ABC, abstractmethod\n\nclass Shape(ABC):\n    @abstractmethod\n    def area(self):\n        pass\n\nclass Rectangle(Shape):\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\n    def area(self):\n        return self.width * self.height\n\nrectangle = Rectangle(5, 10)\nprint(rectangle.area())  # Output: 50\n"})}),"\n",(0,i.jsx)(n.h2,{id:"dunder-magic-methods",children:"Dunder (Magic) Methods"}),"\n",(0,i.jsx)(n.p,{children:"Dunder (double underscore) or magic methods allow We to define behaviors for built-in operators and functions for Our objects."}),"\n",(0,i.jsx)(n.h3,{id:"common-dunder-methods",children:"Common Dunder Methods:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"__init__"}),": Constructor to initialize objects."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"__str__"}),": Defines how the object is represented as a string."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"__len__"}),": Allows ",(0,i.jsx)(n.code,{children:"len(obj)"})," to be called on the object."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"__add__"}),": Defines behavior for the ",(0,i.jsx)(n.code,{children:"+"})," operator."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"__repr__"}),": Provides a detailed string representation of the object."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"__eq__"}),": Compares objects for equality."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"__lt__"}),": Compares objects for less-than relationship."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"examples-of-dunder-methods",children:"Examples of Dunder Methods:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class Book:\n    def __init__(self, title, author, pages):\n        self.title = title\n        self.author = author\n        self.pages = pages\n\n    def __str__(self):\n        return f"\'{self.title}\' by {self.author}"\n\n    def __len__(self):\n        return self.pages\n\n    def __eq__(self, other):\n        return self.title == other.title and self.author == other.author\n\n    def __lt__(self, other):\n        return self.pages < other.pages\n\nbook1 = Book("1984", "George Orwell", 328)\nbook2 = Book("Animal Farm", "George Orwell", 112)\nbook3 = Book("1984", "George Orwell", 328)\n\nprint(book1)            # Output: \'1984\' by George Orwell\nprint(len(book1))       # Output: 328\nprint(book1 == book3)   # Output: True\nprint(book1 < book2)    # Output: False\n'})}),"\n",(0,i.jsx)(n.h2,{id:"class-vs-instance-attributes-and-methods",children:"Class vs. Instance Attributes and Methods"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Instance Attributes:"})," Defined within ",(0,i.jsx)(n.code,{children:"__init__"})," and are specific to each object."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Class Attributes:"})," Shared across all instances of a class, defined directly in the class body."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"example-4",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class Car:\n    wheels = 4  # Class attribute\n\n    def __init__(self, color):\n        self.color = color  # Instance attribute\n\ncar1 = Car("red")\ncar2 = Car("blue")\n\nprint(car1.wheels)  # Output: 4\nprint(car2.color)   # Output: blue\n'})}),"\n",(0,i.jsx)(n.h2,{id:"static-and-class-methods",children:"Static and Class Methods"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Static Method:"})," A method that does not need access to the instance (",(0,i.jsx)(n.code,{children:"self"}),") or class (",(0,i.jsx)(n.code,{children:"cls"}),"). It is marked with the ",(0,i.jsx)(n.code,{children:"@staticmethod"})," decorator."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Class Method:"})," A method that works on the class level, marked with the ",(0,i.jsx)(n.code,{children:"@classmethod"})," decorator."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"example-5",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class Calculator:\n    @staticmethod\n    def add(x, y):\n        return x + y\n\n    @classmethod\n    def description(cls):\n        return f"This is a calculator class."\n\nprint(Calculator.add(5, 3))       # Output: 8\nprint(Calculator.description())   # Output: This is a calculator class.\n'})}),"\n",(0,i.jsx)(n.h2,{id:"super-method-in-python",children:"super() Method in Python"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"super()"})," function in Python is used to call methods from a parent class in a child class. It allows us to invoke a method from the superclass (parent class) without explicitly referring to the parent class by name. This is particularly useful in inheritance, where we want to extend or modify the behavior of a parent class method in a child class while still preserving the parent class's functionality."]}),"\n",(0,i.jsx)(n.h3,{id:"key-points-1",children:"Key Points"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Calling Parent Class Methods:"})," The ",(0,i.jsx)(n.code,{children:"super()"})," function is typically used to call the parent class's methods, especially in the ",(0,i.jsx)(n.code,{children:"__init__"})," constructor, where it is used to initialize the attributes of the parent class."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Multiple Inheritance:"})," In the case of multiple inheritance, ",(0,i.jsx)(n.code,{children:"super()"})," is used to ensure that the method resolution order (MRO) is followed and the correct method from the class hierarchy is called."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"syntax",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"super().method_name(arguments)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Here, ",(0,i.jsx)(n.code,{children:"super()"})," refers to the parent class, and ",(0,i.jsx)(n.code,{children:"method_name"})," is the method that We want to call."]}),"\n",(0,i.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,i.jsxs)(n.h4,{id:"using-super-in-single-inheritance",children:["Using ",(0,i.jsx)(n.code,{children:"super()"})," in Single Inheritance:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class Animal:\n    def __init__(self, name):\n        self.name = name\n\n    def speak(self):\n        print(f"{self.name} makes a sound.")\n\nclass Dog(Animal):\n    def __init__(self, name, breed):\n        # Calling the __init__ method of the parent class\n        super().__init__(name)\n        self.breed = breed\n\n    def speak(self):\n        super().speak()  # Calling the speak method of the parent class\n        print(f"{self.name} barks!")\n\ndog = Dog("Buddy", "Golden Retriever")\ndog.speak()\n# Output:\n# Buddy makes a sound.\n# Buddy barks!\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In this example, ",(0,i.jsx)(n.code,{children:"super().__init__(name)"})," calls the ",(0,i.jsx)(n.code,{children:"__init__"})," method of the ",(0,i.jsx)(n.code,{children:"Animal"})," class from the ",(0,i.jsx)(n.code,{children:"Dog"})," class. Similarly, ",(0,i.jsx)(n.code,{children:"super().speak()"})," calls the ",(0,i.jsx)(n.code,{children:"speak"})," method of the parent class ",(0,i.jsx)(n.code,{children:"Animal"}),"."]}),"\n",(0,i.jsxs)(n.h4,{id:"using-super-in-multiple-inheritance",children:["Using ",(0,i.jsx)(n.code,{children:"super()"})," in Multiple Inheritance:"]}),"\n",(0,i.jsxs)(n.p,{children:["In the case of multiple inheritance, ",(0,i.jsx)(n.code,{children:"super()"})," helps manage the method resolution order (MRO) to call methods from all parent classes properly."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class A:\n    def method(self):\n        print("Method of class A")\n\nclass B:\n    def method(self):\n        print("Method of class B")\n\nclass C(A, B):\n    def method(self):\n        super().method()  # Calls method from class A\n        print("Method of class C")\n\nc = C()\nc.method()\n# Output:\n# Method of class A\n# Method of class C\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In this case, the ",(0,i.jsx)(n.code,{children:"super()"})," call in class ",(0,i.jsx)(n.code,{children:"C"})," ensures that the ",(0,i.jsx)(n.code,{children:"method"})," from class ",(0,i.jsx)(n.code,{children:"A"})," is called before executing the logic in class ",(0,i.jsx)(n.code,{children:"C"}),". The MRO ensures that methods are called in the correct order in multiple inheritance."]}),"\n",(0,i.jsxs)(n.h4,{id:"using-super-to-avoid-redundant-code",children:["Using ",(0,i.jsx)(n.code,{children:"super()"})," to Avoid Redundant Code:"]}),"\n",(0,i.jsxs)(n.p,{children:["When overriding methods, ",(0,i.jsx)(n.code,{children:"super()"})," helps avoid redundant code by allowing We to call the parent class's implementation without re-implementing it."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class Base:\n    def print_message(self):\n        print("Message from Base class.")\n\nclass Derived(Base):\n    def print_message(self):\n        super().print_message()  # Calls the Base class method\n        print("Message from Derived class.")\n\nd = Derived()\nd.print_message()\n# Output:\n# Message from Base class.\n# Message from Derived class.\n'})}),"\n",(0,i.jsxs)(n.h3,{id:"why-use-super",children:["Why Use ",(0,i.jsx)(n.code,{children:"super()"}),"?"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Code Reusability:"})," It avoids duplicating code in the child class by calling the parent class methods directly."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Clearer Inheritance:"})," It promotes cleaner and more maintainable code by making inheritance explicit and less error-prone."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Multiple Inheritance Handling:"})," It helps manage method resolution order (MRO) effectively in complex inheritance scenarios."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>r});var t=s(96540);const i={},l=t.createContext(i);function a(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);