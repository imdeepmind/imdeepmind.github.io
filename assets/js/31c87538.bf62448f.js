"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[1591],{9803:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"databases/database-engineering/partitioning","title":"Database Partitioning","description":"Database partitioning is a technique used to divide a large table or database into smaller, more manageable pieces, called partitions. It helps improve performance, manageability, and scalability of the database system by reducing the amount of data a query must process and allowing for efficient data access patterns.","source":"@site/docs/databases/database-engineering/partitioning.md","sourceDirName":"databases/database-engineering","slug":"/databases/database-engineering/partitioning","permalink":"/docs/databases/database-engineering/partitioning","draft":false,"unlisted":false,"editUrl":"https://github.com/imdeepmind/imdeepmind.github.io/blob/main/docs/databases/database-engineering/partitioning.md","tags":[],"version":"current","lastUpdatedBy":"Abhishek Chatterjee","lastUpdatedAt":1735294169000,"sidebarPosition":8,"frontMatter":{"sidebar_position":8},"sidebar":"tutorialSidebar","previous":{"title":"Query Optimization","permalink":"/docs/databases/database-engineering/query-optimization"},"next":{"title":"Database Sharding","permalink":"/docs/databases/database-engineering/sharding"}}');var a=i(4848),t=i(8453);const r={sidebar_position:8},l="Database Partitioning",d={},o=[{value:"Why Use Database Partitioning?",id:"why-use-database-partitioning",level:2},{value:"Types of Database Partitioning",id:"types-of-database-partitioning",level:2},{value:"Range Partitioning",id:"range-partitioning",level:3},{value:"List Partitioning",id:"list-partitioning",level:3},{value:"Hash Partitioning",id:"hash-partitioning",level:3},{value:"Composite Partitioning",id:"composite-partitioning",level:3},{value:"Sub-Partitioning",id:"sub-partitioning",level:3},{value:"How Partitioning Works in PostgreSQL",id:"how-partitioning-works-in-postgresql",level:2},{value:"Partition Table Creation",id:"partition-table-creation",level:3},{value:"Partition Pruning",id:"partition-pruning",level:3},{value:"Indexes on Partitions",id:"indexes-on-partitions",level:3},{value:"Constraints",id:"constraints",level:3},{value:"Partitioning Use Cases",id:"partitioning-use-cases",level:2},{value:"Advantages of Partitioning",id:"advantages-of-partitioning",level:2},{value:"Disadvantages of Partitioning",id:"disadvantages-of-partitioning",level:2},{value:"Querying Partitioned Tables in PostgreSQL",id:"querying-partitioned-tables-in-postgresql",level:2},{value:"Partitioning vs Sharding",id:"partitioning-vs-sharding",level:2}];function c(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"database-partitioning",children:"Database Partitioning"})}),"\n",(0,a.jsxs)(e.p,{children:["Database partitioning is a technique used to divide a large table or database into smaller, more manageable pieces, called ",(0,a.jsx)(e.strong,{children:"partitions"}),". It helps improve performance, manageability, and scalability of the database system by reducing the amount of data a query must process and allowing for efficient data access patterns."]}),"\n",(0,a.jsx)(e.h2,{id:"why-use-database-partitioning",children:"Why Use Database Partitioning?"}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.strong,{children:"Improved Query Performance"}),":"]}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"By dividing the table into smaller partitions, queries can target only the relevant subset of data, reducing query execution time."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.strong,{children:"Efficient Data Management"}),":"]}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Easier to manage smaller partitions than a single large table, especially for maintenance tasks like backups or archiving."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.strong,{children:"Scalability"}),":"]}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Allows horizontal scaling by spreading data across multiple partitions or servers."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.strong,{children:"Data Locality"}),":"]}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Queries can benefit from partition pruning (only accessing relevant partitions) and parallel execution."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.strong,{children:"Improved Maintenance"}),":"]}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Maintenance tasks (e.g., VACUUM, ANALYZE, REINDEX) can be performed on individual partitions rather than the entire table."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"types-of-database-partitioning",children:"Types of Database Partitioning"}),"\n",(0,a.jsx)(e.h3,{id:"range-partitioning",children:"Range Partitioning"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:"Divides data based on a range of values in a column (e.g., date, number)."}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:"Example:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-sql",children:"CREATE TABLE sales (\n    id SERIAL,\n    sale_date DATE,\n    amount NUMERIC\n) PARTITION BY RANGE (sale_date);\n\nCREATE TABLE sales_2023 PARTITION OF sales FOR VALUES FROM ('2023-01-01') TO ('2024-01-01');\nCREATE TABLE sales_2022 PARTITION OF sales FOR VALUES FROM ('2022-01-01') TO ('2023-01-01');\n"})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(e.h3,{id:"list-partitioning",children:"List Partitioning"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:"Divides data based on a predefined list of values in a column."}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:"Example:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-sql",children:"CREATE TABLE employees (\n    id SERIAL,\n    department TEXT,\n    name TEXT\n) PARTITION BY LIST (department);\n\nCREATE TABLE employees_sales PARTITION OF employees FOR VALUES IN ('Sales');\nCREATE TABLE employees_hr PARTITION OF employees FOR VALUES IN ('HR');\n"})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(e.h3,{id:"hash-partitioning",children:"Hash Partitioning"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:"Data is distributed using a hash function on the column value, typically for even distribution across partitions."}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:"Example:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-sql",children:"CREATE TABLE orders (\n    id SERIAL,\n    customer_id INT,\n    amount NUMERIC\n) PARTITION BY HASH (customer_id);\n\nCREATE TABLE orders_p1 PARTITION OF orders FOR VALUES WITH (MODULUS 4, REMAINDER 0);\nCREATE TABLE orders_p2 PARTITION OF orders FOR VALUES WITH (MODULUS 4, REMAINDER 1);\n"})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(e.h3,{id:"composite-partitioning",children:"Composite Partitioning"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Combines two or more partitioning strategies (e.g., range + hash)."}),"\n",(0,a.jsxs)(e.li,{children:["Example:","\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-sql",children:"CREATE TABLE metrics (\n    id SERIAL,\n    metric_date DATE,\n    region TEXT\n) PARTITION BY RANGE (metric_date) SUBPARTITION BY LIST (region);\n"})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(e.h3,{id:"sub-partitioning",children:"Sub-Partitioning"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Further divides individual partitions into subpartitions."}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"how-partitioning-works-in-postgresql",children:"How Partitioning Works in PostgreSQL"}),"\n",(0,a.jsx)(e.h3,{id:"partition-table-creation",children:"Partition Table Creation"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"The parent table is defined with a partitioning key."}),"\n",(0,a.jsx)(e.li,{children:"Child tables (partitions) inherit the schema from the parent and store subsets of the data."}),"\n"]}),"\n",(0,a.jsx)(e.h3,{id:"partition-pruning",children:"Partition Pruning"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"PostgreSQL optimizes queries by accessing only the relevant partitions based on the partition key."}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:"Example:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-sql",children:"SELECT * FROM sales WHERE sale_date BETWEEN '2023-01-01' AND '2023-12-31';\n"})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:["The query will scan only the ",(0,a.jsx)(e.code,{children:"sales_2023"})," partition."]}),"\n"]}),"\n",(0,a.jsx)(e.h3,{id:"indexes-on-partitions",children:"Indexes on Partitions"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Indexes can be created individually on each partition for faster lookups."}),"\n"]}),"\n",(0,a.jsx)(e.h3,{id:"constraints",children:"Constraints"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Partitions can have constraints to enforce data integrity and prevent overlapping ranges or lists."}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"partitioning-use-cases",children:"Partitioning Use Cases"}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.strong,{children:"Time-Series Data"}),":"]}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Logs, events, or metrics data stored by date or time range."}),"\n",(0,a.jsx)(e.li,{children:"Example: A log table partitioned by month."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.strong,{children:"Archiving"}),":"]}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Older data can be stored in separate partitions for easier management and archiving."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.strong,{children:"Geographic Data"}),":"]}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Data divided by geographic regions for better data locality."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.strong,{children:"Large Tables with Frequent Queries"}),":"]}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Partitioning helps reduce query execution time for tables with millions or billions of rows."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"advantages-of-partitioning",children:"Advantages of Partitioning"}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.strong,{children:"Improved Query Performance"}),":"]}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Partition pruning ensures only relevant partitions are scanned, reducing I/O overhead."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.strong,{children:"Easier Data Management"}),":"]}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Individual partitions can be archived, backed up, or dropped without affecting the entire table."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.strong,{children:"Better Maintenance"}),":"]}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Maintenance tasks can be done at the partition level, reducing locking and downtime."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.strong,{children:"Supports Parallelism"}),":"]}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Queries can execute in parallel across partitions for faster results."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"disadvantages-of-partitioning",children:"Disadvantages of Partitioning"}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.strong,{children:"Increased Complexity"}),":"]}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Requires careful planning to define partitioning strategy and maintain partitions."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.strong,{children:"Storage Overhead"}),":"]}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Each partition may have its own metadata and indexes, increasing storage requirements."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.strong,{children:"Partition Key Limitation"}),":"]}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Queries that don\u2019t use the partition key may scan all partitions, negating the benefits."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"querying-partitioned-tables-in-postgresql",children:"Querying Partitioned Tables in PostgreSQL"}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.strong,{children:"Insert Data"}),":"]}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Data is automatically routed to the appropriate partition based on the partition key."}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-sql",children:"INSERT INTO sales (sale_date, amount) VALUES ('2023-05-01', 500);\n"})}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.strong,{children:"Query with Partition Pruning"}),":"]}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Queries with filters on the partition key will scan only relevant partitions."}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-sql",children:"SELECT * FROM sales WHERE sale_date >= '2023-01-01' AND sale_date < '2023-02-01';\n"})}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.strong,{children:"Manual Partition Targeting"}),":"]}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"You can directly query a specific partition if needed."}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-sql",children:"SELECT * FROM sales_2023 WHERE amount > 1000;\n"})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"partitioning-vs-sharding",children:"Partitioning vs Sharding"}),"\n",(0,a.jsxs)(e.table,{children:[(0,a.jsx)(e.thead,{children:(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.th,{children:(0,a.jsx)(e.strong,{children:"Aspect"})}),(0,a.jsx)(e.th,{children:(0,a.jsx)(e.strong,{children:"Partitioning"})}),(0,a.jsx)(e.th,{children:(0,a.jsx)(e.strong,{children:"Sharding"})})]})}),(0,a.jsxs)(e.tbody,{children:[(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{children:(0,a.jsx)(e.strong,{children:"Definition"})}),(0,a.jsx)(e.td,{children:"Divides data within a single database."}),(0,a.jsx)(e.td,{children:"Divides data across multiple databases/servers."})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{children:(0,a.jsx)(e.strong,{children:"Use Case"})}),(0,a.jsx)(e.td,{children:"Optimizing queries within a single database."}),(0,a.jsx)(e.td,{children:"Horizontal scaling for large-scale systems."})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{children:(0,a.jsx)(e.strong,{children:"Data Location"})}),(0,a.jsx)(e.td,{children:"All partitions reside in the same database."}),(0,a.jsx)(e.td,{children:"Data is distributed across multiple nodes."})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{children:(0,a.jsx)(e.strong,{children:"Complexity"})}),(0,a.jsx)(e.td,{children:"Less complex to set up and manage."}),(0,a.jsx)(e.td,{children:"More complex, requires distributed system management."})]})]})]})]})}function h(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(c,{...n})}):c(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>r,x:()=>l});var s=i(6540);const a={},t=s.createContext(a);function r(n){const e=s.useContext(t);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:r(n.components),s.createElement(t.Provider,{value:e},n.children)}}}]);