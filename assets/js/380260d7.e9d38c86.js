"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[2241],{62500:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>g,frontMatter:()=>t,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"programming/programming-languages/python/args-kwargs","title":"*args and **kwargs","description":"In Python, args and *kwargs are used to handle variable numbers of arguments passed to a function. These allow We to write more flexible functions that can accept a range of input values without needing to explicitly define every parameter.","source":"@site/docs/programming/programming-languages/python/args-kwargs.md","sourceDirName":"programming/programming-languages/python","slug":"/programming/programming-languages/python/args-kwargs","permalink":"/docs/programming/programming-languages/python/args-kwargs","draft":false,"unlisted":false,"editUrl":"https://github.com/imdeepmind/imdeepmind.github.io/blob/main/docs/programming/programming-languages/python/args-kwargs.md","tags":[],"version":"current","lastUpdatedBy":"Abhishek Chatterjee","lastUpdatedAt":1755253604000,"sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Loops, Control Structures, and Functions","permalink":"/docs/programming/programming-languages/python/loop-control-functions"},"next":{"title":"Standard Library","permalink":"/docs/programming/programming-languages/python/standard-library"}}');var a=r(74848),i=r(28453);const t={sidebar_position:6},o="*args and **kwargs",d={},l=[{value:"<code>*args</code> (Non-keyword Arguments)",id:"args-non-keyword-arguments",level:2},{value:"<code>**kwargs</code> (Keyword Arguments)",id:"kwargs-keyword-arguments",level:2},{value:"Combining <code>*args</code> and <code>**kwargs</code>",id:"combining-args-and-kwargs",level:2},{value:"Key Points to Remember",id:"key-points-to-remember",level:2},{value:"Example: Function with Default Arguments, <code>*args</code>, and <code>**kwargs</code>",id:"example-function-with-default-arguments-args-and-kwargs",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsxs)(n.h1,{id:"args-and-kwargs",children:[(0,a.jsx)(n.code,{children:"*args"})," and ",(0,a.jsx)(n.code,{children:"**kwargs"})]})}),"\n",(0,a.jsxs)(n.p,{children:["In Python, ",(0,a.jsx)(n.code,{children:"*args"})," and ",(0,a.jsx)(n.code,{children:"**kwargs"})," are used to handle variable numbers of arguments passed to a function. These allow We to write more flexible functions that can accept a range of input values without needing to explicitly define every parameter."]}),"\n",(0,a.jsxs)(n.h2,{id:"args-non-keyword-arguments",children:[(0,a.jsx)(n.code,{children:"*args"})," (Non-keyword Arguments)"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Definition"}),": The ",(0,a.jsx)(n.code,{children:"*args"})," syntax allows a function to accept an arbitrary number of positional arguments."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"How it works"}),": The ",(0,a.jsx)(n.code,{children:"*args"})," collects additional positional arguments passed to the function into a tuple."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Use case"}),": When we do not know in advance how many arguments will be passed to the function."]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def print_args(*args):\n    for arg in args:\n        print(arg)\n\nprint_args(1, 2, 3, 4)\n# Output:\n# 1\n# 2\n# 3\n# 4\n"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Important Notes"}),":","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"args"})," is just a convention. We can name it anything, but the ",(0,a.jsx)(n.code,{children:"*"})," is required."]}),"\n",(0,a.jsxs)(n.li,{children:["It must be placed at the end of the function signature (after regular parameters and before ",(0,a.jsx)(n.code,{children:"**kwargs"})," if both are used)."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.h2,{id:"kwargs-keyword-arguments",children:[(0,a.jsx)(n.code,{children:"**kwargs"})," (Keyword Arguments)"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Definition"}),": The ",(0,a.jsx)(n.code,{children:"**kwargs"})," syntax allows a function to accept an arbitrary number of keyword arguments (arguments passed by name)."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"How it works"}),": The ",(0,a.jsx)(n.code,{children:"**kwargs"})," collects keyword arguments into a dictionary, where the keys are the argument names and the values are the corresponding values passed to the function."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Use case"}),": When we need to pass a varying number of named arguments to a function."]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def print_kwargs(**kwargs):\n    for key, value in kwargs.items():\n        print(f'{key}: {value}')\n\nprint_kwargs(name=\"Alice\", age=25)\n# Output:\n# name: Alice\n# age: 25\n"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Important Notes"}),":","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"kwargs"})," is a convention, but We can name it anything We like, just like ",(0,a.jsx)(n.code,{children:"*args"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["It must also be placed after regular parameters and ",(0,a.jsx)(n.code,{children:"*args"})," (if both are used)."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.h2,{id:"combining-args-and-kwargs",children:["Combining ",(0,a.jsx)(n.code,{children:"*args"})," and ",(0,a.jsx)(n.code,{children:"**kwargs"})]}),"\n",(0,a.jsxs)(n.p,{children:["We can use both ",(0,a.jsx)(n.code,{children:"*args"})," and ",(0,a.jsx)(n.code,{children:"**kwargs"})," in the same function to accept both variable positional and keyword arguments."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'def greet(name, *args, **kwargs):\n    print(f"Hello {name}!")\n    if args:\n        print("Positional arguments:", args)\n    if kwargs:\n        print("Keyword arguments:", kwargs)\n\ngreet("Alice", 25, "Engineer", country="USA", city="New York")\n# Output:\n# Hello Alice!\n# Positional arguments: (25, \'Engineer\')\n# Keyword arguments: {\'country\': \'USA\', \'city\': \'New York\'}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"key-points-to-remember",children:"Key Points to Remember"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Order of Arguments"}),":"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Normal parameters first."}),"\n",(0,a.jsxs)(n.li,{children:["Then ",(0,a.jsx)(n.code,{children:"*args"})," for variable positional arguments."]}),"\n",(0,a.jsxs)(n.li,{children:["Then ",(0,a.jsx)(n.code,{children:"**kwargs"})," for variable keyword arguments."]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def func(param1, param2, *args, **kwargs):\n    pass\n"})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsxs)(n.strong,{children:["Single ",(0,a.jsx)(n.code,{children:"*"})," in function"]}),": Sometimes, a single ",(0,a.jsx)(n.code,{children:"*"})," is used in function signatures to indicate that all following parameters must be specified as keyword arguments."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def func(param1, param2, *, kwarg1, kwarg2):\n    pass\n"})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Default Values"}),": We can combine default values with ",(0,a.jsx)(n.code,{children:"*args"})," and ",(0,a.jsx)(n.code,{children:"**kwargs"}),". Just ensure the default arguments appear before ",(0,a.jsx)(n.code,{children:"*args"}),"."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.h2,{id:"example-function-with-default-arguments-args-and-kwargs",children:["Example: Function with Default Arguments, ",(0,a.jsx)(n.code,{children:"*args"}),", and ",(0,a.jsx)(n.code,{children:"**kwargs"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'def describe_person(name, age=30, *args, **kwargs):\n    print(f"Name: {name}, Age: {age}")\n    if args:\n        print("Additional info:", args)\n    if kwargs:\n        print("Keyword info:", kwargs)\n\ndescribe_person("Alice", 25, "Engineer", "Music lover", country="USA", city="New York")\n# Output:\n# Name: Alice, Age: 25\n# Additional info: (\'Engineer\', \'Music lover\')\n# Keyword info: {\'country\': \'USA\', \'city\': \'New York\'}\n'})}),"\n",(0,a.jsx)(n.p,{children:"This makes Python functions highly flexible and allows for handling a wide range of argument types efficiently."})]})}function g(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>o});var s=r(96540);const a={},i=s.createContext(a);function t(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);