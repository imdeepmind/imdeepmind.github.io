"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[270],{2943:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"programming-languages/python/pythonic-code","title":"Pythonic Code","description":"\\"Pythonic\\" refers to writing code that adheres to the conventions, idioms, and best practices that are considered natural and efficient in Python. Pythonic code is not only functional but also elegant, readable, and maintainable. Writing Pythonic code typically involves using the language\u2019s features in a way that is most efficient and idiomatic, making it easy to understand for others who are familiar with Python.","source":"@site/docs/programming-languages/python/pythonic-code.md","sourceDirName":"programming-languages/python","slug":"/programming-languages/python/pythonic-code","permalink":"/docs/programming-languages/python/pythonic-code","draft":false,"unlisted":false,"editUrl":"https://github.com/imdeepmind/imdeepmind.github.io/blob/main/docs/programming-languages/python/pythonic-code.md","tags":[],"version":"current","lastUpdatedBy":"Abhishek Chatterjee","lastUpdatedAt":1735114475000,"sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Standard Library","permalink":"/docs/programming-languages/python/standard-library"},"next":{"title":"Introduction","permalink":"/docs/programming-languages/javascript/introduction"}}');var s=i(4848),o=i(8453);const a={sidebar_position:6},r="Pythonic Code",l={},d=[{value:"The Zen of Python",id:"the-zen-of-python",level:2},{value:"&quot;Beautiful is better than ugly.&quot;",id:"beautiful-is-better-than-ugly",level:3},{value:"&quot;Explicit is better than implicit.&quot;",id:"explicit-is-better-than-implicit",level:3},{value:"&quot;Simple is better than complex.&quot;",id:"simple-is-better-than-complex",level:3},{value:"&quot;Readability counts.&quot;",id:"readability-counts",level:3},{value:"&quot;There should be one\u2014and preferably only one\u2014obvious way to do it.&quot;",id:"there-should-be-oneand-preferably-only-oneobvious-way-to-do-it",level:3},{value:"&quot;In the face of ambiguity, refuse the temptation to guess.&quot;",id:"in-the-face-of-ambiguity-refuse-the-temptation-to-guess",level:3},{value:"&quot;If the implementation is hard to explain, it&#39;s a bad idea.&quot;",id:"if-the-implementation-is-hard-to-explain-its-a-bad-idea",level:3},{value:"&quot;Namespaces are one honking great idea\u2014let&#39;s do more of those!&quot;",id:"namespaces-are-one-honking-great-idealets-do-more-of-those",level:3},{value:"List Comprehensions",id:"list-comprehensions",level:2},{value:"Syntax of List Comprehensions:",id:"syntax-of-list-comprehensions",level:3},{value:"Example 1: Basic List Comprehension",id:"example-1-basic-list-comprehension",level:3},{value:"Example 2: List Comprehension with Condition",id:"example-2-list-comprehension-with-condition",level:3},{value:"Example 3: Nested List Comprehension",id:"example-3-nested-list-comprehension",level:3},{value:"Generator Expressions",id:"generator-expressions",level:2},{value:"Syntax of Generator Expressions:",id:"syntax-of-generator-expressions",level:3},{value:"Example 1: Basic Generator Expression",id:"example-1-basic-generator-expression",level:3},{value:"Example 2: Using <code>sum()</code> with Generator Expression",id:"example-2-using-sum-with-generator-expression",level:3},{value:"Why Use Generators?",id:"why-use-generators",level:3},{value:"Unpacking",id:"unpacking",level:2},{value:"Example 1: Basic Unpacking",id:"example-1-basic-unpacking",level:3},{value:"Example 2: Extended Unpacking (Python 3.0+)",id:"example-2-extended-unpacking-python-30",level:3},{value:"Example 3: Unpacking in Function Arguments",id:"example-3-unpacking-in-function-arguments",level:3},{value:"Example 4: Unpacking in Loops",id:"example-4-unpacking-in-loops",level:3},{value:"Other Pythonic Practices",id:"other-pythonic-practices",level:2},{value:"Use <code>enumerate()</code> Instead of <code>range()</code> for Indexing",id:"use-enumerate-instead-of-range-for-indexing",level:3},{value:"Use <code>zip()</code> for Pairing Iterables",id:"use-zip-for-pairing-iterables",level:3},{value:"Avoid Using <code>Lambda</code> for Simple Functions",id:"avoid-using-lambda-for-simple-functions",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"pythonic-code",children:"Pythonic Code"})}),"\n",(0,s.jsxs)(n.p,{children:['"',(0,s.jsx)(n.strong,{children:"Pythonic"}),'" refers to writing code that adheres to the conventions, idioms, and best practices that are considered natural and efficient in Python. Pythonic code is not only functional but also elegant, readable, and maintainable. Writing Pythonic code typically involves using the language\u2019s features in a way that is most efficient and idiomatic, making it easy to understand for others who are familiar with Python.']}),"\n",(0,s.jsxs)(n.p,{children:["In this note, we\u2019ll explore the key ideas behind Pythonic code, focusing on Python's ",(0,s.jsx)(n.strong,{children:"Zen of Python"}),", ",(0,s.jsx)(n.strong,{children:"list comprehensions"}),", ",(0,s.jsx)(n.strong,{children:"generator expressions"}),", and ",(0,s.jsx)(n.strong,{children:"unpacking"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"the-zen-of-python",children:"The Zen of Python"}),"\n",(0,s.jsxs)(n.p,{children:["The Zen of Python is a collection of guiding principles for writing clean, readable, and simple Python code. It can be accessed by typing ",(0,s.jsx)(n.code,{children:"import this"})," in a Python shell, and it provides a succinct overview of Python\u2019s philosophy."]}),"\n",(0,s.jsx)(n.p,{children:"Here\u2019s a summary of some key points from the Zen of Python:"}),"\n",(0,s.jsx)(n.h3,{id:"beautiful-is-better-than-ugly",children:'"Beautiful is better than ugly."'}),"\n",(0,s.jsx)(n.p,{children:"Code should be easy to read and aesthetically pleasing, even if it is slightly longer."}),"\n",(0,s.jsx)(n.h3,{id:"explicit-is-better-than-implicit",children:'"Explicit is better than implicit."'}),"\n",(0,s.jsx)(n.p,{children:"Code should be clear and easy to understand. Avoid shortcuts or tricks that obscure the meaning of your code."}),"\n",(0,s.jsx)(n.h3,{id:"simple-is-better-than-complex",children:'"Simple is better than complex."'}),"\n",(0,s.jsx)(n.p,{children:"Favor simplicity over complexity, unless complexity is absolutely necessary."}),"\n",(0,s.jsx)(n.h3,{id:"readability-counts",children:'"Readability counts."'}),"\n",(0,s.jsx)(n.p,{children:"Code should be written in a way that it\u2019s easily readable by others (and yourself in the future)."}),"\n",(0,s.jsx)(n.h3,{id:"there-should-be-oneand-preferably-only-oneobvious-way-to-do-it",children:'"There should be one\u2014and preferably only one\u2014obvious way to do it."'}),"\n",(0,s.jsx)(n.p,{children:"Python emphasizes having one clear, consistent way to accomplish a task, which reduces confusion."}),"\n",(0,s.jsx)(n.h3,{id:"in-the-face-of-ambiguity-refuse-the-temptation-to-guess",children:'"In the face of ambiguity, refuse the temptation to guess."'}),"\n",(0,s.jsx)(n.p,{children:"If something is unclear, it\u2019s better to be explicit and avoid assumptions."}),"\n",(0,s.jsx)(n.h3,{id:"if-the-implementation-is-hard-to-explain-its-a-bad-idea",children:'"If the implementation is hard to explain, it\'s a bad idea."'}),"\n",(0,s.jsx)(n.p,{children:"Python favors simplicity and clarity. If a solution is too complex to explain, it's probably not the right approach."}),"\n",(0,s.jsx)(n.h3,{id:"namespaces-are-one-honking-great-idealets-do-more-of-those",children:'"Namespaces are one honking great idea\u2014let\'s do more of those!"'}),"\n",(0,s.jsx)(n.p,{children:"Python supports clear separation of concerns using namespaces, modules, and classes, which should be leveraged for better code organization."}),"\n",(0,s.jsx)(n.h2,{id:"list-comprehensions",children:"List Comprehensions"}),"\n",(0,s.jsx)(n.p,{children:"List comprehensions are a concise, readable, and efficient way to create lists in Python. They allow you to generate a new list by applying an expression to each element of an iterable, optionally filtering elements based on a condition."}),"\n",(0,s.jsx)(n.h3,{id:"syntax-of-list-comprehensions",children:"Syntax of List Comprehensions:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"[expression for item in iterable if condition]\n"})}),"\n",(0,s.jsx)(n.h3,{id:"example-1-basic-list-comprehension",children:"Example 1: Basic List Comprehension"}),"\n",(0,s.jsx)(n.p,{children:"Suppose you want to create a list of squares of numbers from 0 to 9."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"squares = [x**2 for x in range(10)]\nprint(squares)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Output:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n"})}),"\n",(0,s.jsx)(n.h3,{id:"example-2-list-comprehension-with-condition",children:"Example 2: List Comprehension with Condition"}),"\n",(0,s.jsxs)(n.p,{children:["You can add an ",(0,s.jsx)(n.code,{children:"if"})," statement to filter elements."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"even_squares = [x**2 for x in range(10) if x % 2 == 0]\nprint(even_squares)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Output:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"[0, 4, 16, 36, 64]\n"})}),"\n",(0,s.jsx)(n.h3,{id:"example-3-nested-list-comprehension",children:"Example 3: Nested List Comprehension"}),"\n",(0,s.jsx)(n.p,{children:"List comprehensions can also be nested for working with multidimensional lists."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nflattened = [item for row in matrix for item in row]\nprint(flattened)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Output:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"[1, 2, 3, 4, 5, 6, 7, 8, 9]\n"})}),"\n",(0,s.jsx)(n.h2,{id:"generator-expressions",children:"Generator Expressions"}),"\n",(0,s.jsx)(n.p,{children:"Generator expressions are similar to list comprehensions but are more memory efficient. Instead of creating an entire list in memory, a generator yields items one by one, which is especially useful when working with large datasets or infinite sequences."}),"\n",(0,s.jsx)(n.h3,{id:"syntax-of-generator-expressions",children:"Syntax of Generator Expressions:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"(expression for item in iterable if condition)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"example-1-basic-generator-expression",children:"Example 1: Basic Generator Expression"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"gen = (x**2 for x in range(10))\nprint(next(gen))  # Output: 0\nprint(next(gen))  # Output: 1\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The generator doesn't evaluate all values at once, only when ",(0,s.jsx)(n.code,{children:"next()"})," is called."]}),"\n",(0,s.jsxs)(n.h3,{id:"example-2-using-sum-with-generator-expression",children:["Example 2: Using ",(0,s.jsx)(n.code,{children:"sum()"})," with Generator Expression"]}),"\n",(0,s.jsxs)(n.p,{children:["Generators are commonly used with functions like ",(0,s.jsx)(n.code,{children:"sum()"}),", ",(0,s.jsx)(n.code,{children:"min()"}),", and ",(0,s.jsx)(n.code,{children:"max()"})," to efficiently process large collections."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"gen = (x**2 for x in range(10))\ntotal = sum(gen)\nprint(total)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Output:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"285\n"})}),"\n",(0,s.jsx)(n.h3,{id:"why-use-generators",children:"Why Use Generators?"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Memory Efficiency"}),": They do not store the entire list in memory, making them more efficient for large datasets."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Lazy Evaluation"}),": They produce items only when needed (on demand), which can be helpful when working with large streams of data."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"unpacking",children:"Unpacking"}),"\n",(0,s.jsx)(n.p,{children:"Unpacking is a Python feature that allows you to assign values from an iterable to variables in a concise and readable way. It works with tuples, lists, and other iterable objects, and can be used in various contexts."}),"\n",(0,s.jsx)(n.h3,{id:"example-1-basic-unpacking",children:"Example 1: Basic Unpacking"}),"\n",(0,s.jsx)(n.p,{children:"Unpacking can be used to assign variables from a tuple or list:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"point = (3, 4)\nx, y = point\nprint(x, y)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Output:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"3 4\n"})}),"\n",(0,s.jsx)(n.h3,{id:"example-2-extended-unpacking-python-30",children:"Example 2: Extended Unpacking (Python 3.0+)"}),"\n",(0,s.jsx)(n.p,{children:"Python 3 introduced extended unpacking, allowing you to capture multiple values in a list during unpacking."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"a, *middle, b = [1, 2, 3, 4, 5]\nprint(a, middle, b)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Output:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"1 [2, 3, 4] 5\n"})}),"\n",(0,s.jsx)(n.h3,{id:"example-3-unpacking-in-function-arguments",children:"Example 3: Unpacking in Function Arguments"}),"\n",(0,s.jsx)(n.p,{children:"You can also use unpacking when passing arguments to functions."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def add(x, y):\n    return x + y\n\nargs = (3, 5)\nprint(add(*args))\n"})}),"\n",(0,s.jsx)(n.p,{children:"Output:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"8\n"})}),"\n",(0,s.jsx)(n.h3,{id:"example-4-unpacking-in-loops",children:"Example 4: Unpacking in Loops"}),"\n",(0,s.jsx)(n.p,{children:"You can use unpacking in loops when iterating over a sequence of tuples or lists."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"pairs = [(1, 'a'), (2, 'b'), (3, 'c')]\nfor num, letter in pairs:\n    print(num, letter)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Output:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"1 a\n2 b\n3 c\n"})}),"\n",(0,s.jsx)(n.h2,{id:"other-pythonic-practices",children:"Other Pythonic Practices"}),"\n",(0,s.jsx)(n.p,{children:"In addition to the key topics discussed above, here are some other Pythonic practices:"}),"\n",(0,s.jsxs)(n.h3,{id:"use-enumerate-instead-of-range-for-indexing",children:["Use ",(0,s.jsx)(n.code,{children:"enumerate()"})," Instead of ",(0,s.jsx)(n.code,{children:"range()"})," for Indexing"]}),"\n",(0,s.jsxs)(n.p,{children:["When you need both the index and the value from a list, using ",(0,s.jsx)(n.code,{children:"enumerate()"})," is more Pythonic than manually managing the index."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"for idx, value in enumerate(['a', 'b', 'c']):\n    print(idx, value)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Output:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"0 a\n1 b\n2 c\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"use-zip-for-pairing-iterables",children:["Use ",(0,s.jsx)(n.code,{children:"zip()"})," for Pairing Iterables"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"zip()"})," function is a Pythonic way to iterate over multiple iterables simultaneously."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"names = ['Alice', 'Bob', 'Charlie']\nages = [25, 30, 35]\nfor name, age in zip(names, ages):\n    print(name, age)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Output:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Alice 25\nBob 30\nCharlie 35\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"avoid-using-lambda-for-simple-functions",children:["Avoid Using ",(0,s.jsx)(n.code,{children:"Lambda"})," for Simple Functions"]}),"\n",(0,s.jsxs)(n.p,{children:["While ",(0,s.jsx)(n.code,{children:"lambda"})," functions are concise, they can make the code harder to read if overused. For simple functions, it\u2019s often better to define a regular function using ",(0,s.jsx)(n.code,{children:"def"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>r});var t=i(6540);const s={},o=t.createContext(s);function a(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);