"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[8730],{81032:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"frameworks-libraries/flask/request-response-cycle","title":"Request and Response Cycle","description":"The Request-Response Cycle is the core of web application behavior in Flask. It defines how Flask handles incoming HTTP requests from clients (like web browsers) and sends back appropriate responses. Understanding this cycle is critical for building efficient and functional Flask applications.","source":"@site/docs/frameworks-libraries/flask/request-response-cycle.md","sourceDirName":"frameworks-libraries/flask","slug":"/frameworks-libraries/flask/request-response-cycle","permalink":"/docs/frameworks-libraries/flask/request-response-cycle","draft":false,"unlisted":false,"editUrl":"https://github.com/imdeepmind/imdeepmind.github.io/blob/main/docs/frameworks-libraries/flask/request-response-cycle.md","tags":[],"version":"current","lastUpdatedBy":"Abhishek Chatterjee","lastUpdatedAt":1736345108000,"sidebarPosition":8,"frontMatter":{"sidebar_position":8},"sidebar":"tutorialSidebar","previous":{"title":"Middlewares","permalink":"/docs/frameworks-libraries/flask/middlewares"},"next":{"title":"Blueprints","permalink":"/docs/frameworks-libraries/flask/blueprints"}}');var i=n(74848),t=n(28453);const l={sidebar_position:8},o="Request and Response Cycle",c={},d=[{value:"Overview of the Request-Response Cycle",id:"overview-of-the-request-response-cycle",level:2},{value:"Key Components of the Request-Response Cycle",id:"key-components-of-the-request-response-cycle",level:2},{value:"Request Object",id:"request-object",level:3},{value:"Routing",id:"routing",level:3},{value:"View Functions",id:"view-functions",level:3},{value:"Response Object",id:"response-object",level:3},{value:"Middleware",id:"middleware",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Lifecycle of a Request in Flask",id:"lifecycle-of-a-request-in-flask",level:2},{value:"Visual Representation of the Request-Response Cycle",id:"visual-representation-of-the-request-response-cycle",level:3},{value:"Example of a Full Request-Response Cycle in Flask",id:"example-of-a-full-request-response-cycle-in-flask",level:2}];function a(e){const s={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"request-and-response-cycle",children:"Request and Response Cycle"})}),"\n",(0,i.jsxs)(s.p,{children:["The ",(0,i.jsx)(s.strong,{children:"Request-Response Cycle"})," is the core of web application behavior in Flask. It defines how Flask handles incoming HTTP requests from clients (like web browsers) and sends back appropriate responses. Understanding this cycle is critical for building efficient and functional Flask applications."]}),"\n",(0,i.jsx)(s.h2,{id:"overview-of-the-request-response-cycle",children:"Overview of the Request-Response Cycle"}),"\n",(0,i.jsx)(s.mermaid,{value:"sequenceDiagram\r\n    participant Client\r\n    participant WSGI\r\n    participant FlaskApp\r\n    participant Middleware\r\n    participant Response\r\n\r\n    Client->>WSGI: Sends HTTP Request\r\n    WSGI->>Middleware: Pass Request\r\n    Middleware->>FlaskApp: Pass Request to Flask App\r\n    FlaskApp->>FlaskApp: Process Request (View Logic)\r\n    FlaskApp->>Middleware: Pass Response to Middleware\r\n    Middleware->>WSGI: Pass Response to WSGI\r\n    WSGI->>Client: Send HTTP Response"}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsxs)(s.li,{children:["A ",(0,i.jsx)(s.strong,{children:"client"})," (e.g., a browser or API client) sends an HTTP request to the server."]}),"\n",(0,i.jsxs)(s.li,{children:["The ",(0,i.jsx)(s.strong,{children:"web server"})," (e.g., Gunicorn, uWSGI) receives the request and passes it to the Flask application via the WSGI interface."]}),"\n",(0,i.jsxs)(s.li,{children:["The Flask application processes the request by:","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Matching the URL with a route."}),"\n",(0,i.jsx)(s.li,{children:"Executing the corresponding view function."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["The view function returns a ",(0,i.jsx)(s.strong,{children:"response"})," object, which Flask sends back to the client via the WSGI server."]}),"\n",(0,i.jsx)(s.li,{children:"The client receives and processes the HTTP response."}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"This process involves multiple components in Flask, such as request and response objects, routing, and middleware."}),"\n",(0,i.jsx)(s.h2,{id:"key-components-of-the-request-response-cycle",children:"Key Components of the Request-Response Cycle"}),"\n",(0,i.jsx)(s.h3,{id:"request-object",children:"Request Object"}),"\n",(0,i.jsx)(s.p,{children:"The request object in Flask encapsulates all the details of the incoming HTTP request, such as the method, headers, form data, query parameters, and JSON payload."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsxs)(s.strong,{children:["Importing the ",(0,i.jsx)(s.code,{children:"request"})," object"]}),":"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:"from flask import request\n"})}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsxs)(s.strong,{children:["Common Attributes of ",(0,i.jsx)(s.code,{children:"request"})]}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"request.method"}),": The HTTP method (e.g., ",(0,i.jsx)(s.code,{children:"GET"}),", ",(0,i.jsx)(s.code,{children:"POST"}),", ",(0,i.jsx)(s.code,{children:"PUT"}),", ",(0,i.jsx)(s.code,{children:"DELETE"}),")."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"request.args"}),": The query parameters in the URL (e.g., ",(0,i.jsx)(s.code,{children:"/search?q=flask"}),")."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"request.form"}),": Form data submitted via POST (from an HTML form)."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"request.json"}),": JSON data sent in the request body (usually for APIs)."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"request.headers"}),": The headers of the HTTP request."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"request.cookies"}),": Cookies sent by the client."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"request.url"}),": The full URL of the request."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"request.path"}),": The URL path (excluding the domain and query string)."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Example of Accessing Request Data"}),":"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:"from flask import Flask, request\r\n\r\napp = Flask(__name__)\r\n\r\n@app.route('/greet', methods=['GET', 'POST'])\r\ndef greet():\r\n    if request.method == 'POST':\r\n        name = request.form.get('name')\r\n        return f\"Hello, {name}!\"\r\n    return \"Send a POST request with your name!\"\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"routing",children:"Routing"}),"\n",(0,i.jsxs)(s.p,{children:["Routing is the process of mapping URLs to specific view functions in Flask. The ",(0,i.jsx)(s.code,{children:"@app.route"})," decorator is used to define routes."]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Example of Routing"}),":"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:"@app.route('/')\r\ndef home():\r\n    return \"Welcome to the homepage!\"\r\n\r\n@app.route('/about')\r\ndef about():\r\n    return \"This is the About page.\"\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:["When a request is received, Flask matches the URL in the request against the defined routes. If no match is found, Flask raises a ",(0,i.jsx)(s.code,{children:"404 Not Found"})," error."]}),"\n",(0,i.jsx)(s.h3,{id:"view-functions",children:"View Functions"}),"\n",(0,i.jsxs)(s.p,{children:["A ",(0,i.jsx)(s.strong,{children:"view function"})," is the Python function that handles the logic for a specific route. It processes the request and returns a response."]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:"@app.route('/hello/<name>')\r\ndef hello(name):\r\n    return f\"Hello, {name}!\"\n"})}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:["Flask uses ",(0,i.jsx)(s.strong,{children:"dynamic routing"})," to pass parts of the URL as arguments to the view function (e.g., ",(0,i.jsx)(s.code,{children:"<name>"}),")."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h3,{id:"response-object",children:"Response Object"}),"\n",(0,i.jsx)(s.p,{children:"After processing a request, a Flask view function must return a response. This response can be:"}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsxs)(s.li,{children:["A string (converted to an HTTP response with a ",(0,i.jsx)(s.code,{children:"200 OK"})," status)."]}),"\n",(0,i.jsxs)(s.li,{children:["A tuple of ",(0,i.jsx)(s.code,{children:"(response_body, status_code)"}),"."]}),"\n",(0,i.jsxs)(s.li,{children:["A ",(0,i.jsx)(s.code,{children:"Response"})," object."]}),"\n"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsxs)(s.strong,{children:["Importing the ",(0,i.jsx)(s.code,{children:"Response"})," class"]}),":"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:"from flask import Response\n"})}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Attributes of a Response"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"response.data"}),": The response body."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"response.status_code"}),": The HTTP status code (e.g., 200, 404, 500)."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"response.headers"}),": The headers in the response."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Example of Custom Response"}),":"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:"from flask import Response\r\n\r\n@app.route('/custom-response')\r\ndef custom_response():\r\n    response = Response(\"Custom Response Body\", status=202)\r\n    response.headers['X-Custom-Header'] = 'MyHeaderValue'\r\n    return response\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"middleware",children:"Middleware"}),"\n",(0,i.jsxs)(s.p,{children:["Middleware is code that executes before or after a request is processed. Flask provides hooks like ",(0,i.jsx)(s.code,{children:"before_request"}),", ",(0,i.jsx)(s.code,{children:"after_request"}),", and ",(0,i.jsx)(s.code,{children:"teardown_request"})," for middleware functionality."]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.code,{children:"before_request"})}),": Runs before the request is routed."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.code,{children:"after_request"})}),": Runs after the view function generates a response."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.code,{children:"teardown_request"})}),": Runs at the end of the request lifecycle, regardless of whether an exception occurred."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Example of Middleware"}),":"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:'@app.before_request\r\ndef before_request_func():\r\n    print("This runs before each request!")\r\n\r\n@app.after_request\r\ndef after_request_func(response):\r\n    print("This runs after each request!")\r\n    return response\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,i.jsx)(s.p,{children:"If an error occurs during the request-response cycle, Flask provides a mechanism to handle it gracefully using custom error handlers."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Example of Error Handling"}),":"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:'@app.errorhandler(404)\r\ndef not_found_error(error):\r\n    return "This page does not exist!", 404\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"lifecycle-of-a-request-in-flask",children:"Lifecycle of a Request in Flask"}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Request Arrival"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"The WSGI server receives the HTTP request and forwards it to the Flask app."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Preprocessing"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Flask processes the request using ",(0,i.jsx)(s.code,{children:"before_request"})," middleware and request hooks."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Routing"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Flask matches the request URL to a route and calls the corresponding view function."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"View Function Execution"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"The view function executes, processes the request, and generates a response."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Postprocessing"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Flask processes the response using ",(0,i.jsx)(s.code,{children:"after_request"})," middleware."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Response Delivery"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"The response is sent back to the WSGI server, which forwards it to the client."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"visual-representation-of-the-request-response-cycle",children:"Visual Representation of the Request-Response Cycle"}),"\n",(0,i.jsx)(s.mermaid,{value:'graph TD\r\n    A[Client Sends HTTP Request] --\x3e B[WSGI Server]\r\n    B --\x3e C[Flask Application]\r\n    C --\x3e D["Request Preprocessing (before_request)"]\r\n    D --\x3e E[Routing]\r\n    E --\x3e F[View Function Execution]\r\n    F --\x3e G[Response Creation]\r\n    G --\x3e H["Response Postprocessing (after_request)"]\r\n    H --\x3e I[WSGI Server]\r\n    I --\x3e J[Client Receives HTTP Response]'}),"\n",(0,i.jsx)(s.h2,{id:"example-of-a-full-request-response-cycle-in-flask",children:"Example of a Full Request-Response Cycle in Flask"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:"from flask import Flask, request, jsonify\r\n\r\napp = Flask(__name__)\r\n\r\n@app.before_request\r\ndef log_request():\r\n    print(f\"Incoming Request: {request.method} {request.url}\")\r\n\r\n@app.route('/add', methods=['POST'])\r\ndef add_numbers():\r\n    data = request.json\r\n    result = data['a'] + data['b']\r\n    return jsonify({'result': result})\r\n\r\n@app.after_request\r\ndef log_response(response):\r\n    print(f\"Outgoing Response: {response.status}\")\r\n    return response\r\n\r\n@app.errorhandler(404)\r\ndef handle_404(error):\r\n    return \"Route not found!\", 404\r\n\r\nif __name__ == '__main__':\r\n    app.run(debug=True)\n"})})]})}function h(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>l,x:()=>o});var r=n(96540);const i={},t=r.createContext(i);function l(e){const s=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(t.Provider,{value:s},e.children)}}}]);