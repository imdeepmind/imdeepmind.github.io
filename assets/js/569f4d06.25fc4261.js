"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[2817],{41735:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>t,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"frameworks-libraries/django/advanced-topics","title":"Advanced Topics","description":"DRF offers flexibility and extensibility for building robust APIs. Mastering advanced topics such as custom serializers, non-CRUD operations, signals, versioning, caching, asynchronous views, and WebSocket integration empowers developers to handle complex business requirements efficiently.","source":"@site/docs/frameworks-libraries/django/advanced-topics.md","sourceDirName":"frameworks-libraries/django","slug":"/frameworks-libraries/django/advanced-topics","permalink":"/docs/frameworks-libraries/django/advanced-topics","draft":false,"unlisted":false,"editUrl":"https://github.com/imdeepmind/imdeepmind.github.io/blob/main/docs/frameworks-libraries/django/advanced-topics.md","tags":[],"version":"current","lastUpdatedBy":"Abhishek Chatterjee","lastUpdatedAt":1737887469000,"sidebarPosition":15,"frontMatter":{"sidebar_position":15},"sidebar":"tutorialSidebar","previous":{"title":"Documentation","permalink":"/docs/frameworks-libraries/django/documentation"},"next":{"title":"Deployment","permalink":"/docs/frameworks-libraries/django/deployment"}}');var r=s(74848),a=s(28453);const o={sidebar_position:15},l="Advanced Topics",t={},d=[{value:"Custom Fields and Serializers",id:"custom-fields-and-serializers",level:2},{value:"Custom Fields",id:"custom-fields",level:3},{value:"Example: Encrypting/Decrypting a Field",id:"example-encryptingdecrypting-a-field",level:4},{value:"Custom Serializers",id:"custom-serializers",level:3},{value:"Example: Combining Fields from Multiple Models",id:"example-combining-fields-from-multiple-models",level:4},{value:"Custom Views for Non-CRUD Operations",id:"custom-views-for-non-crud-operations",level:2},{value:"Customizing API Views",id:"customizing-api-views",level:3},{value:"Example: Custom Login Endpoint",id:"example-custom-login-endpoint",level:4},{value:"Signal Handling in DRF",id:"signal-handling-in-drf",level:2},{value:"Using Signals in DRF",id:"using-signals-in-drf",level:3},{value:"Example: Sending an Email After User Registration",id:"example-sending-an-email-after-user-registration",level:4},{value:"Versioning",id:"versioning",level:2},{value:"DRF\u2019s Versioning Support",id:"drfs-versioning-support",level:3},{value:"Example: URLPathVersioning",id:"example-urlpathversioning",level:4},{value:"Caching",id:"caching",level:2},{value:"Common Caching Techniques",id:"common-caching-techniques",level:3},{value:"Example: View-Level Caching",id:"example-view-level-caching",level:4},{value:"Asynchronous Views",id:"asynchronous-views",level:2},{value:"Writing Asynchronous Views",id:"writing-asynchronous-views",level:3},{value:"Example: Asynchronous View",id:"example-asynchronous-view",level:4},{value:"WebSockets and DRF",id:"websockets-and-drf",level:2},{value:"Setting Up Django Channels",id:"setting-up-django-channels",level:3},{value:"Creating a WebSocket Consumer",id:"creating-a-websocket-consumer",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"advanced-topics",children:"Advanced Topics"})}),"\n",(0,r.jsx)(n.p,{children:"DRF offers flexibility and extensibility for building robust APIs. Mastering advanced topics such as custom serializers, non-CRUD operations, signals, versioning, caching, asynchronous views, and WebSocket integration empowers developers to handle complex business requirements efficiently."}),"\n",(0,r.jsx)(n.h2,{id:"custom-fields-and-serializers",children:"Custom Fields and Serializers"}),"\n",(0,r.jsx)(n.p,{children:"Custom fields and serializers allow developers to adapt DRF's serialization/deserialization logic to unique business needs."}),"\n",(0,r.jsx)(n.h3,{id:"custom-fields",children:"Custom Fields"}),"\n",(0,r.jsx)(n.p,{children:"Custom fields override the default behavior of DRF fields."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Steps to Create a Custom Field"}),":"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Subclass ",(0,r.jsx)(n.code,{children:"rest_framework.fields.Field"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Override ",(0,r.jsx)(n.code,{children:"to_representation()"})," (serialization)."]}),"\n",(0,r.jsxs)(n.li,{children:["Override ",(0,r.jsx)(n.code,{children:"to_internal_value()"})," (deserialization)."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-encryptingdecrypting-a-field",children:"Example: Encrypting/Decrypting a Field"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from rest_framework.fields import Field\nfrom cryptography.fernet import Fernet\n\nclass EncryptedField(Field):\n    def __init__(self, key, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.fernet = Fernet(key)\n\n    def to_representation(self, value):\n        return self.fernet.encrypt(value.encode()).decode()\n\n    def to_internal_value(self, data):\n        return self.fernet.decrypt(data.encode()).decode()\n"})}),"\n",(0,r.jsx)(n.h3,{id:"custom-serializers",children:"Custom Serializers"}),"\n",(0,r.jsxs)(n.p,{children:["Custom serializers handle complex data representations that cannot be managed by default ",(0,r.jsx)(n.code,{children:"ModelSerializer"}),"."]}),"\n",(0,r.jsx)(n.h4,{id:"example-combining-fields-from-multiple-models",children:"Example: Combining Fields from Multiple Models"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from rest_framework import serializers\nfrom myapp.models import Author, Book\n\nclass AuthorBookSerializer(serializers.Serializer):\n    author_name = serializers.CharField(source='author.name')\n    book_title = serializers.CharField(source='book.title')\n\n    def to_representation(self, instance):\n        return {\n            \"author_name\": instance.author.name,\n            \"book_title\": instance.book.title,\n        }\n"})}),"\n",(0,r.jsx)(n.h2,{id:"custom-views-for-non-crud-operations",children:"Custom Views for Non-CRUD Operations"}),"\n",(0,r.jsx)(n.p,{children:"Non-CRUD operations (like login, export, or analytics) often require custom views."}),"\n",(0,r.jsx)(n.h3,{id:"customizing-api-views",children:"Customizing API Views"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Subclass ",(0,r.jsx)(n.code,{children:"APIView"})," or ",(0,r.jsx)(n.code,{children:"GenericAPIView"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Override HTTP method handlers like ",(0,r.jsx)(n.code,{children:"get()"}),", ",(0,r.jsx)(n.code,{children:"post()"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-custom-login-endpoint",children:"Example: Custom Login Endpoint"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from rest_framework.views import APIView\nfrom rest_framework.response import Response\nfrom rest_framework import status\n\nclass LoginView(APIView):\n    def post(self, request):\n        username = request.data.get('username')\n        password = request.data.get('password')\n\n        if username == 'admin' and password == 'password':\n            return Response({\"message\": \"Login successful\"}, status=status.HTTP_200_OK)\n        return Response({\"message\": \"Invalid credentials\"}, status=status.HTTP_401_UNAUTHORIZED)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"signal-handling-in-drf",children:"Signal Handling in DRF"}),"\n",(0,r.jsx)(n.p,{children:"Django signals are useful for decoupled communication between components. They can be used in DRF for tasks like logging, sending notifications, or triggering background jobs."}),"\n",(0,r.jsx)(n.h3,{id:"using-signals-in-drf",children:"Using Signals in DRF"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Import the required signal (e.g., ",(0,r.jsx)(n.code,{children:"post_save"}),")."]}),"\n",(0,r.jsx)(n.li,{children:"Connect a receiver function to the signal."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-sending-an-email-after-user-registration",children:"Example: Sending an Email After User Registration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from django.db.models.signals import post_save\nfrom django.dispatch import receiver\nfrom django.contrib.auth.models import User\nfrom django.core.mail import send_mail\n\n@receiver(post_save, sender=User)\ndef send_welcome_email(sender, instance, created, **kwargs):\n    if created:\n        send_mail(\n            subject="Welcome to MyApp",\n            message="Thank you for registering!",\n            from_email="noreply@myapp.com",\n            recipient_list=[instance.email],\n        )\n'})}),"\n",(0,r.jsx)(n.h2,{id:"versioning",children:"Versioning"}),"\n",(0,r.jsx)(n.p,{children:"Versioning APIs help manage changes without breaking existing functionality."}),"\n",(0,r.jsx)(n.h3,{id:"drfs-versioning-support",children:"DRF\u2019s Versioning Support"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"NamespaceVersioning"}),": Uses the URL namespace."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"URLPathVersioning"}),": Extracts the version from the URL path."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"QueryParameterVersioning"}),": Extracts the version from a query parameter."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"HeaderVersioning"}),": Extracts the version from a custom header."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-urlpathversioning",children:"Example: URLPathVersioning"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# settings.py\nREST_FRAMEWORK = {\n    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.URLPathVersioning',\n}\n\n# urls.py\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('v1/', include('myapp.api_v1_urls')),\n    path('v2/', include('myapp.api_v2_urls')),\n]\n"})}),"\n",(0,r.jsx)(n.h2,{id:"caching",children:"Caching"}),"\n",(0,r.jsx)(n.p,{children:"Caching reduces the load on the server by storing and reusing responses."}),"\n",(0,r.jsx)(n.h3,{id:"common-caching-techniques",children:"Common Caching Techniques"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Django\u2019s Cache Framework"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use cache backends like Redis or Memcached."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"DRF\u2019s Throttle Classes"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use throttling to limit repeated requests and cache results."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Custom Cache Middleware"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Add caching logic in middleware or views."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-view-level-caching",children:"Example: View-Level Caching"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from django.views.decorators.cache import cache_page\nfrom django.utils.decorators import method_decorator\n\nclass CachedView(APIView):\n    @method_decorator(cache_page(60 * 15))  # Cache for 15 minutes\n    def get(self, request):\n        return Response({"data": "Cached content"})\n'})}),"\n",(0,r.jsx)(n.h2,{id:"asynchronous-views",children:"Asynchronous Views"}),"\n",(0,r.jsx)(n.p,{children:"DRF supports asynchronous views starting from Django 3.1+, enabling better performance for I/O-bound operations."}),"\n",(0,r.jsx)(n.h3,{id:"writing-asynchronous-views",children:"Writing Asynchronous Views"}),"\n",(0,r.jsxs)(n.p,{children:["Use ",(0,r.jsx)(n.code,{children:"async def"})," to define the view and asynchronous libraries like ",(0,r.jsx)(n.code,{children:"httpx"})," for non-blocking operations."]}),"\n",(0,r.jsx)(n.h4,{id:"example-asynchronous-view",children:"Example: Asynchronous View"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from rest_framework.views import APIView\nfrom rest_framework.response import Response\nimport httpx\n\nclass AsyncAPIView(APIView):\n    async def get(self, request):\n        async with httpx.AsyncClient() as client:\n            response = await client.get('https://api.example.com/data')\n        return Response(response.json())\n"})}),"\n",(0,r.jsx)(n.h2,{id:"websockets-and-drf",children:"WebSockets and DRF"}),"\n",(0,r.jsxs)(n.p,{children:["For real-time communication, integrate DRF with ",(0,r.jsx)(n.strong,{children:"Django Channels"}),", which provides WebSocket support."]}),"\n",(0,r.jsx)(n.h3,{id:"setting-up-django-channels",children:"Setting Up Django Channels"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Install Django Channels:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"pip install channels\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Add ",(0,r.jsx)(n.code,{children:"channels"})," to ",(0,r.jsx)(n.code,{children:"INSTALLED_APPS"})," and configure ASGI settings."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"creating-a-websocket-consumer",children:"Creating a WebSocket Consumer"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from channels.generic.websocket import AsyncWebsocketConsumer\nimport json\n\nclass ChatConsumer(AsyncWebsocketConsumer):\n    async def connect(self):\n        await self.accept()\n\n    async def receive(self, text_data):\n        message = json.loads(text_data).get('message')\n        await self.send(text_data=json.dumps({\"message\": message}))\n"})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var i=s(96540);const r={},a=i.createContext(r);function o(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);