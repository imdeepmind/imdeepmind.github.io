"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[9035],{838:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"programming/programming-languages/python/iterators-generators","title":"Iterators and Generators","description":"Iterators","source":"@site/docs/programming/programming-languages/python/iterators-generators.md","sourceDirName":"programming/programming-languages/python","slug":"/programming/programming-languages/python/iterators-generators","permalink":"/docs/programming/programming-languages/python/iterators-generators","draft":false,"unlisted":false,"editUrl":"https://github.com/imdeepmind/imdeepmind.github.io/blob/main/docs/programming/programming-languages/python/iterators-generators.md","tags":[],"version":"current","lastUpdatedBy":"Abhishek Chatterjee","lastUpdatedAt":1749211863000,"sidebarPosition":12,"frontMatter":{"sidebar_position":12},"sidebar":"tutorialSidebar","previous":{"title":"File Handling","permalink":"/docs/programming/programming-languages/python/file-handling"},"next":{"title":"Threading","permalink":"/docs/programming/programming-languages/python/threads"}}');var s=t(74848),a=t(28453);const i={sidebar_position:12},o="Iterators and Generators",l={},d=[{value:"Iterators",id:"iterators",level:2},{value:"What is an Iterator?",id:"what-is-an-iterator",level:3},{value:"Example of Using an Iterator:",id:"example-of-using-an-iterator",level:3},{value:"Custom Iterator:",id:"custom-iterator",level:3},{value:"Advantages of Iterators:",id:"advantages-of-iterators",level:3},{value:"Generators",id:"generators",level:2},{value:"What is a Generator?",id:"what-is-a-generator",level:3},{value:"Example of a Simple Generator:",id:"example-of-a-simple-generator",level:3},{value:"Generator Expression:",id:"generator-expression",level:3},{value:"Advantages of Generators:",id:"advantages-of-generators",level:3},{value:"When to Use Generators:",id:"when-to-use-generators",level:3},{value:"Comparison Between Iterators and Generators",id:"comparison-between-iterators-and-generators",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"iterators-and-generators",children:"Iterators and Generators"})}),"\n",(0,s.jsx)(n.h2,{id:"iterators",children:"Iterators"}),"\n",(0,s.jsx)(n.h3,{id:"what-is-an-iterator",children:"What is an Iterator?"}),"\n",(0,s.jsxs)(n.p,{children:["An ",(0,s.jsx)(n.strong,{children:"iterator"})," is an object that implements two key methods:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"__iter__()"}),": Returns the iterator object itself. This method is required for an object to be considered iterable."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"__next__()"}),": Returns the next item in the sequence. If there are no more items, it raises a ",(0,s.jsx)(n.code,{children:"StopIteration"})," exception."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["In Python, most collections such as lists, tuples, and dictionaries are iterables. This means We can loop over them using a ",(0,s.jsx)(n.code,{children:"for"})," loop. However, these collections are not iterators themselves. They are iterable objects because they implement the ",(0,s.jsx)(n.code,{children:"__iter__()"})," method. When We pass an iterable object to the ",(0,s.jsx)(n.code,{children:"iter()"})," function, it returns an iterator."]}),"\n",(0,s.jsx)(n.h3,{id:"example-of-using-an-iterator",children:"Example of Using an Iterator:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Creating an iterator for a list\nmy_list = [1, 2, 3, 4]\niterator = iter(my_list)\n\nprint(next(iterator))  # Output: 1\nprint(next(iterator))  # Output: 2\nprint(next(iterator))  # Output: 3\nprint(next(iterator))  # Output: 4\n# print(next(iterator))  # This will raise StopIteration\n"})}),"\n",(0,s.jsx)(n.h3,{id:"custom-iterator",children:"Custom Iterator:"}),"\n",(0,s.jsxs)(n.p,{children:["We can create Our own iterator by defining a class with ",(0,s.jsx)(n.code,{children:"__iter__()"})," and ",(0,s.jsx)(n.code,{children:"__next__()"})," methods."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class Countdown:\n    def __init__(self, start):\n        self.start = start\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.start <= 0:\n            raise StopIteration\n        else:\n            self.start -= 1\n            return self.start\n\ncountdown = Countdown(5)\nfor num in countdown:\n    print(num)  # Output: 4, 3, 2, 1, 0\n"})}),"\n",(0,s.jsx)(n.h3,{id:"advantages-of-iterators",children:"Advantages of Iterators:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Memory efficient:"})," Iterators yield one item at a time, which makes them more memory-efficient than lists, especially for large datasets."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Lazy evaluation:"})," Iterators do not generate all items at once, which allows for processing large data sets one element at a time."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"generators",children:"Generators"}),"\n",(0,s.jsx)(n.h3,{id:"what-is-a-generator",children:"What is a Generator?"}),"\n",(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.strong,{children:"generator"})," is a special type of iterator that is defined using a function with the ",(0,s.jsx)(n.code,{children:"yield"})," keyword. Instead of returning a value with ",(0,s.jsx)(n.code,{children:"return"}),", the generator function produces a sequence of values one at a time using ",(0,s.jsx)(n.code,{children:"yield"}),". The state of the generator is saved between calls, so the generator function can continue where it left off after each ",(0,s.jsx)(n.code,{children:"yield"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"example-of-a-simple-generator",children:"Example of a Simple Generator:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def count_up_to(max):\n    count = 1\n    while count <= max:\n        yield count\n        count += 1\n\ncounter = count_up_to(3)\nprint(next(counter))  # Output: 1\nprint(next(counter))  # Output: 2\nprint(next(counter))  # Output: 3\n# print(next(counter))  # This will raise StopIteration\n"})}),"\n",(0,s.jsx)(n.h3,{id:"generator-expression",children:"Generator Expression:"}),"\n",(0,s.jsx)(n.p,{children:"We can also create generators using generator expressions, which have a syntax similar to list comprehensions but with parentheses."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Using generator expression\nsquares = (x * x for x in range(5))\nfor square in squares:\n    print(square)  # Output: 0, 1, 4, 9, 16\n"})}),"\n",(0,s.jsx)(n.h3,{id:"advantages-of-generators",children:"Advantages of Generators:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Memory Efficient:"})," Like iterators, generators do not store all values in memory at once. Instead, they generate values on the fly, which is especially useful for working with large datasets."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Concise:"})," Generators allow We to write cleaner and more concise code for producing sequences of data."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Lazy Evaluation:"})," Generators evaluate values lazily, which means values are only generated when requested."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"when-to-use-generators",children:"When to Use Generators:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"When working with large datasets, like reading lines from a file, or streaming data from an external source."}),"\n",(0,s.jsx)(n.li,{children:"When We want to avoid storing large amounts of data in memory at once."}),"\n",(0,s.jsx)(n.li,{children:"When We need an efficient way to handle sequences of data that may not fit in memory."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"comparison-between-iterators-and-generators",children:"Comparison Between Iterators and Generators"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Feature"}),(0,s.jsx)(n.th,{children:"Iterator"}),(0,s.jsx)(n.th,{children:"Generator"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Creation"})}),(0,s.jsxs)(n.td,{children:["Explicitly define ",(0,s.jsx)(n.code,{children:"__iter__()"})," and ",(0,s.jsx)(n.code,{children:"__next__()"})]}),(0,s.jsxs)(n.td,{children:["Use a function with ",(0,s.jsx)(n.code,{children:"yield"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"State"})}),(0,s.jsx)(n.td,{children:"Maintains its state manually"}),(0,s.jsxs)(n.td,{children:["Automatically saves state using ",(0,s.jsx)(n.code,{children:"yield"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Memory Usage"})}),(0,s.jsx)(n.td,{children:"Can be memory-intensive for large sequences"}),(0,s.jsx)(n.td,{children:"More memory-efficient due to lazy evaluation"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Syntax"})}),(0,s.jsx)(n.td,{children:"More code needed to implement"}),(0,s.jsxs)(n.td,{children:["More concise and readable using ",(0,s.jsx)(n.code,{children:"yield"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Performance"})}),(0,s.jsx)(n.td,{children:"Slightly slower due to manual state handling"}),(0,s.jsx)(n.td,{children:"More efficient as it uses lazy evaluation"})]})]})]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var r=t(96540);const s={},a=r.createContext(s);function i(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);