"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[7400],{52393:(e,i,s)=>{s.r(i),s.d(i,{assets:()=>t,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"frameworks-libraries/backend/django/views","title":"Views","description":"Django Rest Framework (DRF) views are a core component used to define the behavior of API endpoints. They control the logic for handling HTTP requests and returning appropriate responses. DRF provides both function-based and class-based views, along with a range of generic views and viewsets to simplify API development.","source":"@site/docs/frameworks-libraries/backend/django/views.md","sourceDirName":"frameworks-libraries/backend/django","slug":"/frameworks-libraries/backend/django/views","permalink":"/docs/frameworks-libraries/backend/django/views","draft":false,"unlisted":false,"editUrl":"https://github.com/imdeepmind/imdeepmind.github.io/blob/main/docs/frameworks-libraries/backend/django/views.md","tags":[],"version":"current","lastUpdatedBy":"Abhishek Chatterjee","lastUpdatedAt":1749212834000,"sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"tutorialSidebar","previous":{"title":"Serializers","permalink":"/docs/frameworks-libraries/backend/django/serializers"},"next":{"title":"Authentication","permalink":"/docs/frameworks-libraries/backend/django/authentication"}}');var r=s(74848),l=s(28453);const a={sidebar_position:7},o="Views",t={},d=[{value:"Purpose of Views in DRF",id:"purpose-of-views-in-drf",level:2},{value:"Types of DRF Views",id:"types-of-drf-views",level:2},{value:"Function-Based Views (FBVs)",id:"function-based-views-fbvs",level:3},{value:"Class-Based Views (CBVs)",id:"class-based-views-cbvs",level:3},{value:"Viewsets",id:"viewsets",level:3},{value:"Function-Based Views",id:"function-based-views",level:2},{value:"Example",id:"example",level:3},{value:"Class-Based Views",id:"class-based-views",level:2},{value:"APIView",id:"apiview",level:3},{value:"Example",id:"example-1",level:3},{value:"Difference Between Function-Based and Class-Based Views",id:"difference-between-function-based-and-class-based-views",level:2},{value:"Function-Based Views (FBVs)",id:"function-based-views-fbvs-1",level:3},{value:"Class-Based Views (CBVs)",id:"class-based-views-cbvs-1",level:3},{value:"Generic Views",id:"generic-views",level:2},{value:"Purpose",id:"purpose",level:3},{value:"ListAPIView and RetrieveAPIView",id:"listapiview-and-retrieveapiview",level:3},{value:"Example",id:"example-2",level:3},{value:"Mixins and GenericAPIView",id:"mixins-and-genericapiview",level:2},{value:"Mixins",id:"mixins",level:3},{value:"GenericAPIView",id:"genericapiview",level:3},{value:"Example",id:"example-3",level:3},{value:"Viewsets",id:"viewsets-1",level:2},{value:"Purpose",id:"purpose-1",level:3},{value:"Types of Viewsets",id:"types-of-viewsets",level:3},{value:"Example",id:"example-4",level:3},{value:"Routers with Viewsets",id:"routers-with-viewsets",level:3},{value:"Customization in Views",id:"customization-in-views",level:2},{value:"Filtering, Searching, and Pagination",id:"filtering-searching-and-pagination",level:3},{value:"Customizing Response",id:"customizing-response",level:3},{value:"Handling Permissions",id:"handling-permissions",level:2}];function c(e){const i={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.header,{children:(0,r.jsx)(i.h1,{id:"views",children:"Views"})}),"\n",(0,r.jsx)(i.p,{children:"Django Rest Framework (DRF) views are a core component used to define the behavior of API endpoints. They control the logic for handling HTTP requests and returning appropriate responses. DRF provides both function-based and class-based views, along with a range of generic views and viewsets to simplify API development."}),"\n",(0,r.jsx)(i.h2,{id:"purpose-of-views-in-drf",children:"Purpose of Views in DRF"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Process HTTP Requests"}),": Handle requests such as GET, POST, PUT, PATCH, and DELETE."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Return HTTP Responses"}),": Send appropriate responses (JSON, XML, etc.) back to clients."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Bridge Between Models and Serializers"}),": Fetch data from models, serialize it, and return it to clients."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Validation and Error Handling"}),": Manage validation and error responses effectively."]}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"types-of-drf-views",children:"Types of DRF Views"}),"\n",(0,r.jsx)(i.h3,{id:"function-based-views-fbvs",children:"Function-Based Views (FBVs)"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Similar to traditional Django views."}),"\n",(0,r.jsx)(i.li,{children:"Provide flexibility but require more boilerplate code."}),"\n",(0,r.jsxs)(i.li,{children:["Use DRF decorators like ",(0,r.jsx)(i.code,{children:"@api_view"})," for request handling."]}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"class-based-views-cbvs",children:"Class-Based Views (CBVs)"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Follow Django\u2019s CBV structure and leverage object-oriented programming principles."}),"\n",(0,r.jsx)(i.li,{children:"Provide reusable and modular components."}),"\n",(0,r.jsx)(i.li,{children:"DRF enhances CBVs with mixins and generic views for common patterns."}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"viewsets",children:"Viewsets"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Specialized CBVs that encapsulate logic for managing sets of resources."}),"\n",(0,r.jsx)(i.li,{children:"Work seamlessly with DRF routers for generating URLs."}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"function-based-views",children:"Function-Based Views"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:["Decorated with ",(0,r.jsx)(i.code,{children:"@api_view"})," to ensure they handle API requests."]}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"example",children:"Example"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-python",children:"from rest_framework.decorators import api_view\nfrom rest_framework.response import Response\nfrom rest_framework import status\n\n@api_view(['GET', 'POST'])\ndef book_list(request):\n    if request.method == 'GET':\n        books = Book.objects.all()\n        serializer = BookSerializer(books, many=True)\n        return Response(serializer.data)\n\n    if request.method == 'POST':\n        serializer = BookSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n"})}),"\n",(0,r.jsx)(i.h2,{id:"class-based-views",children:"Class-Based Views"}),"\n",(0,r.jsx)(i.h3,{id:"apiview",children:"APIView"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"The most basic class-based view in DRF."}),"\n",(0,r.jsx)(i.li,{children:"Provides finer control over request handling."}),"\n",(0,r.jsxs)(i.li,{children:["Requires explicit implementation of HTTP methods (e.g., ",(0,r.jsx)(i.code,{children:"get"}),", ",(0,r.jsx)(i.code,{children:"post"}),", etc.)."]}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"example-1",children:"Example"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-python",children:"from rest_framework.views import APIView\nfrom rest_framework.response import Response\nfrom rest_framework import status\n\nclass BookListAPIView(APIView):\n    def get(self, request):\n        books = Book.objects.all()\n        serializer = BookSerializer(books, many=True)\n        return Response(serializer.data)\n\n    def post(self, request):\n        serializer = BookSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n"})}),"\n",(0,r.jsx)(i.h2,{id:"difference-between-function-based-and-class-based-views",children:"Difference Between Function-Based and Class-Based Views"}),"\n",(0,r.jsx)(i.h3,{id:"function-based-views-fbvs-1",children:"Function-Based Views (FBVs)"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Definition"}),": Views are simple Python functions handling specific HTTP methods (e.g., GET, POST)."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Pros"}),":","\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Easy to read and understand, especially for beginners."}),"\n",(0,r.jsx)(i.li,{children:"Minimal abstraction, giving full control over logic."}),"\n",(0,r.jsx)(i.li,{children:"Best suited for simple APIs with minimal logic."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Cons"}),":","\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Can become repetitive and harder to maintain for larger APIs."}),"\n",(0,r.jsx)(i.li,{children:"Lack of modularity compared to CBVs."}),"\n",(0,r.jsx)(i.li,{children:"No built-in support for DRY (Don\u2019t Repeat Yourself) principles."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"When to Use"}),":","\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"For small-scale applications or APIs with straightforward requirements."}),"\n",(0,r.jsx)(i.li,{children:"When the focus is on quick development with minimal complexity."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"class-based-views-cbvs-1",children:"Class-Based Views (CBVs)"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Definition"}),": Views are Python classes with methods corresponding to HTTP actions (e.g., ",(0,r.jsx)(i.code,{children:"get"}),", ",(0,r.jsx)(i.code,{children:"post"}),")."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Pros"}),":","\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Modular and reusable, with support for inheritance."}),"\n",(0,r.jsx)(i.li,{children:"Built-in features for common patterns using mixins and generic views."}),"\n",(0,r.jsx)(i.li,{children:"Promotes the DRY principle, reducing boilerplate code."}),"\n",(0,r.jsx)(i.li,{children:"Easier to extend and customize for complex APIs."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Cons"}),":","\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Slightly steeper learning curve due to abstraction."}),"\n",(0,r.jsx)(i.li,{children:"Overhead of understanding mixins and generics for beginners."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"When to Use"}),":","\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"For medium-to-large APIs with multiple endpoints."}),"\n",(0,r.jsx)(i.li,{children:"When modularity and maintainability are priorities."}),"\n",(0,r.jsx)(i.li,{children:"When reuse of common patterns is required."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"generic-views",children:"Generic Views"}),"\n",(0,r.jsx)(i.h3,{id:"purpose",children:"Purpose"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"DRF provides generic views for common patterns (e.g., listing objects, retrieving details)."}),"\n",(0,r.jsx)(i.li,{children:"Simplify implementation by combining common behaviors."}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"listapiview-and-retrieveapiview",children:"ListAPIView and RetrieveAPIView"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"ListAPIView"}),": Fetch and display a list of objects."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"RetrieveAPIView"}),": Fetch details of a single object."]}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"example-2",children:"Example"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-python",children:"from rest_framework.generics import ListAPIView, RetrieveAPIView\n\nclass BookListView(ListAPIView):\n    queryset = Book.objects.all()\n    serializer_class = BookSerializer\n\nclass BookDetailView(RetrieveAPIView):\n    queryset = Book.objects.all()\n    serializer_class = BookSerializer\n"})}),"\n",(0,r.jsx)(i.h2,{id:"mixins-and-genericapiview",children:"Mixins and GenericAPIView"}),"\n",(0,r.jsx)(i.h3,{id:"mixins",children:"Mixins"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"DRF mixins provide reusable functionality for common operations."}),"\n",(0,r.jsxs)(i.li,{children:["Examples:","\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.code,{children:"CreateModelMixin"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.code,{children:"ListModelMixin"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.code,{children:"RetrieveModelMixin"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.code,{children:"UpdateModelMixin"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.code,{children:"DestroyModelMixin"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"genericapiview",children:"GenericAPIView"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:["Extends DRF's ",(0,r.jsx)(i.code,{children:"APIView"})," with support for mixins."]}),"\n",(0,r.jsxs)(i.li,{children:["Provides attributes like ",(0,r.jsx)(i.code,{children:"queryset"}),", ",(0,r.jsx)(i.code,{children:"serializer_class"}),", and methods like ",(0,r.jsx)(i.code,{children:"get_queryset()"}),"."]}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"example-3",children:"Example"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-python",children:"from rest_framework.mixins import ListModelMixin, CreateModelMixin\nfrom rest_framework.generics import GenericAPIView\n\nclass BookListCreateView(ListModelMixin, CreateModelMixin, GenericAPIView):\n    queryset = Book.objects.all()\n    serializer_class = BookSerializer\n\n    def get(self, request, *args, **kwargs):\n        return self.list(request, *args, **kwargs)\n\n    def post(self, request, *args, **kwargs):\n        return self.create(request, *args, **kwargs)\n"})}),"\n",(0,r.jsx)(i.h2,{id:"viewsets-1",children:"Viewsets"}),"\n",(0,r.jsx)(i.h3,{id:"purpose-1",children:"Purpose"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Encapsulate logic for handling a set of resources in a single class."}),"\n",(0,r.jsx)(i.li,{children:"Designed to work with DRF\u2019s routers for URL generation."}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"types-of-viewsets",children:"Types of Viewsets"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"ViewSet"}),": Generic base class."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"ModelViewSet"}),": Combines list, create, retrieve, update, and destroy actions for model instances."]}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"example-4",children:"Example"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-python",children:"from rest_framework.viewsets import ModelViewSet\n\nclass BookViewSet(ModelViewSet):\n    queryset = Book.objects.all()\n    serializer_class = BookSerializer\n"})}),"\n",(0,r.jsx)(i.h3,{id:"routers-with-viewsets",children:"Routers with Viewsets"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-python",children:"from rest_framework.routers import DefaultRouter\nfrom myapp.views import BookViewSet\n\nrouter = DefaultRouter()\nrouter.register(r'books', BookViewSet)\n\nurlpatterns = [\n    path('', include(router.urls)),\n]\n"})}),"\n",(0,r.jsx)(i.h2,{id:"customization-in-views",children:"Customization in Views"}),"\n",(0,r.jsx)(i.h3,{id:"filtering-searching-and-pagination",children:"Filtering, Searching, and Pagination"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"DRF provides built-in support for filtering, searching, and pagination."}),"\n"]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-python",children:"from rest_framework.filters import SearchFilter\nfrom rest_framework.pagination import PageNumberPagination\n\nclass BookListView(ListAPIView):\n    queryset = Book.objects.all()\n    serializer_class = BookSerializer\n    filter_backends = [SearchFilter]\n    search_fields = ['title', 'author__name']\n    pagination_class = PageNumberPagination\n"})}),"\n",(0,r.jsx)(i.h3,{id:"customizing-response",children:"Customizing Response"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-python",children:"class CustomBookListView(ListAPIView):\n    queryset = Book.objects.all()\n    serializer_class = BookSerializer\n\n    def list(self, request, *args, **kwargs):\n        response = super().list(request, *args, **kwargs)\n        response.data = {'books': response.data, 'message': 'Success'}\n        return response\n"})}),"\n",(0,r.jsx)(i.h2,{id:"handling-permissions",children:"Handling Permissions"}),"\n",(0,r.jsx)(i.p,{children:"DRF views integrate seamlessly with permission classes to restrict access based on user roles or conditions."}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-python",children:"from rest_framework.permissions import IsAuthenticated\n\nclass BookListView(ListAPIView):\n    queryset = Book.objects.all()\n    serializer_class = BookSerializer\n    permission_classes = [IsAuthenticated]\n"})})]})}function h(e={}){const{wrapper:i}={...(0,l.R)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,i,s)=>{s.d(i,{R:()=>a,x:()=>o});var n=s(96540);const r={},l=n.createContext(r);function a(e){const i=n.useContext(l);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(l.Provider,{value:i},e.children)}}}]);