"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[746],{10136:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"frameworks-libraries/backend/fastapi/orm","title":"ORMs","description":"FastAPI works seamlessly with various databases (SQL & NoSQL) and ORMs (Object-Relational Mappers). Below is a detailed breakdown of database integration, including SQLAlchemy (sync/async), NoSQL (MongoDB, Redis), migrations (Alembic), and Pydantic \u2194 ORM model conversions.","source":"@site/docs/frameworks-libraries/backend/fastapi/orm.md","sourceDirName":"frameworks-libraries/backend/fastapi","slug":"/frameworks-libraries/backend/fastapi/orm","permalink":"/docs/frameworks-libraries/backend/fastapi/orm","draft":false,"unlisted":false,"editUrl":"https://github.com/imdeepmind/imdeepmind.github.io/blob/main/docs/frameworks-libraries/backend/fastapi/orm.md","tags":[],"version":"current","lastUpdatedBy":"Abhishek Chatterjee","lastUpdatedAt":1749212834000,"sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Authentication & Security","permalink":"/docs/frameworks-libraries/backend/fastapi/auth"},"next":{"title":"Advanced FastAPI Features","permalink":"/docs/frameworks-libraries/backend/fastapi/advanced-features"}}');var i=n(74848),r=n(28453);const t={sidebar_position:6},l="ORMs",o={},d=[{value:"Connecting to Databases (SQL &amp; NoSQL)",id:"connecting-to-databases-sql--nosql",level:2},{value:"Key Concepts",id:"key-concepts",level:3},{value:"SQL Databases with SQLAlchemy Core/ORM",id:"sql-databases-with-sqlalchemy-coreorm",level:2},{value:"(A) SQLAlchemy ORM Setup",id:"a-sqlalchemy-orm-setup",level:3},{value:"(B) Using the ORM in FastAPI",id:"b-using-the-orm-in-fastapi",level:3},{value:"Async SQL with SQLAlchemy + Databases",id:"async-sql-with-sqlalchemy--databases",level:2},{value:"(A) Async SQLAlchemy Setup",id:"a-async-sqlalchemy-setup",level:3},{value:"(B) FastAPI Async Route",id:"b-fastapi-async-route",level:3},{value:"NoSQL with MongoDB (Motor), Redis, etc.",id:"nosql-with-mongodb-motor-redis-etc",level:2},{value:"(A) MongoDB (Motor - Async)",id:"a-mongodb-motor---async",level:3},{value:"(B) Redis (Caching/Sessions)",id:"b-redis-cachingsessions",level:3},{value:"Database Migrations with Alembic",id:"database-migrations-with-alembic",level:2},{value:"(A) Setup Alembic",id:"a-setup-alembic",level:3},{value:"(B) Creating &amp; Running Migrations",id:"b-creating--running-migrations",level:3},{value:"Pydantic Models \u2194 Database Models (ORM Pattern)",id:"pydantic-models--database-models-orm-pattern",level:2},{value:"(A) SQLAlchemy Model \u2192 Pydantic Model",id:"a-sqlalchemy-model--pydantic-model",level:3},{value:"(B) Using Pydantic with ORM",id:"b-using-pydantic-with-orm",level:3}];function c(e){const s={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"orms",children:"ORMs"})}),"\n",(0,i.jsxs)(s.p,{children:["FastAPI works seamlessly with various databases (SQL & NoSQL) and ORMs (Object-Relational Mappers). Below is a ",(0,i.jsx)(s.strong,{children:"detailed breakdown"})," of database integration, including ",(0,i.jsx)(s.strong,{children:"SQLAlchemy (sync/async), NoSQL (MongoDB, Redis), migrations (Alembic), and Pydantic \u2194 ORM model conversions"}),"."]}),"\n",(0,i.jsx)(s.h2,{id:"connecting-to-databases-sql--nosql",children:"Connecting to Databases (SQL & NoSQL)"}),"\n",(0,i.jsx)(s.p,{children:"FastAPI is database-agnostic but commonly uses:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"SQL Databases"}),": PostgreSQL, MySQL, SQLite (via SQLAlchemy, asyncpg, etc.)"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"NoSQL Databases"}),": MongoDB (Motor), Redis, DynamoDB, etc."]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"key-concepts",children:"Key Concepts"}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Database Type"}),(0,i.jsx)(s.th,{children:"Python Libraries"}),(0,i.jsx)(s.th,{children:"Use Case"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"SQL (Relational)"})}),(0,i.jsxs)(s.td,{children:[(0,i.jsx)(s.code,{children:"SQLAlchemy"}),", ",(0,i.jsx)(s.code,{children:"databases"}),", ",(0,i.jsx)(s.code,{children:"asyncpg"})]}),(0,i.jsx)(s.td,{children:"Structured data, transactions"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"NoSQL (Document)"})}),(0,i.jsxs)(s.td,{children:[(0,i.jsx)(s.code,{children:"Motor"})," (MongoDB), ",(0,i.jsx)(s.code,{children:"redis-py"})]}),(0,i.jsx)(s.td,{children:"Flexible schemas, high speed"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"Key-Value Store"})}),(0,i.jsxs)(s.td,{children:[(0,i.jsx)(s.code,{children:"redis"}),", ",(0,i.jsx)(s.code,{children:"aioredis"})]}),(0,i.jsx)(s.td,{children:"Caching, sessions"})]})]})]}),"\n",(0,i.jsx)(s.h2,{id:"sql-databases-with-sqlalchemy-coreorm",children:"SQL Databases with SQLAlchemy Core/ORM"}),"\n",(0,i.jsx)(s.p,{children:"SQLAlchemy provides two approaches:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Core"})," (Low-level SQL abstraction)"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"ORM"})," (High-level object mapping)"]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"a-sqlalchemy-orm-setup",children:"(A) SQLAlchemy ORM Setup"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:'from sqlalchemy import create_engine, Column, Integer, String\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\n# Database URL (SQLite example)\nSQLALCHEMY_DATABASE_URL = "sqlite:///./test.db"\n\n# Engine & Session\nengine = create_engine(SQLALCHEMY_DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\nBase = declarative_base()\n\n# Define a model\nclass User(Base):\n    __tablename__ = "users"\n    id = Column(Integer, primary_key=True, index=True)\n    username = Column(String, unique=True)\n    email = Column(String, unique=True)\n\n# Create tables\nBase.metadata.create_all(bind=engine)\n'})}),"\n",(0,i.jsx)(s.h3,{id:"b-using-the-orm-in-fastapi",children:"(B) Using the ORM in FastAPI"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:'from fastapi import Depends, FastAPI\nfrom sqlalchemy.orm import Session\n\napp = FastAPI()\n\n# Dependency to get DB session\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n# Route using ORM\n@app.get("/users/{user_id}")\ndef read_user(user_id: int, db: Session = Depends(get_db)):\n    user = db.query(User).filter(User.id == user_id).first()\n    return user\n'})}),"\n",(0,i.jsx)(s.h2,{id:"async-sql-with-sqlalchemy--databases",children:"Async SQL with SQLAlchemy + Databases"}),"\n",(0,i.jsxs)(s.p,{children:["For ",(0,i.jsx)(s.strong,{children:"async support"}),", use:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"databases"})," (for async querying)"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"asyncpg"})," (PostgreSQL async driver)"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"SQLAlchemy 1.4+"})," (supports async)"]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"a-async-sqlalchemy-setup",children:"(A) Async SQLAlchemy Setup"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:'from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession\nfrom sqlalchemy.orm import sessionmaker\n\nASYNC_DATABASE_URL = "postgresql+asyncpg://user:password@localhost/db"\n\nasync_engine = create_async_engine(ASYNC_DATABASE_URL)\nAsyncSessionLocal = sessionmaker(async_engine, class_=AsyncSession, expire_on_commit=False)\n'})}),"\n",(0,i.jsx)(s.h3,{id:"b-fastapi-async-route",children:"(B) FastAPI Async Route"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:'from sqlalchemy.future import select\n\n@app.get("/async-users/{user_id}")\nasync def read_async_user(user_id: int, db: AsyncSession = Depends(get_db)):\n    result = await db.execute(select(User).where(User.id == user_id))\n    user = result.scalar_one_or_none()\n    return user\n'})}),"\n",(0,i.jsx)(s.h2,{id:"nosql-with-mongodb-motor-redis-etc",children:"NoSQL with MongoDB (Motor), Redis, etc."}),"\n",(0,i.jsx)(s.h3,{id:"a-mongodb-motor---async",children:"(A) MongoDB (Motor - Async)"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:'from motor.motor_asyncio import AsyncIOMotorClient\nfrom pymongo import MongoClient  # Sync version\n\n# Async MongoDB setup\nMONGO_URI = "mongodb://localhost:27017"\nasync_mongo_client = AsyncIOMotorClient(MONGO_URI)\ndb = async_mongo_client["fastapi_db"]\n\n# FastAPI route\n@app.get("/mongo-users/{user_id}")\nasync def get_mongo_user(user_id: str):\n    user = await db["users"].find_one({"_id": user_id})\n    return user\n'})}),"\n",(0,i.jsx)(s.h3,{id:"b-redis-cachingsessions",children:"(B) Redis (Caching/Sessions)"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:'import redis\n\n# Sync Redis\nredis_client = redis.Redis(host="localhost", port=6379)\n\n# Async Redis (aioredis)\nimport aioredis\nasync_redis = await aioredis.create_redis_pool("redis://localhost")\n\n# FastAPI route\n@app.get("/cache-data")\nasync def get_cached_data(key: str):\n    data = await async_redis.get(key)\n    return {"data": data}\n'})}),"\n",(0,i.jsx)(s.h2,{id:"database-migrations-with-alembic",children:"Database Migrations with Alembic"}),"\n",(0,i.jsxs)(s.p,{children:["Alembic handles ",(0,i.jsx)(s.strong,{children:"schema migrations"})," (SQLAlchemy only)."]}),"\n",(0,i.jsx)(s.h3,{id:"a-setup-alembic",children:"(A) Setup Alembic"}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsxs)(s.li,{children:["Install:","\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"pip install alembic\n"})}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["Initialize:","\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"alembic init alembic\n"})}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["Configure ",(0,i.jsx)(s.code,{children:"alembic.ini"}),":","\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ini",children:"sqlalchemy.url = postgresql://user:password@localhost/db\n"})}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["Modify ",(0,i.jsx)(s.code,{children:"env.py"})," (to detect models):","\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:"from models import Base\ntarget_metadata = Base.metadata\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"b-creating--running-migrations",children:"(B) Creating & Running Migrations"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:'# Generate a migration\nalembic revision --autogenerate -m "Create users table"\n\n# Apply migrations\nalembic upgrade head\n'})}),"\n",(0,i.jsx)(s.h2,{id:"pydantic-models--database-models-orm-pattern",children:"Pydantic Models \u2194 Database Models (ORM Pattern)"}),"\n",(0,i.jsxs)(s.p,{children:["To avoid mixing ",(0,i.jsx)(s.strong,{children:"database models"})," with ",(0,i.jsx)(s.strong,{children:"API schemas"}),", use separate Pydantic models."]}),"\n",(0,i.jsx)(s.h3,{id:"a-sqlalchemy-model--pydantic-model",children:"(A) SQLAlchemy Model \u2192 Pydantic Model"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:"from pydantic import BaseModel\n\nclass UserBase(BaseModel):\n    username: str\n    email: str\n\nclass UserCreate(UserBase):\n    password: str\n\nclass UserDB(UserBase):\n    id: int\n\n    class Config:\n        orm_mode = True  # Allows conversion from ORM objects\n"})}),"\n",(0,i.jsx)(s.h3,{id:"b-using-pydantic-with-orm",children:"(B) Using Pydantic with ORM"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:'@app.post("/users/", response_model=UserDB)\ndef create_user(user: UserCreate, db: Session = Depends(get_db)):\n    db_user = User(**user.dict())\n    db.add(db_user)\n    db.commit()\n    db.refresh(db_user)\n    return db_user  # Automatically converted to UserDB\n'})})]})}function h(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>t,x:()=>l});var a=n(96540);const i={},r=a.createContext(i);function t(e){const s=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),a.createElement(r.Provider,{value:s},e.children)}}}]);