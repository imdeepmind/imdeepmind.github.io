"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[5291],{88815:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>g,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"programming/programming-languages/go/goroutines/wait-group","title":"Wait Groups","description":"A wait group is an object that tracks the number of goroutines to wait for. We increment its counter when starting a goroutine and decrement it when a goroutine finishes. The main goroutine can then block until the counter drops to zero.","source":"@site/docs/programming/programming-languages/go/goroutines/wait-group.md","sourceDirName":"programming/programming-languages/go/goroutines","slug":"/programming/programming-languages/go/goroutines/wait-group","permalink":"/docs/programming/programming-languages/go/goroutines/wait-group","draft":false,"unlisted":false,"editUrl":"https://github.com/imdeepmind/imdeepmind.github.io/blob/main/docs/programming/programming-languages/go/goroutines/wait-group.md","tags":[],"version":"current","lastUpdatedBy":"Abhishek Chatterjee","lastUpdatedAt":1755251208000,"sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Introduction","permalink":"/docs/programming/programming-languages/go/goroutines/introduction"},"next":{"title":"Mutex","permalink":"/docs/programming/programming-languages/go/goroutines/mutex"}}');var t=i(74848),s=i(28453);const o={sidebar_position:2},a="Wait Groups",l={},c=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Example: Waiting for Multiple Goroutines",id:"example-waiting-for-multiple-goroutines",level:2},{value:"Why Use Wait Groups?",id:"why-use-wait-groups",level:2},{value:"Common Patterns",id:"common-patterns",level:2},{value:"Example: Parallel Data Processing",id:"example-parallel-data-processing",level:3},{value:"Example: Web Scraping (Simplified)",id:"example-web-scraping-simplified",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Limitations &amp; Pitfalls",id:"limitations--pitfalls",level:2}];function d(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"wait-groups",children:"Wait Groups"})}),"\n",(0,t.jsx)(e.p,{children:"A wait group is an object that tracks the number of goroutines to wait for. We increment its counter when starting a goroutine and decrement it when a goroutine finishes. The main goroutine can then block until the counter drops to zero."}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["Provided by the ",(0,t.jsx)(e.code,{children:"sync"})," package: ",(0,t.jsx)(e.code,{children:"sync.WaitGroup"})]}),"\n",(0,t.jsx)(e.li,{children:"Tracks active goroutines"}),"\n",(0,t.jsx)(e.li,{children:"Blocks until all goroutines signal completion"}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"Add(n)"}),": Increment the counter by ",(0,t.jsx)(e.code,{children:"n"})," (usually 1 per goroutine)"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"Done()"}),": Decrement the counter by 1 (called by each goroutine when finished)"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"Wait()"}),": Block until the counter is zero"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"example-waiting-for-multiple-goroutines",children:"Example: Waiting for Multiple Goroutines"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n    "sync"\n)\n\nfunc worker(id int, wg *sync.WaitGroup) {\n    defer wg.Done() // Signal completion\n    fmt.Printf("Worker %d starting\\n", id)\n    // Simulate work\n    fmt.Printf("Worker %d done\\n", id)\n}\n\nfunc main() {\n    var wg sync.WaitGroup\n    for i := 1; i <= 3; i++ {\n        wg.Add(1)\n        go worker(i, &wg)\n    }\n    wg.Wait() // Wait for all workers to finish\n    fmt.Println("All workers done!")\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"why-use-wait-groups",children:"Why Use Wait Groups?"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Ensure all goroutines complete before continuing"}),"\n",(0,t.jsx)(e.li,{children:"Avoid race conditions and premature exits"}),"\n",(0,t.jsx)(e.li,{children:"Useful for parallel processing, web scraping, batch jobs, etc."}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"common-patterns",children:"Common Patterns"}),"\n",(0,t.jsx)(e.h3,{id:"example-parallel-data-processing",children:"Example: Parallel Data Processing"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n    "sync"\n)\n\nfunc process(data int, wg *sync.WaitGroup, results chan<- int) {\n    defer wg.Done()\n    results <- data * 2 // Simulate processing\n}\n\nfunc main() {\n    var wg sync.WaitGroup\n    results := make(chan int, 5)\n    data := []int{1, 2, 3, 4, 5}\n    for _, d := range data {\n        wg.Add(1)\n        go process(d, &wg, results)\n    }\n    wg.Wait()\n    close(results)\n    for r := range results {\n        fmt.Println(r)\n    }\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"example-web-scraping-simplified",children:"Example: Web Scraping (Simplified)"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n    "sync"\n)\n\nfunc scrape(url string, wg *sync.WaitGroup) {\n    defer wg.Done()\n    fmt.Printf("Scraping %s\\n", url)\n    // Simulate scraping\n}\n\nfunc main() {\n    var wg sync.WaitGroup\n    urls := []string{"https://site1.com", "https://site2.com", "https://site3.com"}\n    for _, url := range urls {\n        wg.Add(1)\n        go scrape(url, &wg)\n    }\n    wg.Wait()\n    fmt.Println("All scraping done!")\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["Always call ",(0,t.jsx)(e.code,{children:"Done()"})," in a deferred statement to ensure it's executed"]}),"\n",(0,t.jsxs)(e.li,{children:["Match every ",(0,t.jsx)(e.code,{children:"Add(1)"})," with a corresponding ",(0,t.jsx)(e.code,{children:"Done()"})]}),"\n",(0,t.jsxs)(e.li,{children:["Never copy a ",(0,t.jsx)(e.code,{children:"WaitGroup"})," (always pass by pointer)"]}),"\n",(0,t.jsx)(e.li,{children:"Use with channels for collecting results"}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"limitations--pitfalls",children:"Limitations & Pitfalls"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["Calling ",(0,t.jsx)(e.code,{children:"Add()"})," after ",(0,t.jsx)(e.code,{children:"Wait()"})," has started can cause a panic"]}),"\n",(0,t.jsxs)(e.li,{children:["Forgetting to call ",(0,t.jsx)(e.code,{children:"Done()"})," leads to deadlocks"]}),"\n",(0,t.jsx)(e.li,{children:"Not thread-safe for copying"}),"\n"]})]})}function g(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}},28453:(n,e,i)=>{i.d(e,{R:()=>o,x:()=>a});var r=i(96540);const t={},s=r.createContext(t);function o(n){const e=r.useContext(s);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:o(n.components),r.createElement(s.Provider,{value:e},n.children)}}}]);