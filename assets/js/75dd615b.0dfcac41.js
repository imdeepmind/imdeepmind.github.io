"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[6809],{19067:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>h,contentTitle:()=>t,default:()=>a,frontMatter:()=>l,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"version-control/git/head-reflog","title":"HEAD and reflog","description":"HEAD in Git","source":"@site/docs/version-control/git/head-reflog.md","sourceDirName":"version-control/git","slug":"/version-control/git/head-reflog","permalink":"/docs/version-control/git/head-reflog","draft":false,"unlisted":false,"editUrl":"https://github.com/imdeepmind/imdeepmind.github.io/blob/main/docs/version-control/git/head-reflog.md","tags":[],"version":"current","lastUpdatedBy":"Abhishek Chatterjee","lastUpdatedAt":1735631792000,"sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Remote Repositories in Git","permalink":"/docs/version-control/git/remote-repositories"},"next":{"title":"Stashing in Git","permalink":"/docs/version-control/git/stashing"}}');var r=s(74848),c=s(28453);const l={sidebar_position:6},t="HEAD and reflog",h={},o=[{value:"HEAD in Git",id:"head-in-git",level:2},{value:"Commands Involving HEAD",id:"commands-involving-head",level:3},{value:"Git Reflog",id:"git-reflog",level:2},{value:"Viewing the Reflog",id:"viewing-the-reflog",level:3},{value:"Recovering Changes with Reflog",id:"recovering-changes-with-reflog",level:3},{value:"Cleaning Up the Reflog",id:"cleaning-up-the-reflog",level:3},{value:"Best Practices",id:"best-practices",level:3},{value:"Recovering a Deleted Branch Using Reflog",id:"recovering-a-deleted-branch-using-reflog",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"head-and-reflog",children:"HEAD and reflog"})}),"\n",(0,r.jsx)(n.h2,{id:"head-in-git",children:"HEAD in Git"}),"\n",(0,r.jsxs)(n.p,{children:["In Git, ",(0,r.jsx)(n.strong,{children:"HEAD"})," is a pointer that refers to the current branch or commit your working directory is based on. It represents the current state of your repository and plays a crucial role in navigating and managing changes."]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"HEAD as a Pointer"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"HEAD"})," typically points to the tip (latest commit) of the current branch."]}),"\n",(0,r.jsxs)(n.li,{children:["Example: If you are on the ",(0,r.jsx)(n.code,{children:"main"})," branch, ",(0,r.jsx)(n.code,{children:"HEAD"})," points to the latest commit on ",(0,r.jsx)(n.code,{children:"main"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Detached HEAD"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A detached HEAD occurs when ",(0,r.jsx)(n.code,{children:"HEAD"})," points directly to a commit instead of a branch."]}),"\n",(0,r.jsxs)(n.li,{children:["This can happen when you check out a specific commit:","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"git checkout <commit-hash>\n"})}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:"Changes made in a detached HEAD state are not linked to any branch and need to be explicitly committed to a branch if you want to retain them."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"HEAD and Branches"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["When you switch branches using ",(0,r.jsx)(n.code,{children:"git checkout"})," or ",(0,r.jsx)(n.code,{children:"git switch"}),", the HEAD pointer moves to the latest commit of the branch you switch to."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Symbolic Reference"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["HEAD is a symbolic reference, meaning it indirectly refers to a commit through a branch name. For example:","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ref: refs/heads/main\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"commands-involving-head",children:"Commands Involving HEAD"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Viewing HEAD"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"cat .git/HEAD\n"})}),"\n",(0,r.jsx)(n.p,{children:"This will display the branch or commit that HEAD points to."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Resetting HEAD"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Reset HEAD to a previous commit:","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"git reset <commit-hash>\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Reset HEAD and the working directory:","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"git reset --hard <commit-hash>\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Reattaching HEAD"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["To reattach a detached HEAD to a branch:","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"git switch <branch-name>\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Checking Out a Commit with Detached HEAD"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"git checkout <commit-hash>\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"HEAD^ and HEAD~"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"HEAD^"})," refers to the parent of the current commit."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"HEAD~<n>"})," refers to the commit n steps before the current HEAD.\nExample:","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"git checkout HEAD~2\n"})}),"\n","This moves HEAD to two commits before the current commit."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"git-reflog",children:"Git Reflog"}),"\n",(0,r.jsxs)(n.p,{children:["The Git ",(0,r.jsx)(n.strong,{children:"reflog"})," (reference log) is a mechanism that records updates to the HEAD and branch references in your repository. It helps you track changes to HEAD, even if those changes are not part of the branch history."]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"What Reflog Tracks"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Every time you change HEAD, such as switching branches, resetting, rebasing, or merging, the reflog records the update."}),"\n",(0,r.jsx)(n.li,{children:"Reflog entries are local and not shared with remote repositories."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Reflog Retention"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"By default, Git retains reflog entries for 90 days."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Safety Net"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Reflog is a powerful tool for recovering commits or branches that were accidentally deleted or reset."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"viewing-the-reflog",children:"Viewing the Reflog"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Basic Command"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"git reflog\n"})}),"\n",(0,r.jsx)(n.p,{children:"This shows a list of recent changes to HEAD, including the commit hash, action performed, and a brief description."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Viewing Reflog for a Specific Branch"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"git reflog show <branch-name>\n"})}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"git reflog show main\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Reflog Entries Format"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Example output:","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"d1e8c6b (HEAD -> main) HEAD@{0}: commit: Fix bug in feature\na7c9f3a HEAD@{1}: checkout: moving from feature to main\nf2d4e5b HEAD@{2}: commit: Add new feature\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["The syntax includes:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"The commit hash."}),"\n",(0,r.jsxs)(n.li,{children:["The reference (e.g., ",(0,r.jsx)(n.code,{children:"HEAD@{n}"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:["The action performed (e.g., ",(0,r.jsx)(n.code,{children:"commit"}),", ",(0,r.jsx)(n.code,{children:"checkout"}),", etc.)."]}),"\n",(0,r.jsx)(n.li,{children:"A description of the action."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"recovering-changes-with-reflog",children:"Recovering Changes with Reflog"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Resetting to a Specific Reflog Entry"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use the ",(0,r.jsx)(n.code,{children:"HEAD@{n}"})," notation to reset to a previous state:","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"git reset --hard HEAD@{2}\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Checking Out a Commit from Reflog"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"git checkout HEAD@{n}\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Creating a Branch from a Reflog Commit"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["If you find a commit in the reflog that you want to preserve, you can create a branch from it:","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"git branch <new-branch-name> HEAD@{n}\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"cleaning-up-the-reflog",children:"Cleaning Up the Reflog"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Expire Old Entries"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Remove entries older than a specific time:","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"git reflog expire --expire=30.days.ago --all\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Garbage Collection"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Prune unreachable objects from the reflog:","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"git gc --prune=now\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Use Reflog for Recovery"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"If you\u2019ve accidentally deleted a branch or commit, reflog can help you recover it."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Check Reflog Before Force Push"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["If you\u2019re unsure about the state of your repository after a reset or rebase, use ",(0,r.jsx)(n.code,{children:"git reflog"})," to verify the history."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Avoid Overwriting Reflog Entries"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Be cautious with commands like ",(0,r.jsx)(n.code,{children:"git gc"})," and ",(0,r.jsx)(n.code,{children:"git reflog expire"})," as they permanently delete reflog entries."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"recovering-a-deleted-branch-using-reflog",children:"Recovering a Deleted Branch Using Reflog"}),"\n",(0,r.jsx)(n.p,{children:"If you\u2019ve accidentally deleted a branch, you can recover it using the reflog. Here are the steps:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Find the Commit Hash"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use the reflog to locate the commit where the branch was last present:","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"git reflog\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Look for entries associated with the deleted branch. For example:","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"a1b2c3d HEAD@{2}: checkout: moving from deleted-branch to main\nf3e4d5c HEAD@{3}: commit: Work on feature\n"})}),"\n","Here, ",(0,r.jsx)(n.code,{children:"a1b2c3d"})," is the commit hash of the deleted branch."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Create a New Branch"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use the commit hash to recreate the branch:","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"git branch <branch-name> <commit-hash>\n"})}),"\n","Example:","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"git branch deleted-branch a1b2c3d\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Switch to the Recovered Branch"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["After recreating the branch, you can switch to it:","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"git switch deleted-branch\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]})}function a(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>t});var i=s(96540);const r={},c=i.createContext(r);function l(e){const n=i.useContext(c);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(c.Provider,{value:n},e.children)}}}]);