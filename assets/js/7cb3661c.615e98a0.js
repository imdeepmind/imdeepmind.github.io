"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[4088],{94464:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>s,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"programming/programming-languages/python/exceptions","title":"Exception Handling","description":"Exception handling in Python is a powerful feature that allows a program to deal with errors (exceptions) in a controlled manner. It prevents abrupt termination of the program and allows the developer to handle errors in a way that is appropriate to the context.","source":"@site/docs/programming/programming-languages/python/exceptions.md","sourceDirName":"programming/programming-languages/python","slug":"/programming/programming-languages/python/exceptions","permalink":"/docs/programming/programming-languages/python/exceptions","draft":false,"unlisted":false,"editUrl":"https://github.com/imdeepmind/imdeepmind.github.io/blob/main/docs/programming/programming-languages/python/exceptions.md","tags":[],"version":"current","lastUpdatedBy":"Abhishek Chatterjee","lastUpdatedAt":1749211863000,"sidebarPosition":10,"frontMatter":{"sidebar_position":10},"sidebar":"tutorialSidebar","previous":{"title":"Object-Oriented Programming (OOP)","permalink":"/docs/programming/programming-languages/python/oop"},"next":{"title":"Context Managers","permalink":"/docs/programming/programming-languages/python/context-manager"}}');var o=i(74848),t=i(28453);const s={sidebar_position:10},c="Exception Handling",l={},a=[{value:"Key Concepts",id:"key-concepts",level:2},{value:"Syntax of Exception Handling",id:"syntax-of-exception-handling",level:2},{value:"Key Components of Exception Handling",id:"key-components-of-exception-handling",level:2},{value:"Example of Multiple Except Clauses",id:"example-of-multiple-except-clauses",level:2},{value:"Raising Exceptions",id:"raising-exceptions",level:2},{value:"Custom Exceptions",id:"custom-exceptions",level:2},{value:"Best Practices",id:"best-practices",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"exception-handling",children:"Exception Handling"})}),"\n",(0,o.jsx)(n.p,{children:"Exception handling in Python is a powerful feature that allows a program to deal with errors (exceptions) in a controlled manner. It prevents abrupt termination of the program and allows the developer to handle errors in a way that is appropriate to the context."}),"\n",(0,o.jsx)(n.h2,{id:"key-concepts",children:"Key Concepts"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Exceptions"}),": Exceptions are events that disrupt the normal flow of a program's execution. Examples include division by zero, file not found, or network errors."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Error Types"}),": Python categorizes exceptions into several built-in types, including:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"ZeroDivisionError"}),": Raised when attempting to divide by zero."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"FileNotFoundError"}),": Raised when trying to open a file that does not exist."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"ValueError"}),": Raised when a function receives an argument of the correct type but inappropriate value (e.g., trying to convert a non-numeric string to an integer)."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"IndexError"}),": Raised when trying to access an index that is out of range."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"TypeError"}),": Raised when an operation or function is applied to an object of inappropriate type."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Handling Exceptions"}),": Python provides a way to handle exceptions using ",(0,o.jsx)(n.code,{children:"try"}),", ",(0,o.jsx)(n.code,{children:"except"}),", ",(0,o.jsx)(n.code,{children:"else"}),", and ",(0,o.jsx)(n.code,{children:"finally"})," blocks."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"syntax-of-exception-handling",children:"Syntax of Exception Handling"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'try:\n    # Code that may raise an exception\n    result = 10 / 0  # Example of division by zero error\nexcept ZeroDivisionError as e:\n    # Handling specific exception\n    print(f"Error: {e}")\nexcept Exception as e:\n    # Handling any other exceptions\n    print(f"An unexpected error occurred: {e}")\nelse:\n    # Code that runs if no exception occurs\n    print("No error occurred.")\nfinally:\n    # Code that will run no matter what (e.g., cleanup)\n    print("Execution finished.")\n'})}),"\n",(0,o.jsx)(n.h2,{id:"key-components-of-exception-handling",children:"Key Components of Exception Handling"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"try Block"}),": The ",(0,o.jsx)(n.code,{children:"try"})," block contains code that might raise an exception. If an exception occurs, the rest of the ",(0,o.jsx)(n.code,{children:"try"})," block is skipped, and control is transferred to the ",(0,o.jsx)(n.code,{children:"except"})," block."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"except Block"}),": This block catches the exception. We can catch specific exceptions (e.g., ",(0,o.jsx)(n.code,{children:"except ZeroDivisionError"}),") or use a general ",(0,o.jsx)(n.code,{children:"except Exception"})," to catch any exception. The exception object is optionally bound to a variable, allowing We to access the error details."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"else Block"}),": The ",(0,o.jsx)(n.code,{children:"else"})," block, if present, will run only if no exceptions were raised in the ",(0,o.jsx)(n.code,{children:"try"})," block. It\u2019s useful for code that should execute if everything goes well, such as clean up operations or actions after successful execution."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"finally Block"}),": This block is always executed, regardless of whether an exception occurred. It is often used for cleanup operations, like closing files, releasing resources, or restoring the system state."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"example-of-multiple-except-clauses",children:"Example of Multiple Except Clauses"}),"\n",(0,o.jsxs)(n.p,{children:["We can handle different types of exceptions in separate ",(0,o.jsx)(n.code,{children:"except"})," clauses."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'try:\n    value = int(input("Enter a number: "))\n    result = 10 / value\nexcept ValueError:\n    print("Invalid input! Please enter a valid number.")\nexcept ZeroDivisionError:\n    print("Cannot divide by zero!")\nexcept Exception as e:\n    print(f"An unexpected error occurred: {e}")\nelse:\n    print(f"Result is: {result}")\nfinally:\n    print("Execution finished.")\n'})}),"\n",(0,o.jsx)(n.h2,{id:"raising-exceptions",children:"Raising Exceptions"}),"\n",(0,o.jsxs)(n.p,{children:["We can raise exceptions manually using the ",(0,o.jsx)(n.code,{children:"raise"})," keyword, which is useful for error handling in custom logic."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'def check_positive(value):\n    if value < 0:\n        raise ValueError("The value must be positive")\n    return value\n\ntry:\n    check_positive(-5)\nexcept ValueError as e:\n    print(f"Error: {e}")\n'})}),"\n",(0,o.jsx)(n.h2,{id:"custom-exceptions",children:"Custom Exceptions"}),"\n",(0,o.jsxs)(n.p,{children:["We can define custom exceptions by subclassing the built-in ",(0,o.jsx)(n.code,{children:"Exception"})," class. This is useful for creating domain-specific error messages."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'class CustomError(Exception):\n    pass\n\ntry:\n    raise CustomError("This is a custom error")\nexcept CustomError as e:\n    print(f"Caught custom exception: {e}")\n'})}),"\n",(0,o.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Avoid Catching Broad Exceptions"}),": It\u2019s best practice to catch specific exceptions rather than catching all exceptions using ",(0,o.jsx)(n.code,{children:"except Exception"}),". This ensures that only the expected exceptions are handled, and unexpected ones are not silently ignored."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsxs)(n.strong,{children:["Use ",(0,o.jsx)(n.code,{children:"else"})," for Clean Code"]}),": If We need to run code after the ",(0,o.jsx)(n.code,{children:"try"})," block that only depends on the absence of exceptions, place it in the ",(0,o.jsx)(n.code,{children:"else"})," block. This keeps the code clean and readable."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsxs)(n.strong,{children:["Use ",(0,o.jsx)(n.code,{children:"finally"})," for Cleanup"]}),": Use the ",(0,o.jsx)(n.code,{children:"finally"})," block for cleanup actions such as closing files or releasing resources, regardless of whether an exception occurred."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Don\u2019t Overuse Exception Handling for Control Flow"}),": Exception handling should be used to deal with actual error conditions, not for normal program flow. Overusing exceptions to control program logic can lead to poor performance and harder-to-maintain code."]}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>c});var r=i(96540);const o={},t=r.createContext(o);function s(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);