"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[1383],{1501:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"programming-languages/python/metaprogramming","title":"Metaprogramming","description":"Metaprogramming refers to the ability of a program to treat other programs as data. It involves writing code that manipulates or generates other code at runtime, often modifying its behavior dynamically. Python is an excellent language for metaprogramming because of its dynamic nature, where classes and functions can be modified or generated on the fly. This gives developers a high degree of flexibility and power.","source":"@site/docs/programming-languages/python/metaprogramming.md","sourceDirName":"programming-languages/python","slug":"/programming-languages/python/metaprogramming","permalink":"/docs/programming-languages/python/metaprogramming","draft":false,"unlisted":false,"editUrl":"https://github.com/imdeepmind/imdeepmind.github.io/blob/main/docs/programming-languages/python/metaprogramming.md","tags":[],"version":"current","lastUpdatedBy":"Abhishek Chatterjee","lastUpdatedAt":1735560207000,"sidebarPosition":14,"frontMatter":{"sidebar_position":14},"sidebar":"tutorialSidebar","previous":{"title":"Multithreading, Multiprocessing, and Asyncio","permalink":"/docs/programming-languages/python/multiprocessing"},"next":{"title":"Decorators","permalink":"/docs/programming-languages/python/decorator"}}');var s=t(4848),i=t(8453);const r={sidebar_position:14},o="Metaprogramming",l={},c=[{value:"Introspection",id:"introspection",level:2},{value:"Decorators",id:"decorators",level:2},{value:"Metaclasses",id:"metaclasses",level:2},{value:"Dynamic Class Creation",id:"dynamic-class-creation",level:2},{value:"Customizing Attribute Access with <code>__getattr__</code>, <code>__setattr__</code>, and <code>__delattr__</code>",id:"customizing-attribute-access-with-__getattr__-__setattr__-and-__delattr__",level:2},{value:"Code Generation with <code>exec()</code> and <code>eval()</code>",id:"code-generation-with-exec-and-eval",level:2},{value:"Using <code>__call__</code> for Callable Objects",id:"using-__call__-for-callable-objects",level:2},{value:"Monkey Patching",id:"monkey-patching",level:2},{value:"When to Use Metaprogramming",id:"when-to-use-metaprogramming",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"metaprogramming",children:"Metaprogramming"})}),"\n",(0,s.jsx)(n.p,{children:"Metaprogramming refers to the ability of a program to treat other programs as data. It involves writing code that manipulates or generates other code at runtime, often modifying its behavior dynamically. Python is an excellent language for metaprogramming because of its dynamic nature, where classes and functions can be modified or generated on the fly. This gives developers a high degree of flexibility and power."}),"\n",(0,s.jsx)(n.p,{children:"Metaprogramming in Python is commonly achieved through the following techniques:"}),"\n",(0,s.jsx)(n.h2,{id:"introspection",children:"Introspection"}),"\n",(0,s.jsx)(n.p,{children:"Introspection refers to the ability of a program to examine the type or properties of an object at runtime. Python provides powerful introspection capabilities via functions and methods like:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"type()"}),": Returns the type of an object."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"dir()"}),": Lists all attributes of an object."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"id()"}),": Returns the identity of an object (memory address)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"getattr()"}),": Retrieves an attribute of an object by name."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"setattr()"}),": Sets an attribute on an object by name."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"hasattr()"}),": Checks if an object has a particular attribute."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"callable()"}),": Checks if an object is callable (a function or method)."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class MyClass:\n    def my_method(self):\n        return \"Hello, World!\"\n\nobj = MyClass()\nprint(type(obj))  # <class '__main__.MyClass'>\nprint(dir(obj))   # Lists all methods and attributes, including 'my_method'\nprint(getattr(obj, 'my_method')())  # Calls 'my_method' dynamically\n"})}),"\n",(0,s.jsx)(n.h2,{id:"decorators",children:"Decorators"}),"\n",(0,s.jsxs)(n.p,{children:["Check note on ",(0,s.jsx)(n.a,{href:"/docs/programming-languages/python/decorator",children:"Decorators"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"metaclasses",children:"Metaclasses"}),"\n",(0,s.jsx)(n.p,{children:"A metaclass is a class of a class. In Python, classes are instances of metaclasses. Metaclasses allow you to control the creation of classes and modify their behavior at the time they are defined."}),"\n",(0,s.jsxs)(n.p,{children:["In Python, ",(0,s.jsx)(n.code,{children:"type"})," is the default metaclass. You can create a custom metaclass by inheriting from ",(0,s.jsx)(n.code,{children:"type"})," and overriding methods like ",(0,s.jsx)(n.code,{children:"__new__"})," or ",(0,s.jsx)(n.code,{children:"__init__"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Example of a metaclass:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'class MyMeta(type):\n    def __new__(cls, name, bases, dct):\n        dct[\'greeting\'] = "Hello, World!"  # Add a new attribute to the class\n        return super().__new__(cls, name, bases, dct)\n\nclass MyClass(metaclass=MyMeta):\n    pass\n\nprint(MyClass.greeting)  # "Hello, World!"\n'})}),"\n",(0,s.jsxs)(n.p,{children:["In this example, the metaclass ",(0,s.jsx)(n.code,{children:"MyMeta"})," adds a new attribute ",(0,s.jsx)(n.code,{children:"greeting"})," to the class ",(0,s.jsx)(n.code,{children:"MyClass"})," during its creation."]}),"\n",(0,s.jsx)(n.h2,{id:"dynamic-class-creation",children:"Dynamic Class Creation"}),"\n",(0,s.jsxs)(n.p,{children:["Python allows you to create classes dynamically at runtime using the ",(0,s.jsx)(n.code,{children:"type()"})," function. This is a form of metaprogramming where you define classes on the fly."]}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def dynamic_class(name, base_classes, class_dict):\n    return type(name, base_classes, class_dict)\n\n# Create a new class dynamically\nNewClass = dynamic_class('NewClass', (object,), {'greeting': 'Hello, Dynamic!'})\n\n# Instantiate and access the attribute\nobj = NewClass()\nprint(obj.greeting)  # \"Hello, Dynamic!\"\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"customizing-attribute-access-with-__getattr__-__setattr__-and-__delattr__",children:["Customizing Attribute Access with ",(0,s.jsx)(n.code,{children:"__getattr__"}),", ",(0,s.jsx)(n.code,{children:"__setattr__"}),", and ",(0,s.jsx)(n.code,{children:"__delattr__"})]}),"\n",(0,s.jsxs)(n.p,{children:["You can customize the behavior of attribute access, modification, and deletion in Python by overriding the special methods ",(0,s.jsx)(n.code,{children:"__getattr__"}),", ",(0,s.jsx)(n.code,{children:"__setattr__"}),", and ",(0,s.jsx)(n.code,{children:"__delattr__"}),". These methods are called when an attribute is accessed, set, or deleted, respectively."]}),"\n",(0,s.jsxs)(n.p,{children:["Example of ",(0,s.jsx)(n.code,{children:"__getattr__"})," and ",(0,s.jsx)(n.code,{children:"__setattr__"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'class MyClass:\n    def __init__(self):\n        self._data = {}\n\n    def __getattr__(self, name):\n        if name in self._data:\n            return self._data[name]\n        else:\n            return f"Attribute {name} not found"\n\n    def __setattr__(self, name, value):\n        if name == "_data":\n            super().__setattr__(name, value)\n        else:\n            self._data[name] = value\n\nobj = MyClass()\nobj.new_attribute = 42\nprint(obj.new_attribute)  # 42\nprint(obj.some_attribute)  # "Attribute some_attribute not found"\n'})}),"\n",(0,s.jsxs)(n.h2,{id:"code-generation-with-exec-and-eval",children:["Code Generation with ",(0,s.jsx)(n.code,{children:"exec()"})," and ",(0,s.jsx)(n.code,{children:"eval()"})]}),"\n",(0,s.jsxs)(n.p,{children:["Python allows you to execute dynamically generated code using the ",(0,s.jsx)(n.code,{children:"exec()"})," and ",(0,s.jsx)(n.code,{children:"eval()"})," functions."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"eval()"})," evaluates a string as a Python expression and returns the result."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"exec()"})," executes a string as Python code, but it does not return any value."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Example using ",(0,s.jsx)(n.code,{children:"eval()"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'expression = "3 + 5"\nresult = eval(expression)\nprint(result)  # 8\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Example using ",(0,s.jsx)(n.code,{children:"exec()"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'code = """\ndef dynamic_func():\n    return "This is dynamically generated!"\n"""\nexec(code)\nprint(dynamic_func())  # This is dynamically generated!\n'})}),"\n",(0,s.jsxs)(n.h2,{id:"using-__call__-for-callable-objects",children:["Using ",(0,s.jsx)(n.code,{children:"__call__"})," for Callable Objects"]}),"\n",(0,s.jsxs)(n.p,{children:["In Python, you can make instances of a class callable by defining the ",(0,s.jsx)(n.code,{children:"__call__"})," method. This is another form of metaprogramming, allowing objects to behave like functions."]}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'class CallableClass:\n    def __call__(self, name):\n        print(f"Hello, {name}!")\n\nobj = CallableClass()\nobj("World")  # Hello, World!\n'})}),"\n",(0,s.jsx)(n.h2,{id:"monkey-patching",children:"Monkey Patching"}),"\n",(0,s.jsx)(n.p,{children:"Monkey patching is the practice of dynamically modifying or extending the behavior of classes or modules at runtime. This can be useful in certain situations but should be used with caution, as it can lead to code that is difficult to understand and maintain."}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"import math\n\n# Original behavior\nprint(math.sqrt(9))  # 3.0\n\n# Monkey patching sqrt method\ndef new_sqrt(x):\n    return x * 2\n\nmath.sqrt = new_sqrt\nprint(math.sqrt(9))  # 18\n"})}),"\n",(0,s.jsx)(n.h2,{id:"when-to-use-metaprogramming",children:"When to Use Metaprogramming"}),"\n",(0,s.jsx)(n.p,{children:"While metaprogramming provides a great deal of flexibility, it should be used judiciously. It can make code more dynamic and adaptable, but it can also introduce complexity and make debugging and understanding the code harder. Here are some appropriate use cases:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Dynamic code generation"}),": When you need to generate classes or functions based on runtime data."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Code reuse and abstraction"}),": When you want to abstract common logic across different classes or functions."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Validation and constraint checking"}),": To enforce rules dynamically (e.g., enforcing specific patterns in attributes or method calls)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Decorator patterns"}),": To add or modify functionality of existing code in a clean and reusable way."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Testing frameworks"}),": To generate tests dynamically based on input data."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var a=t(6540);const s={},i=a.createContext(s);function r(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);