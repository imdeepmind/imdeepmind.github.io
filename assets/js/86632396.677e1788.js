"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[8440],{78382:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>u,default:()=>c,frontMatter:()=>l,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"data-structure-and-algorithms/algorithms/queue","title":"Queue","description":"A queue is a linear data structure that follows the First In First Out (FIFO) principle. Elements are added at one end (called the rear) and removed from the other end (called the front).","source":"@site/docs/data-structure-and-algorithms/algorithms/queue.md","sourceDirName":"data-structure-and-algorithms/algorithms","slug":"/data-structure-and-algorithms/algorithms/queue","permalink":"/docs/data-structure-and-algorithms/algorithms/queue","draft":false,"unlisted":false,"editUrl":"https://github.com/imdeepmind/imdeepmind.github.io/blob/main/docs/data-structure-and-algorithms/algorithms/queue.md","tags":[],"version":"current","lastUpdatedBy":"Abhishek Chatterjee","lastUpdatedAt":1754751812000,"sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"tutorialSidebar","previous":{"title":"Stack","permalink":"/docs/data-structure-and-algorithms/algorithms/stack"},"next":{"title":"Introduction","permalink":"/docs/data-structure-and-algorithms/algorithms/tree/introduction"}}');var t=r(74848),s=r(28453);const l={sidebar_position:7},u="Queue",d={},a=[{value:"Main Data Structure Implementation in Python",id:"main-data-structure-implementation-in-python",level:2},{value:"Using List",id:"using-list",level:3},{value:"Using <code>collections.deque</code>",id:"using-collectionsdeque",level:3},{value:"Using <code>queue.Queue</code> from Standard Library",id:"using-queuequeue-from-standard-library",level:3},{value:"Common Algorithms with Queues",id:"common-algorithms-with-queues",level:2},{value:"Level Order Traversal in Binary Trees",id:"level-order-traversal-in-binary-trees",level:3},{value:"Breadth-First Search (BFS) in Graphs",id:"breadth-first-search-bfs-in-graphs",level:3},{value:"Generate Binary Numbers",id:"generate-binary-numbers",level:3},{value:"Time Complexity",id:"time-complexity",level:2},{value:"Use Cases",id:"use-cases",level:2},{value:"Variations of Queue",id:"variations-of-queue",level:2},{value:"Circular Queue",id:"circular-queue",level:3},{value:"Priority Queue",id:"priority-queue",level:3},{value:"Double-Ended Queue (Deque)",id:"double-ended-queue-deque",level:3}];function o(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"queue",children:"Queue"})}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.strong,{children:"queue"})," is a linear data structure that follows the ",(0,t.jsx)(n.strong,{children:"First In First Out (FIFO)"})," principle. Elements are added at one end (called the ",(0,t.jsx)(n.strong,{children:"rear"}),") and removed from the other end (called the ",(0,t.jsx)(n.strong,{children:"front"}),")."]}),"\n",(0,t.jsx)(n.h2,{id:"main-data-structure-implementation-in-python",children:"Main Data Structure Implementation in Python"}),"\n",(0,t.jsx)(n.h3,{id:"using-list",children:"Using List"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Initialize a queue\nqueue = []\n\n# Enqueue operation\nqueue.append(10)\nqueue.append(20)\n\n# Dequeue operation\nif queue:\n    element = queue.pop(0)  # Removes the first element\n    print("Dequeued element:", element)\n\n# Check if queue is empty\nprint("Is the queue empty?", len(queue) == 0)\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Drawback:"})," Removing elements from the front (pop(0)) has O(n) time complexity because it requires shifting all elements."]}),"\n",(0,t.jsxs)(n.h3,{id:"using-collectionsdeque",children:["Using ",(0,t.jsx)(n.code,{children:"collections.deque"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from collections import deque\n\n# Initialize a queue\nqueue = deque()\n\n# Enqueue operation\nqueue.append(10)\nqueue.append(20)\n\n# Dequeue operation\nif queue:\n    element = queue.popleft()  # O(1) operation\n    print("Dequeued element:", element)\n\n# Check if queue is empty\nprint("Is the queue empty?", len(queue) == 0)\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Advantage:"})," Efficient O(1) time complexity for both enqueue and dequeue operations."]}),"\n",(0,t.jsxs)(n.h3,{id:"using-queuequeue-from-standard-library",children:["Using ",(0,t.jsx)(n.code,{children:"queue.Queue"})," from Standard Library"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from queue import Queue\n\n# Initialize a queue\nq = Queue()\n\n# Enqueue operation\nq.put(10)\nq.put(20)\n\n# Dequeue operation\nif not q.empty():\n    element = q.get()  # O(1) operation\n    print("Dequeued element:", element)\n\n# Check if queue is empty\nprint("Is the queue empty?", q.empty())\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Advantage:"})," Thread-safe implementation for multithreading environments."]}),"\n",(0,t.jsx)(n.h2,{id:"common-algorithms-with-queues",children:"Common Algorithms with Queues"}),"\n",(0,t.jsx)(n.h3,{id:"level-order-traversal-in-binary-trees",children:"Level Order Traversal in Binary Trees"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from collections import deque\n\ndef level_order_traversal(root):\n    if not root:\n        return []\n\n    result = []\n    queue = deque([root])\n\n    while queue:\n        level = []\n        for _ in range(len(queue)):\n            node = queue.popleft()\n            level.append(node.val)\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n        result.append(level)\n    return result\n"})}),"\n",(0,t.jsx)(n.h3,{id:"breadth-first-search-bfs-in-graphs",children:"Breadth-First Search (BFS) in Graphs"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from collections import deque\n\ndef bfs(graph, start):\n    visited = set()\n    queue = deque([start])\n    result = []\n\n    while queue:\n        node = queue.popleft()\n        if node not in visited:\n            visited.add(node)\n            result.append(node)\n            for neighbor in graph[node]:\n                if neighbor not in visited:\n                    queue.append(neighbor)\n    return result\n"})}),"\n",(0,t.jsx)(n.h3,{id:"generate-binary-numbers",children:"Generate Binary Numbers"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from collections import deque\n\ndef generate_binary_numbers(n):\n    result = []\n    queue = deque(["1"])\n\n    for _ in range(n):\n        binary = queue.popleft()\n        result.append(binary)\n        queue.append(binary + "0")\n        queue.append(binary + "1")\n\n    return result\n'})}),"\n",(0,t.jsx)(n.h2,{id:"time-complexity",children:"Time Complexity"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Operation"}),(0,t.jsx)(n.th,{children:"List"}),(0,t.jsx)(n.th,{children:(0,t.jsx)(n.code,{children:"deque"})}),(0,t.jsx)(n.th,{children:(0,t.jsx)(n.code,{children:"queue.Queue"})})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Enqueue"}),(0,t.jsx)(n.td,{children:"O(1)"}),(0,t.jsx)(n.td,{children:"O(1)"}),(0,t.jsx)(n.td,{children:"O(1)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Dequeue"}),(0,t.jsx)(n.td,{children:"O(n)"}),(0,t.jsx)(n.td,{children:"O(1)"}),(0,t.jsx)(n.td,{children:"O(1)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Access/Peek"}),(0,t.jsx)(n.td,{children:"O(1)"}),(0,t.jsx)(n.td,{children:"O(1)"}),(0,t.jsx)(n.td,{children:"O(1)"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"use-cases",children:"Use Cases"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Scheduling"}),": Used in task scheduling algorithms like Round Robin."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Breadth-First Search (BFS)"}),": Exploring nodes layer by layer in graphs or trees."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Data Buffers"}),": For managing data streams in IO operations."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Print Queue"}),": Managing a sequence of print jobs."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Order Processing"}),": Handling orders in the sequence they arrive."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Producer-Consumer Problem"}),": Queue is used to synchronize producer and consumer threads."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"variations-of-queue",children:"Variations of Queue"}),"\n",(0,t.jsx)(n.h3,{id:"circular-queue",children:"Circular Queue"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"A queue where the last position is connected to the first to make it circular."}),"\n",(0,t.jsx)(n.li,{children:"Efficient use of space."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'class CircularQueue:\n    def __init__(self, capacity):\n        self.queue = [None] * capacity\n        self.front = 0\n        self.rear = 0\n        self.capacity = capacity\n        self.size = 0\n\n    def enqueue(self, item):\n        if self.size == self.capacity:\n            raise OverflowError("Queue is full")\n        self.queue[self.rear] = item\n        self.rear = (self.rear + 1) % self.capacity\n        self.size += 1\n\n    def dequeue(self):\n        if self.size == 0:\n            raise IndexError("Queue is empty")\n        item = self.queue[self.front]\n        self.front = (self.front + 1) % self.capacity\n        self.size -= 1\n        return item\n\n    def is_empty(self):\n        return self.size == 0\n\n    def is_full(self):\n        return self.size == self.capacity\n'})}),"\n",(0,t.jsx)(n.h3,{id:"priority-queue",children:"Priority Queue"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Elements are dequeued based on priority rather than FIFO order."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import heapq\n\nclass PriorityQueue:\n    def __init__(self):\n        self.queue = []\n\n    def enqueue(self, priority, item):\n        heapq.heappush(self.queue, (priority, item))\n\n    def dequeue(self):\n        if not self.queue:\n            raise IndexError("Queue is empty")\n        return heapq.heappop(self.queue)[1]\n'})}),"\n",(0,t.jsx)(n.h3,{id:"double-ended-queue-deque",children:"Double-Ended Queue (Deque)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Allows insertion and deletion from both ends."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from collections import deque\n\ndeque_example = deque()\ndeque_example.append(10)       # Add to rear\ndeque_example.appendleft(20)  # Add to front\ndeque_example.pop()           # Remove from rear\ndeque_example.popleft()       # Remove from front\n"})})]})}function c(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>u});var i=r(96540);const t={},s=i.createContext(t);function l(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function u(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);