"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[846],{43621:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"ml/mcp/hello-world","title":"Hello World","description":"This section demonstrates how to create a simple \\"Hello World\\" MCP agent in both Python and TypeScript, using popular libraries: FastMCP for Python and modelcontextprotocol/sdk for TypeScript.","source":"@site/docs/ml/mcp/hello-world.md","sourceDirName":"ml/mcp","slug":"/ml/mcp/hello-world","permalink":"/docs/ml/mcp/hello-world","draft":false,"unlisted":false,"editUrl":"https://github.com/imdeepmind/imdeepmind.github.io/blob/main/docs/ml/mcp/hello-world.md","tags":[],"version":"current","lastUpdatedBy":"Abhishek Chatterjee","lastUpdatedAt":1755179325000,"sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Introduction","permalink":"/docs/ml/mcp/introduction"},"next":{"title":"Architecture","permalink":"/docs/ml/mcp/architecture"}}');var t=r(74848),s=r(28453);const i={sidebar_position:2},l="Hello World",c={},d=[{value:"Python Example",id:"python-example",level:2},{value:"TypeScript Example",id:"typescript-example",level:2}];function a(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"hello-world",children:"Hello World"})}),"\n",(0,t.jsx)(n.p,{children:'This section demonstrates how to create a simple "Hello World" MCP agent in both Python and TypeScript, using popular libraries: FastMCP for Python and modelcontextprotocol/sdk for TypeScript.'}),"\n",(0,t.jsx)(n.h2,{id:"python-example",children:"Python Example"}),"\n",(0,t.jsx)(n.p,{children:'FastMCP 2.0 is the actively maintained Python framework for building MCP-compliant servers and tools. The recommended way to create a "Hello World" MCP agent is:'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from fastmcp import FastMCP\n\nmcp = FastMCP("Hello World MCP \ud83d\ude80")\n\n@mcp.tool\ndef hello() -> str:\n    """Returns a friendly greeting."""\n    return "Hello, MCP!"\n\nif __name__ == "__main__":\n    mcp.run()\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Key Points:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Define our MCP server with ",(0,t.jsx)(n.code,{children:"FastMCP"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Register tools using the ",(0,t.jsx)(n.code,{children:"@mcp.tool"})," decorator."]}),"\n",(0,t.jsxs)(n.li,{children:["Start the server with ",(0,t.jsx)(n.code,{children:"mcp.run()"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"This approach is high-level, Pythonic, and aligns with the official FastMCP 2.0 documentation."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"typescript-example",children:"TypeScript Example"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"modelcontextprotocol/sdk"}),' package provides TypeScript tools for building MCP-compliant servers and tools. Here is a "Hello World" MCP server example, aligned with the official documentation:']}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";\nimport { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";\n\n// Create MCP server instance\nconst server = new McpServer({\n  name: "hello-world",\n  version: "1.0.0",\n  capabilities: {\n    resources: {},\n    tools: {},\n  },\n});\n\n// Register a simple tool\nserver.tool("hello", "Returns a friendly greeting", {}, async () => ({\n  content: [\n    {\n      type: "text",\n      text: "Hello, MCP!",\n    },\n  ],\n}));\n\n// Run the server using stdio transport\nasync function main() {\n  const transport = new StdioServerTransport();\n  await server.connect(transport);\n  console.error("Hello World MCP Server running on stdio");\n}\n\nmain().catch((error) => {\n  console.error("Fatal error in main():", error);\n  process.exit(1);\n});\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Key Points:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"McpServer"})," and ",(0,t.jsx)(n.code,{children:"StdioServerTransport"})," from the SDK."]}),"\n",(0,t.jsxs)(n.li,{children:["Register tools with ",(0,t.jsx)(n.code,{children:"server.tool"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Avoid using ",(0,t.jsx)(n.code,{children:"console.log"})," for STDIO servers; use ",(0,t.jsx)(n.code,{children:"console.error"})," for logging."]}),"\n",(0,t.jsxs)(n.li,{children:["Start the server with ",(0,t.jsx)(n.code,{children:"server.connect"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"This approach matches the official quickstart and best practices for MCP servers in TypeScript."}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>l});var o=r(96540);const t={},s=o.createContext(t);function i(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);