"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[5735],{66774:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"programming/programming-languages/python/decorator","title":"Decorators","description":"What are Decorators?","source":"@site/docs/programming/programming-languages/python/decorator.md","sourceDirName":"programming/programming-languages/python","slug":"/programming/programming-languages/python/decorator","permalink":"/docs/programming/programming-languages/python/decorator","draft":false,"unlisted":false,"editUrl":"https://github.com/imdeepmind/imdeepmind.github.io/blob/main/docs/programming/programming-languages/python/decorator.md","tags":[],"version":"current","lastUpdatedBy":"Abhishek Chatterjee","lastUpdatedAt":1749211863000,"sidebarPosition":17,"frontMatter":{"sidebar_position":17},"sidebar":"tutorialSidebar","previous":{"title":"Metaprogramming","permalink":"/docs/programming/programming-languages/python/metaprogramming"},"next":{"title":"Unit Testing","permalink":"/docs/programming/programming-languages/python/unit-test"}}');var s=r(74848),i=r(28453);const a={sidebar_position:17},o="Decorators",c={},l=[{value:"What are Decorators?",id:"what-are-decorators",level:2},{value:"Why Use Decorators?",id:"why-use-decorators",level:2},{value:"How Do Decorators Work?",id:"how-do-decorators-work",level:2},{value:"Creating and Using Decorators",id:"creating-and-using-decorators",level:2},{value:"Basic Decorator",id:"basic-decorator",level:3},{value:"Using Arguments in Decorators",id:"using-arguments-in-decorators",level:3},{value:"Chaining Decorators",id:"chaining-decorators",level:3},{value:"Using Decorators with Functions that Return Values",id:"using-decorators-with-functions-that-return-values",level:3},{value:"Decorators with Arguments",id:"decorators-with-arguments",level:3},{value:"Built-in Decorators in Python",id:"built-in-decorators-in-python",level:2},{value:"Practical Examples of Decorators",id:"practical-examples-of-decorators",level:2},{value:"Logging",id:"logging",level:3},{value:"Authentication",id:"authentication",level:3},{value:"Performance Monitoring",id:"performance-monitoring",level:3},{value:"Best Practices for Using Decorators",id:"best-practices-for-using-decorators",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"decorators",children:"Decorators"})}),"\n",(0,s.jsx)(n.h2,{id:"what-are-decorators",children:"What are Decorators?"}),"\n",(0,s.jsxs)(n.p,{children:["Decorators in Python are a powerful feature that allows you to modify or enhance the behavior of functions or classes ",(0,s.jsx)(n.strong,{children:"without modifying their actual code"}),". They are often used to wrap another function or method, adding extra functionality in a clean and reusable manner."]}),"\n",(0,s.jsx)(n.p,{children:"A decorator in Python is a callable (usually a function) that takes another function (or class) as its argument and returns a modified or extended version of that function (or class)."}),"\n",(0,s.jsx)(n.h2,{id:"why-use-decorators",children:"Why Use Decorators?"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Code Reusability"}),": Common functionality (e.g., logging, authentication, performance monitoring) can be extracted and reused across multiple functions or classes."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Separation of Concerns"}),": The original function\u2019s core logic is preserved, while additional features are handled externally."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Improved Readability"}),": Decorators make it easier to apply functionality without cluttering the main code."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"how-do-decorators-work",children:"How Do Decorators Work?"}),"\n",(0,s.jsxs)(n.p,{children:["A decorator is essentially a ",(0,s.jsx)(n.strong,{children:"higher-order function"}),", meaning it either:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Takes a function as an argument, or"}),"\n",(0,s.jsx)(n.li,{children:"Returns a function."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"At its core, a decorator works like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def decorator(func):\n    def wrapper():\n        # Code to execute BEFORE the original function\n        print("Before the function call.")\n\n        # Call the original function\n        func()\n\n        # Code to execute AFTER the original function\n        print("After the function call.")\n\n    return wrapper\n'})}),"\n",(0,s.jsx)(n.p,{children:"If you apply this decorator to a function:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'@decorator\ndef my_function():\n    print("This is my function.")\n\nmy_function()\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Output"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Before the function call.\nThis is my function.\nAfter the function call.\n"})}),"\n",(0,s.jsx)(n.h2,{id:"creating-and-using-decorators",children:"Creating and Using Decorators"}),"\n",(0,s.jsx)(n.h3,{id:"basic-decorator",children:"Basic Decorator"}),"\n",(0,s.jsx)(n.p,{children:"Here is a basic example of a decorator that logs when a function is called."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def logger(func):\n    def wrapper(*args, **kwargs):\n        print(f"Function \'{func.__name__}\' is being called.")\n        result = func(*args, **kwargs)\n        print(f"Function \'{func.__name__}\' finished execution.")\n        return result\n    return wrapper\n\n@logger\ndef greet(name):\n    print(f"Hello, {name}!")\n\ngreet("Abhishek")\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Output"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Function 'greet' is being called.\nHello, Abhishek!\nFunction 'greet' finished execution.\n"})}),"\n",(0,s.jsx)(n.h3,{id:"using-arguments-in-decorators",children:"Using Arguments in Decorators"}),"\n",(0,s.jsxs)(n.p,{children:["Decorators can also handle arguments passed to the wrapped function using ",(0,s.jsx)(n.code,{children:"*args"})," and ",(0,s.jsx)(n.code,{children:"**kwargs"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def logger(func):\n    def wrapper(*args, **kwargs):\n        print(f"Calling {func.__name__} with arguments {args} and {kwargs}")\n        return func(*args, **kwargs)\n    return wrapper\n\n@logger\ndef add(a, b):\n    return a + b\n\nresult = add(10, 20)\nprint(f"Result: {result}")\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Output"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Calling add with arguments (10, 20) and {}\nResult: 30\n"})}),"\n",(0,s.jsx)(n.h3,{id:"chaining-decorators",children:"Chaining Decorators"}),"\n",(0,s.jsx)(n.p,{children:"Multiple decorators can be applied to a single function. They are applied in the order they are listed, from top to bottom."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def uppercase(func):\n    def wrapper():\n        result = func()\n        return result.upper()\n    return wrapper\n\ndef exclaim(func):\n    def wrapper():\n        result = func()\n        return f"{result}!"\n    return wrapper\n\n@uppercase\n@exclaim\ndef greet():\n    return "hello"\n\nprint(greet())\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Output"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"HELLO!\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Here, the ",(0,s.jsx)(n.code,{children:"exclaim"})," decorator is applied first, followed by ",(0,s.jsx)(n.code,{children:"uppercase"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"using-decorators-with-functions-that-return-values",children:"Using Decorators with Functions that Return Values"}),"\n",(0,s.jsx)(n.p,{children:"When the wrapped function returns a value, the decorator must ensure it returns the result correctly."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def double_result(func):\n    def wrapper(*args, **kwargs):\n        result = func(*args, **kwargs)\n        return result * 2\n    return wrapper\n\n@double_result\ndef multiply(a, b):\n    return a * b\n\nprint(multiply(5, 3))\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Output"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"30\n"})}),"\n",(0,s.jsx)(n.h3,{id:"decorators-with-arguments",children:"Decorators with Arguments"}),"\n",(0,s.jsx)(n.p,{children:"A decorator itself can accept arguments by wrapping it inside another function."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def repeat(n):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            for _ in range(n):\n                func(*args, **kwargs)\n        return wrapper\n    return decorator\n\n@repeat(3)\ndef say_hello():\n    print("Hello!")\n\nsay_hello()\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Output"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Hello!\nHello!\nHello!\n"})}),"\n",(0,s.jsx)(n.h2,{id:"built-in-decorators-in-python",children:"Built-in Decorators in Python"}),"\n",(0,s.jsx)(n.p,{children:"Python provides some commonly used decorators:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"@staticmethod"}),": Defines a static method within a class (does not access class or instance attributes)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"@classmethod"}),": Defines a class method that takes the class (",(0,s.jsx)(n.code,{children:"cls"}),") as the first argument instead of the instance (",(0,s.jsx)(n.code,{children:"self"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"@property"}),": Converts a method into a read-only property."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'class Circle:\n    def __init__(self, radius):\n        self._radius = radius\n\n    @property\n    def radius(self):\n        return self._radius\n\n    @radius.setter\n    def radius(self, value):\n        if value < 0:\n            raise ValueError("Radius cannot be negative.")\n        self._radius = value\n\ncircle = Circle(5)\nprint(circle.radius)  # Access property\ncircle.radius = 10    # Modify property\nprint(circle.radius)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"practical-examples-of-decorators",children:"Practical Examples of Decorators"}),"\n",(0,s.jsx)(n.h3,{id:"logging",children:"Logging"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def log(func):\n    def wrapper(*args, **kwargs):\n        print(f"Logging: {func.__name__} was called with arguments {args} and {kwargs}")\n        return func(*args, **kwargs)\n    return wrapper\n\n@log\ndef divide(a, b):\n    return a / b\n\nprint(divide(10, 2))\n'})}),"\n",(0,s.jsx)(n.h3,{id:"authentication",children:"Authentication"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def requires_login(func):\n    def wrapper(user, *args, **kwargs):\n        if not user.get("logged_in"):\n            raise PermissionError("User is not logged in!")\n        return func(user, *args, **kwargs)\n    return wrapper\n\n@requires_login\ndef view_profile(user):\n    print(f"Viewing profile of {user[\'username\']}")\n\nuser = {"username": "Abhishek", "logged_in": True}\nview_profile(user)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"performance-monitoring",children:"Performance Monitoring"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import time\n\ndef timer(func):\n    def wrapper(*args, **kwargs):\n        start = time.time()\n        result = func(*args, **kwargs)\n        end = time.time()\n        print(f"Execution time: {end - start:.4f} seconds")\n        return result\n    return wrapper\n\n@timer\ndef slow_function():\n    time.sleep(2)\n    print("Function complete!")\n\nslow_function()\n'})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices-for-using-decorators",children:"Best Practices for Using Decorators"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsxs)(n.strong,{children:["Use ",(0,s.jsx)(n.code,{children:"functools.wraps"})]}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["When defining a decorator, use ",(0,s.jsx)(n.code,{children:"functools.wraps"})," to preserve the metadata (e.g., function name, docstring) of the original function."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from functools import wraps\n\ndef decorator(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        return func(*args, **kwargs)\n    return wrapper\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Keep Decorators Simple"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Avoid making the decorator too complex. Its purpose is to add functionality while keeping the code readable."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Test the Decorator"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Test the decorator separately to ensure it behaves as expected."}),"\n"]}),"\n"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>o});var t=r(96540);const s={},i=t.createContext(s);function a(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);