"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[5591],{70198:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>t,contentTitle:()=>d,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"frameworks-libraries/django/querying-filtering","title":"Querying and Filtering","description":"DRF provides tools to efficiently query, filter, and optimize data retrieval from the database. These tools ensure that APIs deliver only the required data while maintaining performance.","source":"@site/docs/frameworks-libraries/django/querying-filtering.md","sourceDirName":"frameworks-libraries/django","slug":"/frameworks-libraries/django/querying-filtering","permalink":"/docs/frameworks-libraries/django/querying-filtering","draft":false,"unlisted":false,"editUrl":"https://github.com/imdeepmind/imdeepmind.github.io/blob/main/docs/frameworks-libraries/django/querying-filtering.md","tags":[],"version":"current","lastUpdatedBy":"Abhishek Chatterjee","lastUpdatedAt":1737887469000,"sidebarPosition":10,"frontMatter":{"sidebar_position":10},"sidebar":"tutorialSidebar","previous":{"title":"Permissions, Access Control, Throttling","permalink":"/docs/frameworks-libraries/django/permissions"},"next":{"title":"Nested Relationships and Hyperlinked APIs","permalink":"/docs/frameworks-libraries/django/hyperlinks"}}');var s=i(74848),l=i(28453);const a={sidebar_position:10},d="Querying and Filtering",t={},o=[{value:"Filtering and Ordering",id:"filtering-and-ordering",level:2},{value:"Overview",id:"overview",level:3},{value:"Using <code>filter_backends</code>",id:"using-filter_backends",level:3},{value:"Example Setup",id:"example-setup",level:4},{value:"Filtering",id:"filtering",level:3},{value:"Ordering",id:"ordering",level:3},{value:"Pagination",id:"pagination",level:2},{value:"Overview",id:"overview-1",level:3},{value:"DRF Pagination Classes",id:"drf-pagination-classes",level:3},{value:"Using Custom Pagination",id:"using-custom-pagination",level:3},{value:"Global Pagination",id:"global-pagination",level:3},{value:"Searching",id:"searching",level:2},{value:"Overview",id:"overview-2",level:3},{value:"Adding Search to a View",id:"adding-search-to-a-view",level:3},{value:"Customizing Search",id:"customizing-search",level:3},{value:"Full-Text Search",id:"full-text-search",level:3},{value:"Advanced Query Optimizations",id:"advanced-query-optimizations",level:2},{value:"Overview",id:"overview-3",level:3},{value:"Techniques",id:"techniques",level:3},{value:"Example of Optimized QuerySet",id:"example-of-optimized-queryset",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"querying-and-filtering",children:"Querying and Filtering"})}),"\n",(0,s.jsx)(n.p,{children:"DRF provides tools to efficiently query, filter, and optimize data retrieval from the database. These tools ensure that APIs deliver only the required data while maintaining performance."}),"\n",(0,s.jsx)(n.h2,{id:"filtering-and-ordering",children:"Filtering and Ordering"}),"\n",(0,s.jsx)(n.h3,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"Filtering and ordering allow you to return subsets of data or sort results based on specific fields."}),"\n",(0,s.jsxs)(n.h3,{id:"using-filter_backends",children:["Using ",(0,s.jsx)(n.code,{children:"filter_backends"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"DRF provides built-in filter backends for basic filtering, search, and ordering."}),"\n",(0,s.jsxs)(n.li,{children:["Specify ",(0,s.jsx)(n.code,{children:"filter_backends"})," in the view or globally in the settings."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"example-setup",children:"Example Setup"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Enable filter backends:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from rest_framework.filters import OrderingFilter\n\nclass MyViewSet(viewsets.ModelViewSet):\n    queryset = MyModel.objects.all()\n    serializer_class = MySerializer\n    filter_backends = [OrderingFilter]\n    ordering_fields = ['field1', 'field2']  # Specify fields allowed for ordering\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Global configuration:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"REST_FRAMEWORK = {\n    'DEFAULT_FILTER_BACKENDS': [\n        'rest_framework.filters.OrderingFilter',\n    ],\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"filtering",children:"Filtering"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Simple Filtering"}),":\nUse ",(0,s.jsx)(n.code,{children:"django_filters"})," to apply simple or complex filtering based on query parameters."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from django_filters.rest_framework import DjangoFilterBackend\n\nclass MyViewSet(viewsets.ModelViewSet):\n    queryset = MyModel.objects.all()\n    serializer_class = MySerializer\n    filter_backends = [DjangoFilterBackend]\n    filterset_fields = ['field1', 'field2']  # Specify fields to filter\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Example URL: ",(0,s.jsx)(n.code,{children:"/api/items/?field1=value"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Custom Filtering"}),":\nDefine a custom filter backend for advanced filtering logic."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from rest_framework.filters import BaseFilterBackend\n\nclass CustomFilterBackend(BaseFilterBackend):\n    def filter_queryset(self, request, queryset, view):\n        if 'custom_param' in request.query_params:\n            return queryset.filter(custom_field=request.query_params['custom_param'])\n        return queryset\n\nclass MyViewSet(viewsets.ModelViewSet):\n    filter_backends = [CustomFilterBackend]\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"ordering",children:"Ordering"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Add an ",(0,s.jsx)(n.code,{children:"OrderingFilter"})," backend and specify ",(0,s.jsx)(n.code,{children:"ordering_fields"})," or allow all fields."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from rest_framework.filters import OrderingFilter\n\nclass MyViewSet(viewsets.ModelViewSet):\n    queryset = MyModel.objects.all()\n    serializer_class = MySerializer\n    filter_backends = [OrderingFilter]\n    ordering_fields = ['field1', 'field2']  # Fields for ordering\n    ordering = ['field1']  # Default ordering\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Example URL: ",(0,s.jsx)(n.code,{children:"/api/items/?ordering=field1"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"pagination",children:"Pagination"}),"\n",(0,s.jsx)(n.h3,{id:"overview-1",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"Pagination splits large datasets into smaller chunks, making responses manageable and efficient."}),"\n",(0,s.jsx)(n.h3,{id:"drf-pagination-classes",children:"DRF Pagination Classes"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"PageNumberPagination"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Default pagination using page numbers."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from rest_framework.pagination import PageNumberPagination\n\nclass MyPagination(PageNumberPagination):\n    page_size = 10  # Number of items per page\n    page_size_query_param = 'page_size'  # Allow clients to set page size\n    max_page_size = 100  # Maximum allowed page size\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"LimitOffsetPagination"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Allows clients to specify an offset and limit."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from rest_framework.pagination import LimitOffsetPagination\n\nclass MyPagination(LimitOffsetPagination):\n    default_limit = 10\n    max_limit = 100\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"CursorPagination"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Uses an opaque cursor for pagination, ensuring stable ordering."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from rest_framework.pagination import CursorPagination\n\nclass MyPagination(CursorPagination):\n    page_size = 10\n    ordering = 'created_at'  # Field used for cursor\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"using-custom-pagination",children:"Using Custom Pagination"}),"\n",(0,s.jsx)(n.p,{children:"Assign the pagination class to a view:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class MyViewSet(viewsets.ModelViewSet):\n    queryset = MyModel.objects.all()\n    serializer_class = MySerializer\n    pagination_class = MyPagination\n"})}),"\n",(0,s.jsx)(n.h3,{id:"global-pagination",children:"Global Pagination"}),"\n",(0,s.jsxs)(n.p,{children:["Set pagination globally in ",(0,s.jsx)(n.code,{children:"settings.py"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"REST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',\n    'PAGE_SIZE': 10,\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"searching",children:"Searching"}),"\n",(0,s.jsx)(n.h3,{id:"overview-2",children:"Overview"}),"\n",(0,s.jsxs)(n.p,{children:["DRF provides a ",(0,s.jsx)(n.code,{children:"SearchFilter"})," backend for simple search functionality using query parameters."]}),"\n",(0,s.jsx)(n.h3,{id:"adding-search-to-a-view",children:"Adding Search to a View"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Include the ",(0,s.jsx)(n.code,{children:"SearchFilter"})," backend:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from rest_framework.filters import SearchFilter\n\nclass MyViewSet(viewsets.ModelViewSet):\n    queryset = MyModel.objects.all()\n    serializer_class = MySerializer\n    filter_backends = [SearchFilter]\n    search_fields = ['name', 'description']  # Fields to search\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Search query example:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["URL: ",(0,s.jsx)(n.code,{children:"/api/items/?search=keyword"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"customizing-search",children:"Customizing Search"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Partial Matching"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"^"})," (starts with), ",(0,s.jsx)(n.code,{children:"@"})," (search), or ",(0,s.jsx)(n.code,{children:"$"})," (regex) to control field behavior:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"search_fields = ['^name', '=description', '@tags']\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Case-Insensitive Search"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Apply filters like ",(0,s.jsx)(n.code,{children:"icontains"})," in a custom backend."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"full-text-search",children:"Full-Text Search"}),"\n",(0,s.jsx)(n.p,{children:"For advanced searching, integrate with third-party libraries like Elasticsearch, Solr, or Django\u2019s PostgreSQL full-text search."}),"\n",(0,s.jsx)(n.h2,{id:"advanced-query-optimizations",children:"Advanced Query Optimizations"}),"\n",(0,s.jsx)(n.h3,{id:"overview-3",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"Query optimizations reduce database queries and improve performance when fetching related objects."}),"\n",(0,s.jsx)(n.h3,{id:"techniques",children:"Techniques"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"select_related"})}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Fetches related objects in a single query for ForeignKey relationships."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"queryset = MyModel.objects.select_related('related_field')\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"prefetch_related"})}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Fetches related objects for ManyToMany or reverse ForeignKey relationships."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"queryset = MyModel.objects.prefetch_related('related_field')\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Using Annotate and Aggregate"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Add computed values to a query to reduce separate calculations."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from django.db.models import Count\n\nqueryset = MyModel.objects.annotate(related_count=Count('related_field'))\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Avoid N+1 Query Problem"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Avoid queries within loops by preloading related data."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"queryset = MyModel.objects.select_related('related_field')\nfor obj in queryset:\n    print(obj.related_field.name)  # Avoids additional queries\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Use QuerySet Caching"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Cache frequently accessed data using Django\u2019s caching framework."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Index Database Fields"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Add database indexes for fields frequently used in filtering or ordering."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"example-of-optimized-queryset",children:"Example of Optimized QuerySet"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"queryset = MyModel.objects.select_related('foreign_key_field').prefetch_related('many_to_many_field').annotate(related_count=Count('related_field'))\n"})})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>d});var r=i(96540);const s={},l=r.createContext(s);function a(e){const n=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(l.Provider,{value:n},e.children)}}}]);