"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[8902],{7203:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>d,contentTitle:()=>l,default:()=>c,frontMatter:()=>t,metadata:()=>r,toc:()=>h});const r=JSON.parse('{"id":"data-structure-and-algorithms/arrays-and-hasing","title":"Arrays and Hashing","description":"Arrays","source":"@site/docs/data-structure-and-algorithms/arrays-and-hasing.md","sourceDirName":"data-structure-and-algorithms","slug":"/data-structure-and-algorithms/arrays-and-hasing","permalink":"/docs/data-structure-and-algorithms/arrays-and-hasing","draft":false,"unlisted":false,"editUrl":"https://github.com/imdeepmind/imdeepmind.github.io/blob/main/docs/data-structure-and-algorithms/arrays-and-hasing.md","tags":[],"version":"current","lastUpdatedBy":"Abhishek Chatterjee","lastUpdatedAt":1734168488000,"sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Introduction","permalink":"/docs/data-structure-and-algorithms/introduction"},"next":{"title":"Two Pointers","permalink":"/docs/data-structure-and-algorithms/two-pointers"}}');var i=s(4848),a=s(8453);const t={sidebar_position:2},l="Arrays and Hashing",d={},h=[{value:"Arrays",id:"arrays",level:2},{value:"Definition",id:"definition",level:3},{value:"Key Operations and Time Complexities",id:"key-operations-and-time-complexities",level:3},{value:"Common Algorithms with Arrays",id:"common-algorithms-with-arrays",level:3},{value:"Code Examples",id:"code-examples",level:3},{value:"Two Pointer Technique: Find a Pair with Target Sum",id:"two-pointer-technique-find-a-pair-with-target-sum",level:4},{value:"Sliding Window: Maximum Sum Subarray of Size K",id:"sliding-window-maximum-sum-subarray-of-size-k",level:4},{value:"Hashing",id:"hashing",level:2},{value:"Definition",id:"definition-1",level:3},{value:"Hash Table Operations and Time Complexities",id:"hash-table-operations-and-time-complexities",level:3},{value:"Common Use Cases",id:"common-use-cases",level:3},{value:"Common Problems and Algorithms",id:"common-problems-and-algorithms",level:3},{value:"Code Examples",id:"code-examples-1",level:3},{value:"Two Sum with Hashing",id:"two-sum-with-hashing",level:4},{value:"Longest Substring Without Repeating Characters",id:"longest-substring-without-repeating-characters",level:4},{value:"Group Anagrams",id:"group-anagrams",level:4},{value:"<strong>Comparison of Arrays and Hashing</strong>",id:"comparison-of-arrays-and-hashing",level:2},{value:"Conclusion",id:"conclusion",level:2}];function o(n){const e={br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"arrays-and-hashing",children:"Arrays and Hashing"})}),"\n",(0,i.jsx)(e.h2,{id:"arrays",children:"Arrays"}),"\n",(0,i.jsx)(e.h3,{id:"definition",children:"Definition"}),"\n",(0,i.jsx)(e.p,{children:"An array is a contiguous block of memory containing elements of the same data type. It is one of the most fundamental data structures in computer science."}),"\n",(0,i.jsx)(e.h3,{id:"key-operations-and-time-complexities",children:"Key Operations and Time Complexities"}),"\n",(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{children:"Operation"}),(0,i.jsx)(e.th,{children:"Average Case"}),(0,i.jsx)(e.th,{children:"Worst Case"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"Access (by index)"}),(0,i.jsx)(e.td,{children:"O(1)"}),(0,i.jsx)(e.td,{children:"O(1)"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"Search (unsorted)"}),(0,i.jsx)(e.td,{children:"O(n)"}),(0,i.jsx)(e.td,{children:"O(n)"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"Search (sorted)"}),(0,i.jsx)(e.td,{children:"O(log n)*"}),(0,i.jsx)(e.td,{children:"O(log n)*"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"Insert (end)**"}),(0,i.jsx)(e.td,{children:"O(1)"}),(0,i.jsx)(e.td,{children:"O(1)"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"Insert (middle)"}),(0,i.jsx)(e.td,{children:"O(n)"}),(0,i.jsx)(e.td,{children:"O(n)"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"Deletion"}),(0,i.jsx)(e.td,{children:"O(n)"}),(0,i.jsx)(e.td,{children:"O(n)"})]})]})]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.em,{children:"* Binary search on sorted arrays"}),(0,i.jsx)(e.br,{}),"\n",(0,i.jsx)(e.em,{children:"** Amortized O(1) for dynamic arrays"})]}),"\n",(0,i.jsx)(e.h3,{id:"common-algorithms-with-arrays",children:"Common Algorithms with Arrays"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Two Pointer Technique"}),":","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Use Case"}),": Solving problems like finding pairs, reversing arrays, or merging sorted arrays."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Time Complexity"}),": O(n)."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Sliding Window"}),":","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Use Case"}),": Problems requiring subarray calculations (e.g., maximum sum subarray)."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Time Complexity"}),": O(n)."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Sorting"}),":","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Use Case"}),": Preprocessing array for binary search, removing duplicates, or meeting specific order requirements."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Time Complexity"}),": O(n log n)."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Prefix Sum"}),":","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Use Case"}),": Efficiently computing sums or finding subarray sums."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Time Complexity"}),": O(n)."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Kadane's Algorithm"}),":","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Use Case"}),": Maximum subarray sum."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Time Complexity"}),": O(n)."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"code-examples",children:"Code Examples"}),"\n",(0,i.jsx)(e.h4,{id:"two-pointer-technique-find-a-pair-with-target-sum",children:"Two Pointer Technique: Find a Pair with Target Sum"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"def two_sum(arr, target):\n    arr.sort()  # O(n log n)\n    left, right = 0, len(arr) - 1\n    \n    while left < right:\n        current_sum = arr[left] + arr[right]\n        if current_sum == target:\n            return (arr[left], arr[right])\n        elif current_sum < target:\n            left += 1\n        else:\n            right -= 1\n    return None\n"})}),"\n",(0,i.jsx)(e.h4,{id:"sliding-window-maximum-sum-subarray-of-size-k",children:"Sliding Window: Maximum Sum Subarray of Size K"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"def max_sum_subarray(arr, k):\n    n = len(arr)\n    if n < k:\n        return -1\n\n    window_sum = sum(arr[:k])\n    max_sum = window_sum\n    \n    for i in range(k, n):\n        window_sum += arr[i] - arr[i - k]\n        max_sum = max(max_sum, window_sum)\n    \n    return max_sum\n"})}),"\n",(0,i.jsx)(e.h2,{id:"hashing",children:"Hashing"}),"\n",(0,i.jsx)(e.h3,{id:"definition-1",children:"Definition"}),"\n",(0,i.jsx)(e.p,{children:"Hashing is a technique used to map data of arbitrary size to fixed-size values (hashes). In programming, hash tables (or dictionaries in Python) store key-value pairs for fast lookups."}),"\n",(0,i.jsx)(e.h3,{id:"hash-table-operations-and-time-complexities",children:"Hash Table Operations and Time Complexities"}),"\n",(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{children:"Operation"}),(0,i.jsx)(e.th,{children:"Average Case"}),(0,i.jsx)(e.th,{children:"Worst Case"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"Search"}),(0,i.jsx)(e.td,{children:"O(1)"}),(0,i.jsx)(e.td,{children:"O(n)"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"Insert"}),(0,i.jsx)(e.td,{children:"O(1)"}),(0,i.jsx)(e.td,{children:"O(n)"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"Delete"}),(0,i.jsx)(e.td,{children:"O(1)"}),(0,i.jsx)(e.td,{children:"O(n)"})]})]})]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.em,{children:"* Worst-case arises due to hash collisions, which can degrade performance."})}),"\n",(0,i.jsx)(e.h3,{id:"common-use-cases",children:"Common Use Cases"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Counting Frequencies"}),":","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Example: Counting the occurrences of elements in a list."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Finding Duplicates"}),":","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Example: Checking if an array contains duplicate elements."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Mapping Relationships"}),":","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Example: Implementing graphs, adjacency lists."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Efficient Lookups"}),":","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Example: Checking membership in O(1)."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"common-problems-and-algorithms",children:"Common Problems and Algorithms"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Two Sum Problem"}),":","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Use hash maps for efficient index lookups in O(n)."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Longest Substring Without Repeating Characters"}),":","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Use hash maps to track character positions for O(n) sliding window implementation."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Group Anagrams"}),":","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Use hash maps with keys based on sorted characters or frequency counts."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"code-examples-1",children:"Code Examples"}),"\n",(0,i.jsx)(e.h4,{id:"two-sum-with-hashing",children:"Two Sum with Hashing"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"def two_sum_hashing(arr, target):\n    hash_map = {}  # Stores {value: index}\n    \n    for i, num in enumerate(arr):\n        complement = target - num\n        if complement in hash_map:\n            return (hash_map[complement], i)\n        hash_map[num] = i\n    return None\n\n"})}),"\n",(0,i.jsx)(e.h4,{id:"longest-substring-without-repeating-characters",children:"Longest Substring Without Repeating Characters"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"def longest_unique_substring(s):\n    char_map = {}\n    left = 0\n    max_length = 0\n    \n    for right, char in enumerate(s):\n        if char in char_map and char_map[char] >= left:\n            left = char_map[char] + 1\n        char_map[char] = right\n        max_length = max(max_length, right - left + 1)\n    \n    return max_length\n"})}),"\n",(0,i.jsx)(e.h4,{id:"group-anagrams",children:"Group Anagrams"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"from collections import defaultdict\n\ndef group_anagrams(strs):\n    anagrams = defaultdict(list)\n    \n    for s in strs:\n        key = tuple(sorted(s))  # Or use frequency count as key\n        anagrams[key].append(s)\n    \n    return list(anagrams.values())\n"})}),"\n",(0,i.jsx)(e.h2,{id:"comparison-of-arrays-and-hashing",children:(0,i.jsx)(e.strong,{children:"Comparison of Arrays and Hashing"})}),"\n",(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{children:"Feature"}),(0,i.jsx)(e.th,{children:"Array"}),(0,i.jsx)(e.th,{children:"Hash Table"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"Data Organization"}),(0,i.jsx)(e.td,{children:"Sequential, index-based"}),(0,i.jsx)(e.td,{children:"Key-value pairs"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"Lookup Time Complexity"}),(0,i.jsx)(e.td,{children:"O(n) or O(log n) (sorted)"}),(0,i.jsx)(e.td,{children:"O(1) (average case)"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"Use Cases"}),(0,i.jsx)(e.td,{children:"Ordered data, numerical ops"}),(0,i.jsx)(e.td,{children:"Quick lookups, counting"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"Space Complexity"}),(0,i.jsx)(e.td,{children:"O(n)"}),(0,i.jsx)(e.td,{children:"O(n)"})]})]})]}),"\n",(0,i.jsx)(e.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Arrays are optimal for indexed access and maintaining order."}),"\n",(0,i.jsx)(e.li,{children:"Hash tables are ideal for quick lookups, duplicates, and frequency-related operations."}),"\n",(0,i.jsx)(e.li,{children:"Many problems combine these data structures, such as using hash maps for preprocessing and arrays for iteration."}),"\n"]})]})}function c(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(o,{...n})}):o(n)}},8453:(n,e,s)=>{s.d(e,{R:()=>t,x:()=>l});var r=s(6540);const i={},a=r.createContext(i);function t(n){const e=r.useContext(a);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:t(n.components),r.createElement(a.Provider,{value:e},n.children)}}}]);