"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[1719],{2960:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"data-structure-and-algorithms/stack","title":"Stack","description":"A stack is a linear data structure that follows the Last In, First Out (LIFO) principle. This means that the element added most recently to the stack is the first to be removed.","source":"@site/docs/data-structure-and-algorithms/stack.md","sourceDirName":"data-structure-and-algorithms","slug":"/data-structure-and-algorithms/stack","permalink":"/docs/data-structure-and-algorithms/stack","draft":false,"unlisted":false,"editUrl":"https://github.com/imdeepmind/imdeepmind.github.io/blob/main/docs/data-structure-and-algorithms/stack.md","tags":[],"version":"current","lastUpdatedBy":"Abhishek Chatterjee","lastUpdatedAt":1736179038000,"sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Sliding Window","permalink":"/docs/data-structure-and-algorithms/sliding-window"},"next":{"title":"Queue","permalink":"/docs/data-structure-and-algorithms/queue"}}');var i=s(74848),r=s(28453);const a={sidebar_position:6},l="Stack",c={},d=[{value:"Key Operations",id:"key-operations",level:2},{value:"Implementation",id:"implementation",level:2},{value:"Use Cases",id:"use-cases",level:2},{value:"Example Algorithms and Problems",id:"example-algorithms-and-problems",level:2},{value:"Check for Balanced Parentheses",id:"check-for-balanced-parentheses",level:3},{value:"Min Stack",id:"min-stack",level:3},{value:"Evaluate Postfix Expression",id:"evaluate-postfix-expression",level:3},{value:"Next Greater Element",id:"next-greater-element",level:3},{value:"Advantages of Using Stacks",id:"advantages-of-using-stacks",level:2},{value:"Limitations of Stacks",id:"limitations-of-stacks",level:2},{value:"When to Use Stacks",id:"when-to-use-stacks",level:2}];function o(e){const n={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"stack",children:"Stack"})}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.strong,{children:"stack"})," is a linear data structure that follows the ",(0,i.jsx)(n.strong,{children:"Last In, First Out (LIFO)"})," principle. This means that the element added most recently to the stack is the first to be removed."]}),"\n",(0,i.jsx)(n.p,{children:"Stacks can be visualized as a collection of elements piled one on top of another, much like a stack of plates."}),"\n",(0,i.jsx)(n.h2,{id:"key-operations",children:"Key Operations"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Operation"}),(0,i.jsx)(n.th,{children:"Description"}),(0,i.jsx)(n.th,{children:"Time Complexity"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"push(x)"})}),(0,i.jsxs)(n.td,{children:["Add an element ",(0,i.jsx)(n.code,{children:"x"})," to the top of the stack."]}),(0,i.jsx)(n.td,{children:"O(1)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"pop()"})}),(0,i.jsx)(n.td,{children:"Remove and return the top element of the stack."}),(0,i.jsx)(n.td,{children:"O(1)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"peek()"})}),(0,i.jsx)(n.td,{children:"Return (but do not remove) the top element."}),(0,i.jsx)(n.td,{children:"O(1)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"isEmpty()"})}),(0,i.jsx)(n.td,{children:"Check if the stack is empty."}),(0,i.jsx)(n.td,{children:"O(1)"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"implementation",children:"Implementation"}),"\n",(0,i.jsx)(n.p,{children:"Stacks can be implemented using:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Arrays or Lists"}),": Most commonly used in high-level programming languages like Python."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Linked Lists"}),": Useful for dynamic memory allocation."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Built-in Libraries"}),": Many languages have built-in stack implementations (e.g., Python's ",(0,i.jsx)(n.code,{children:"deque"}),")."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"use-cases",children:"Use Cases"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Use Case"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Undo Operations"})}),(0,i.jsx)(n.td,{children:"Useful for tracking actions in text editors or browsers."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Function Calls"})}),(0,i.jsx)(n.td,{children:"Used in recursion and managing function call stacks in programming."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Balancing Symbols"})}),(0,i.jsx)(n.td,{children:"Check for balanced parentheses, brackets, or braces."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Backtracking"})}),(0,i.jsx)(n.td,{children:"Used in algorithms like maze solving or N-Queens problem."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Expression Evaluation"})}),(0,i.jsx)(n.td,{children:"Evaluate postfix/prefix expressions."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Sorting and Searching"})}),(0,i.jsx)(n.td,{children:"Used in algorithms like DFS or iterative quicksort."})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"example-algorithms-and-problems",children:"Example Algorithms and Problems"}),"\n",(0,i.jsx)(n.h3,{id:"check-for-balanced-parentheses",children:"Check for Balanced Parentheses"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem"}),": Verify if a string containing ",(0,i.jsx)(n.code,{children:"()"})," ",(0,i.jsx)(n.code,{children:"{}"})," ",(0,i.jsx)(n.code,{children:"[]"})," is balanced."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def is_balanced(s):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n\n    for char in s:\n        if char in mapping:\n            top_element = stack.pop() if stack else '#'\n            if mapping[char] != top_element:\n                return False\n        else:\n            stack.append(char)\n\n    return not stack\n\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Time Complexity"}),": O(n)",(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.strong,{children:"Space Complexity"}),": O(n)"]}),"\n",(0,i.jsx)(n.h3,{id:"min-stack",children:"Min Stack"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem"}),": Design a stack that supports retrieving the minimum element in O(1) time."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class MinStack:\n    def __init__(self):\n        self.stack = []\n        self.min_stack = []\n\n    def push(self, x):\n        self.stack.append(x)\n        if not self.min_stack or x <= self.min_stack[-1]:\n            self.min_stack.append(x)\n\n    def pop(self):\n        if self.stack.pop() == self.min_stack[-1]:\n            self.min_stack.pop()\n\n    def top(self):\n        return self.stack[-1]\n\n    def get_min(self):\n        return self.min_stack[-1]\n\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Time Complexity"}),": O(1) for all operations.",(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.strong,{children:"Space Complexity"}),": O(n) for the ",(0,i.jsx)(n.code,{children:"min_stack"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"evaluate-postfix-expression",children:"Evaluate Postfix Expression"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem"}),": Evaluate a postfix (Reverse Polish Notation) expression like ",(0,i.jsx)(n.code,{children:"2 3 + 5 *"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def evaluate_postfix(expression):\n    stack = []\n    for char in expression.split():\n        if char.isdigit():\n            stack.append(int(char))\n        else:\n            b = stack.pop()\n            a = stack.pop()\n            if char == '+':\n                stack.append(a + b)\n            elif char == '-':\n                stack.append(a - b)\n            elif char == '*':\n                stack.append(a * b)\n            elif char == '/':\n                stack.append(int(a / b))  # Integer division\n    return stack.pop()\n\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Time Complexity"}),": O(n)",(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.strong,{children:"Space Complexity"}),": O(n)"]}),"\n",(0,i.jsx)(n.h3,{id:"next-greater-element",children:"Next Greater Element"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem"}),": For each element in an array, find the next greater element to its right."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def next_greater_elements(nums):\n    stack = []\n    result = [-1] * len(nums)\n\n    for i in range(len(nums) - 1, -1, -1):\n        while stack and stack[-1] <= nums[i]:\n            stack.pop()\n        result[i] = stack[-1] if stack else -1\n        stack.append(nums[i])\n\n    return result\n\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Time Complexity"}),": O(n)",(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.strong,{children:"Space Complexity"}),": O(n)"]}),"\n",(0,i.jsx)(n.h2,{id:"advantages-of-using-stacks",children:"Advantages of Using Stacks"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Simple to Use"}),": Offers a straightforward way to manage LIFO behavior."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Efficient"}),": Push and pop operations are O(1)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Versatile"}),": Useful in diverse algorithms like DFS, backtracking, and expression evaluation."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"limitations-of-stacks",children:"Limitations of Stacks"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Fixed Size in Some Implementations"}),": If implemented using arrays, resizing might be required."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Limited Operations"}),": Only top elements can be accessed directly."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Linear Space Usage"}),": Stacks require O(n) space in recursive algorithms or problems."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"when-to-use-stacks",children:"When to Use Stacks"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Reversible Processes"}),": Undo/redo operations, tracking states."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Nested Structures"}),": Parentheses matching, XML/HTML tag validation."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Recursion"}),": Mimicking recursion with an explicit stack (e.g., DFS)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Order Preservation"}),": Storing elements temporarily for reversal."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>l});var t=s(96540);const i={},r=t.createContext(i);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);