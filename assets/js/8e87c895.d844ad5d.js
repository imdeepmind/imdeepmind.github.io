"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[1050],{85464:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>t,toc:()=>h});const t=JSON.parse('{"id":"data-structure-and-algorithms/algorithms/bst/key-operations","title":"Key Operations","description":"A Binary Search Tree supports a variety of operations to insert, find, delete, and construct the tree from traversal data while maintaining the BST property.","source":"@site/docs/data-structure-and-algorithms/algorithms/bst/key-operations.md","sourceDirName":"data-structure-and-algorithms/algorithms/bst","slug":"/data-structure-and-algorithms/algorithms/bst/key-operations","permalink":"/docs/data-structure-and-algorithms/algorithms/bst/key-operations","draft":false,"unlisted":false,"editUrl":"https://github.com/imdeepmind/imdeepmind.github.io/blob/main/docs/data-structure-and-algorithms/algorithms/bst/key-operations.md","tags":[],"version":"current","lastUpdatedBy":"Abhishek Chatterjee","lastUpdatedAt":1755264849000,"sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Introduction","permalink":"/docs/data-structure-and-algorithms/algorithms/bst/introduction"},"next":{"title":"Time Complexity","permalink":"/docs/data-structure-and-algorithms/time-space-complexity/time-complexity"}}');var s=n(74848),i=n(28453);const o={sidebar_position:2},l="Key Operations",d={},h=[{value:"Search in BST",id:"search-in-bst",level:2},{value:"Insert in BST",id:"insert-in-bst",level:2},{value:"Delete in BST",id:"delete-in-bst",level:2},{value:"BST Construction from Preorder Traversal",id:"bst-construction-from-preorder-traversal",level:2},{value:"BST Construction from Inorder Traversal",id:"bst-construction-from-inorder-traversal",level:2},{value:"Summary",id:"summary",level:2}];function a(e){const r={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"key-operations",children:"Key Operations"})}),"\n",(0,s.jsxs)(r.p,{children:["A ",(0,s.jsx)(r.strong,{children:"Binary Search Tree"})," supports a variety of operations to insert, find, delete, and construct the tree from traversal data while maintaining the BST property."]}),"\n",(0,s.jsx)(r.h2,{id:"search-in-bst",children:"Search in BST"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Concept"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Start from the root."}),"\n",(0,s.jsxs)(r.li,{children:["If the target value is ",(0,s.jsx)(r.strong,{children:"equal"})," to the root, return the node."]}),"\n",(0,s.jsxs)(r.li,{children:["If the target value is ",(0,s.jsx)(r.strong,{children:"less"}),", search in the left subtree."]}),"\n",(0,s.jsxs)(r.li,{children:["If the target value is ",(0,s.jsx)(r.strong,{children:"greater"}),", search in the right subtree."]}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Diagram example"})," (searching for 40 in the given tree):"]}),"\n",(0,s.jsx)("div",{style:{textAlign:"center"},children:(0,s.jsx)(r.mermaid,{value:"graph TD\n    A(50):::highlight --\x3e B(30):::highlight\n    A --\x3e C(70)\n    B --\x3e D(20)\n    B --\x3e E(40):::highlight\n    C --\x3e F(60)\n    C --\x3e G(80)\nclassDef highlight fill:#f9f,stroke:#333,stroke-width:2px;"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Python code"}),":"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:'class Node:\n    def __init__(self, key):\n        self.key = key\n        self.left = None\n        self.right = None\n\ndef search(root, key):\n    if root is None or root.key == key:\n        return root\n    if key < root.key:\n        return search(root.left, key)\n    return search(root.right, key)\n\n# Example usage\nroot = Node(50)\nroot.left = Node(30)\nroot.right = Node(70)\nroot.left.left = Node(20)\nroot.left.right = Node(40)\nroot.right.left = Node(60)\nroot.right.right = Node(80)\n\nresult = search(root, 40)\nprint("Found" if result else "Not found")\n'})}),"\n",(0,s.jsx)(r.h2,{id:"insert-in-bst",children:"Insert in BST"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Concept"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Start from the root and compare the new value."}),"\n",(0,s.jsx)(r.li,{children:"If smaller \u2192 go left."}),"\n",(0,s.jsx)(r.li,{children:"If larger \u2192 go right."}),"\n",(0,s.jsxs)(r.li,{children:["Insert when a ",(0,s.jsx)(r.code,{children:"None"})," spot is found."]}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Diagram example"})," (inserting 35):"]}),"\n",(0,s.jsx)("div",{style:{textAlign:"center"},children:(0,s.jsx)(r.mermaid,{value:"graph TD\n    A(50) --\x3e B(30):::highlight\n    A --\x3e C(70)\n    B --\x3e D(20)\n    B --\x3e E(40):::highlight\n    C --\x3e F(60)\n    C --\x3e G(80)\n    E --\x3e H(35):::highlight\nclassDef highlight fill:#f9f,stroke:#333,stroke-width:2px;"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Python code"}),":"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:"def insert(root, key):\n    if root is None:\n        return Node(key)\n    if key < root.key:\n        root.left = insert(root.left, key)\n    elif key > root.key:\n        root.right = insert(root.right, key)\n    return root\n\nroot = insert(root, 35)\n"})}),"\n",(0,s.jsx)(r.h2,{id:"delete-in-bst",children:"Delete in BST"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Concept"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Case 1"}),": Node has no children \u2192 delete it."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Case 2"}),": Node has one child \u2192 replace with the child."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Case 3"}),": Node has two children \u2192 replace with ",(0,s.jsx)(r.strong,{children:"inorder successor"})," (minimum in right subtree) and delete the successor."]}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Diagram example"})," (deleting 30):"]}),"\n",(0,s.jsx)("div",{style:{textAlign:"center"},children:(0,s.jsx)(r.mermaid,{value:"graph TD\n    A(50) --\x3e B(35):::highlight\n    A --\x3e C(70)\n    B --\x3e D(20)\n    B --\x3e E(40)\n    C --\x3e F(60)\n    C --\x3e G(80)\nclassDef highlight fill:#f9f,stroke:#333,stroke-width:2px;"})}),"\n",(0,s.jsx)(r.p,{children:"(Here 30 is replaced by its inorder successor 35.)"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Python code"}),":"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:"def min_value_node(node):\n    current = node\n    while current.left:\n        current = current.left\n    return current\n\ndef delete_node(root, key):\n    if root is None:\n        return root\n    if key < root.key:\n        root.left = delete_node(root.left, key)\n    elif key > root.key:\n        root.right = delete_node(root.right, key)\n    else:\n        # Node with only one child or no child\n        if root.left is None:\n            return root.right\n        elif root.right is None:\n            return root.left\n        # Node with two children\n        temp = min_value_node(root.right)\n        root.key = temp.key\n        root.right = delete_node(root.right, temp.key)\n    return root\n\nroot = delete_node(root, 30)\n"})}),"\n",(0,s.jsx)(r.h2,{id:"bst-construction-from-preorder-traversal",children:"BST Construction from Preorder Traversal"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Concept"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"First element in preorder is root."}),"\n",(0,s.jsx)(r.li,{children:"All values smaller than root form the left subtree, rest form the right subtree."}),"\n",(0,s.jsx)(r.li,{children:"Recursively build left and right subtrees."}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Diagram example"})," (Preorder: [50, 30, 20, 40, 70, 60, 80]):"]}),"\n",(0,s.jsx)("div",{style:{textAlign:"center"},children:(0,s.jsx)(r.mermaid,{value:"graph TD\n    A(50) --\x3e B(30)\n    A --\x3e C(70)\n    B --\x3e D(20)\n    B --\x3e E(40)\n    C --\x3e F(60)\n    C --\x3e G(80)"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Python code"}),":"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:"import sys\nsys.setrecursionlimit(10**6)\n\ndef construct_bst_preorder(preorder):\n    index = [0]\n    def build(bound):\n        if index[0] == len(preorder) or preorder[index[0]] > bound:\n            return None\n        root_val = preorder[index[0]]\n        index[0] += 1\n        root = Node(root_val)\n        root.left = build(root_val)\n        root.right = build(bound)\n        return root\n    return build(float('inf'))\n\npreorder = [50, 30, 20, 40, 70, 60, 80]\nroot = construct_bst_preorder(preorder)\n"})}),"\n",(0,s.jsx)(r.h2,{id:"bst-construction-from-inorder-traversal",children:"BST Construction from Inorder Traversal"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Important Note"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"A BST cannot be uniquely constructed from inorder traversal alone"})," because many BSTs can have the same inorder sequence."]}),"\n",(0,s.jsxs)(r.li,{children:["If the inorder is ",(0,s.jsx)(r.strong,{children:"sorted array"}),", and we want a ",(0,s.jsx)(r.strong,{children:"balanced BST"}),", we pick the middle element as root, recursively build left and right."]}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Diagram example"})," (Inorder: [20, 30, 40, 50, 60, 70, 80]):"]}),"\n",(0,s.jsx)("div",{style:{textAlign:"center"},children:(0,s.jsx)(r.mermaid,{value:"graph TD\n    A(50) --\x3e B(30)\n    A --\x3e C(70)\n    B --\x3e D(20)\n    B --\x3e E(40)\n    C --\x3e F(60)\n    C --\x3e G(80)"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Python code"})," (balanced BST from sorted inorder list):"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-python",children:"def sorted_array_to_bst(arr):\n    if not arr:\n        return None\n    mid = len(arr) // 2\n    root = Node(arr[mid])\n    root.left = sorted_array_to_bst(arr[:mid])\n    root.right = sorted_array_to_bst(arr[mid+1:])\n    return root\n\ninorder = [20, 30, 40, 50, 60, 70, 80]\nroot = sorted_array_to_bst(inorder)\n"})}),"\n",(0,s.jsx)(r.h2,{id:"summary",children:"Summary"}),"\n",(0,s.jsxs)(r.p,{children:["Here\u2019s the ",(0,s.jsx)(r.strong,{children:"time and space complexity table"})," for the BST operations we discussed.\nAssuming ",(0,s.jsx)(r.strong,{children:"n"})," nodes in the BST:"]}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Operation"}),(0,s.jsx)(r.th,{children:"Average Time Complexity"}),(0,s.jsx)(r.th,{children:"Worst-Case Time Complexity"}),(0,s.jsx)(r.th,{children:"Space Complexity"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Search"}),(0,s.jsx)(r.td,{children:"O(log n)"}),(0,s.jsx)(r.td,{children:"O(n)"}),(0,s.jsx)(r.td,{children:"O(1) iterative / O(h) recursive"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Insert"}),(0,s.jsx)(r.td,{children:"O(log n)"}),(0,s.jsx)(r.td,{children:"O(n)"}),(0,s.jsx)(r.td,{children:"O(1) iterative / O(h) recursive"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Delete"}),(0,s.jsx)(r.td,{children:"O(log n)"}),(0,s.jsx)(r.td,{children:"O(n)"}),(0,s.jsx)(r.td,{children:"O(1) iterative / O(h) recursive"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"BST Construction from Preorder"}),(0,s.jsx)(r.td,{children:"O(n)"}),(0,s.jsx)(r.td,{children:"O(n)"}),(0,s.jsx)(r.td,{children:"O(n)"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"BST Construction from Inorder"}),(0,s.jsx)(r.td,{children:"O(n)"}),(0,s.jsx)(r.td,{children:"O(n)"}),(0,s.jsx)(r.td,{children:"O(log n) recursive"})]})]})]})]})}function c(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},28453:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>l});var t=n(96540);const s={},i=t.createContext(s);function o(e){const r=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(i.Provider,{value:r},e.children)}}}]);