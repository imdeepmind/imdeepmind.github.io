"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[464],{7983:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>t,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"design-patterns/architectural-patterns-concepts","title":"Architectural Patterns","description":"MVC (Model-View-Controller)","source":"@site/docs/design-patterns/architectural-patterns-concepts.md","sourceDirName":"design-patterns","slug":"/design-patterns/architectural-patterns-concepts","permalink":"/docs/design-patterns/architectural-patterns-concepts","draft":false,"unlisted":false,"editUrl":"https://github.com/imdeepmind/imdeepmind.github.io/blob/main/docs/design-patterns/architectural-patterns-concepts.md","tags":[],"version":"current","lastUpdatedBy":"Abhishek Chatterjee","lastUpdatedAt":1745242793000,"sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Core Software Engineering Principles","permalink":"/docs/design-patterns/other-principles"},"next":{"title":"Introduction","permalink":"/docs/ml/introduction"}}');var r=s(74848),l=s(28453);const t={sidebar_position:4},a="Architectural Patterns",d={},c=[{value:"MVC (Model-View-Controller)",id:"mvc-model-view-controller",level:2},{value:"Benefits",id:"benefits",level:3},{value:"Example",id:"example",level:3},{value:"Layered Architecture (N-tier)",id:"layered-architecture-n-tier",level:2},{value:"Benefits",id:"benefits-1",level:3},{value:"Example",id:"example-1",level:3},{value:"Repository Pattern",id:"repository-pattern",level:2},{value:"Benefits",id:"benefits-2",level:3},{value:"Example",id:"example-2",level:3},{value:"Dependency Injection (DI) / Inversion of Control (IoC)",id:"dependency-injection-di--inversion-of-control-ioc",level:2},{value:"Benefits",id:"benefits-3",level:3},{value:"Example",id:"example-3",level:3},{value:"Microservices vs Monolith",id:"microservices-vs-monolith",level:2},{value:"Monolith",id:"monolith",level:3},{value:"Microservices",id:"microservices",level:3},{value:"Example (Conceptual)",id:"example-conceptual",level:3},{value:"Event-Driven Architecture",id:"event-driven-architecture",level:2},{value:"Benefits",id:"benefits-4",level:3},{value:"Example using a simple event bus",id:"example-using-a-simple-event-bus",level:3},{value:"CQRS (Command Query Responsibility Segregation)",id:"cqrs-command-query-responsibility-segregation",level:2},{value:"Benefits",id:"benefits-5",level:3},{value:"Example",id:"example-4",level:3}];function o(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"architectural-patterns",children:"Architectural Patterns"})}),"\n",(0,r.jsx)(n.h2,{id:"mvc-model-view-controller",children:"MVC (Model-View-Controller)"}),"\n",(0,r.jsx)(n.p,{children:"MVC separates an application into three interconnected components:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Model:"})," Manages data and business logic."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"View:"})," Represents UI and presentation layer."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Controller:"})," Handles user input and updates the Model and View."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"benefits",children:"Benefits"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Separation of concerns"}),"\n",(0,r.jsx)(n.li,{children:"Easier to test and maintain"}),"\n",(0,r.jsx)(n.li,{children:"Promotes modularity"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Model\nclass User:\n    def __init__(self, username):\n        self.username = username\n\n# View\nclass UserView:\n    def show_user(self, user):\n        print(f"User: {user.username}")\n\n# Controller\nclass UserController:\n    def __init__(self, user, view):\n        self.user = user\n        self.view = view\n\n    def update_username(self, new_name):\n        self.user.username = new_name\n\n    def display_user(self):\n        self.view.show_user(self.user)\n\n# Usage\nuser = User("abhishek")\nview = UserView()\ncontroller = UserController(user, view)\n\ncontroller.display_user()\ncontroller.update_username("abhi_updated")\ncontroller.display_user()\n'})}),"\n",(0,r.jsx)(n.h2,{id:"layered-architecture-n-tier",children:"Layered Architecture (N-tier)"}),"\n",(0,r.jsx)(n.p,{children:"Divides the application into layers:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Presentation Layer:"})," UI"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Business Logic Layer:"})," Core functionalities"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Data Access Layer:"})," Interacts with DB"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"benefits-1",children:"Benefits"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Clear separation of responsibilities"}),"\n",(0,r.jsx)(n.li,{children:"Testability and maintainability"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"example-1",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Data Layer\nclass UserRepository:\n    def get_user(self, user_id):\n        return {"id": user_id, "name": "Abhishek"}\n\n# Business Layer\nclass UserService:\n    def __init__(self, repository):\n        self.repository = repository\n\n    def get_user_name(self, user_id):\n        user = self.repository.get_user(user_id)\n        return user["name"]\n\n# Presentation Layer\ndef display_user(user_service, user_id):\n    name = user_service.get_user_name(user_id)\n    print(f"User Name: {name}")\n\nrepo = UserRepository()\nservice = UserService(repo)\ndisplay_user(service, 1)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"repository-pattern",children:"Repository Pattern"}),"\n",(0,r.jsx)(n.p,{children:"Abstracts the data layer, encapsulating the logic to access data from a data source."}),"\n",(0,r.jsx)(n.h3,{id:"benefits-2",children:"Benefits"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Centralized data access logic"}),"\n",(0,r.jsx)(n.li,{children:"Decouples business logic from database logic"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"example-2",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class User:\n    def __init__(self, user_id, name):\n        self.id = user_id\n        self.name = name\n\n# Repository\nclass UserRepository:\n    def __init__(self):\n        self.users = {}  # Simulated database\n\n    def add_user(self, user):\n        self.users[user.id] = user\n\n    def get_user_by_id(self, user_id):\n        return self.users.get(user_id)\n\nrepo = UserRepository()\nrepo.add_user(User(1, "Abhishek"))\n\nuser = repo.get_user_by_id(1)\nprint(user.name)  # Output: Abhishek\n'})}),"\n",(0,r.jsx)(n.h2,{id:"dependency-injection-di--inversion-of-control-ioc",children:"Dependency Injection (DI) / Inversion of Control (IoC)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"DI:"})," Objects receive their dependencies from an external source rather than creating them internally."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"IoC:"})," The control flow of a program is inverted \u2014 the framework calls your code instead of your code calling the framework."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"benefits-3",children:"Benefits"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Improved testability"}),"\n",(0,r.jsx)(n.li,{children:"Decoupled code"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"example-3",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Service\nclass EmailService:\n    def send_email(self, user, message):\n        print(f"Sending email to {user}: {message}")\n\n# Controller with DI\nclass UserController:\n    def __init__(self, email_service):\n        self.email_service = email_service\n\n    def notify_user(self, user):\n        self.email_service.send_email(user, "Hello!")\n\n# Injecting the dependency\nemail_service = EmailService()\ncontroller = UserController(email_service)\ncontroller.notify_user("abhishek@example.com")\n'})}),"\n",(0,r.jsx)(n.h2,{id:"microservices-vs-monolith",children:"Microservices vs Monolith"}),"\n",(0,r.jsx)(n.h3,{id:"monolith",children:"Monolith"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"A single codebase handling all business logic."}),"\n",(0,r.jsx)(n.li,{children:"Simpler to deploy initially, tightly coupled."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"microservices",children:"Microservices"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Application is broken into smaller, independent services."}),"\n",(0,r.jsx)(n.li,{children:"Each service runs in its own process and communicates via HTTP or messaging queues."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"example-conceptual",children:"Example (Conceptual)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Monolith\nclass App:\n    def register_user(self):\n        pass\n\n    def process_payment(self):\n        pass\n\n# Microservices\n# user_service.py\ndef register_user():\n    pass\n\n# payment_service.py\ndef process_payment():\n    pass\n\n# These services would run independently and communicate over HTTP or message queues\n"})}),"\n",(0,r.jsx)(n.h2,{id:"event-driven-architecture",children:"Event-Driven Architecture"}),"\n",(0,r.jsx)(n.p,{children:"Components communicate by emitting and listening to events asynchronously."}),"\n",(0,r.jsx)(n.h3,{id:"benefits-4",children:"Benefits"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Loose coupling"}),"\n",(0,r.jsx)(n.li,{children:"High scalability"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"example-using-a-simple-event-bus",children:"Example using a simple event bus"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Simple Event Bus\nclass EventBus:\n    def __init__(self):\n        self.listeners = {}\n\n    def subscribe(self, event_type, callback):\n        self.listeners.setdefault(event_type, []).append(callback)\n\n    def publish(self, event_type, data):\n        for callback in self.listeners.get(event_type, []):\n            callback(data)\n\n# Usage\nbus = EventBus()\n\ndef handle_user_registered(data):\n    print(f"Sending welcome email to {data[\'email\']}")\n\nbus.subscribe("user_registered", handle_user_registered)\n\n# Emit the event\nbus.publish("user_registered", {"email": "abhi@example.com"})\n'})}),"\n",(0,r.jsx)(n.h2,{id:"cqrs-command-query-responsibility-segregation",children:"CQRS (Command Query Responsibility Segregation)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Segregates read and write operations into separate models."}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Command:"})," Updates data (write)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Query:"})," Reads data"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"benefits-5",children:"Benefits"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Optimized for reads and writes independently"}),"\n",(0,r.jsx)(n.li,{children:"Good for complex domains"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"example-4",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Command - Write model\nclass UserCommandHandler:\n    def __init__(self):\n        self.store = {}\n\n    def create_user(self, user_id, name):\n        self.store[user_id] = name\n        print(f"User created: {name}")\n\n# Query - Read model\nclass UserQueryHandler:\n    def __init__(self, store):\n        self.store = store\n\n    def get_user(self, user_id):\n        return self.store.get(user_id)\n\n# Usage\ncommand_handler = UserCommandHandler()\ncommand_handler.create_user(1, "Abhishek")\n\nquery_handler = UserQueryHandler(command_handler.store)\nprint(query_handler.get_user(1))  # Output: Abhishek\n'})})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>a});var i=s(96540);const r={},l=i.createContext(r);function t(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);