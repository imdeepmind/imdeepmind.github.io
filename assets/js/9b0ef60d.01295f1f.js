"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[4751],{34117:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"programming/programming-languages/go/structs","title":"Structs and Custom Types","description":"Structs are Go\'s way of creating user-defined types that group together related data. They are similar to classes in other languages but without inheritance. Go also allows you to create custom types based on existing types, providing flexibility and type safety.","source":"@site/docs/programming/programming-languages/go/structs.md","sourceDirName":"programming/programming-languages/go","slug":"/programming/programming-languages/go/structs","permalink":"/docs/programming/programming-languages/go/structs","draft":false,"unlisted":false,"editUrl":"https://github.com/imdeepmind/imdeepmind.github.io/blob/main/docs/programming/programming-languages/go/structs.md","tags":[],"version":"current","lastUpdatedBy":"Abhishek Chatterjee","lastUpdatedAt":1754407668000,"sidebarPosition":11,"frontMatter":{"sidebar_position":11},"sidebar":"tutorialSidebar","previous":{"title":"Pointers","permalink":"/docs/programming/programming-languages/go/pointers"},"next":{"title":"Interfaces and Generics","permalink":"/docs/programming/programming-languages/go/interfaces"}}');var r=t(74848),i=t(28453);const a={sidebar_position:11},o="Structs and Custom Types",c={},d=[{value:"Defining Structs",id:"defining-structs",level:2},{value:"Creating Struct Instances",id:"creating-struct-instances",level:2},{value:"Using Struct Literals",id:"using-struct-literals",level:3},{value:"Using the <code>new</code> Function",id:"using-the-new-function",level:3},{value:"Using Pointer to Struct",id:"using-pointer-to-struct",level:3},{value:"Accessing Struct Fields",id:"accessing-struct-fields",level:2},{value:"Anonymous Structs",id:"anonymous-structs",level:2},{value:"Nested Structs",id:"nested-structs",level:2},{value:"Embedded Structs (Struct Composition)",id:"embedded-structs-struct-composition",level:2},{value:"Methods on Structs",id:"methods-on-structs",level:2},{value:"Custom Types",id:"custom-types",level:2},{value:"Methods on Custom Types",id:"methods-on-custom-types",level:2},{value:"Struct Tags",id:"struct-tags",level:2},{value:"Struct Comparison",id:"struct-comparison",level:2},{value:"Zero Values",id:"zero-values",level:2},{value:"Exporting Structs from Packages",id:"exporting-structs-from-packages",level:2},{value:"Exported vs Unexported Structs",id:"exported-vs-unexported-structs",level:3},{value:"Using Exported Structs in Another Package",id:"using-exported-structs-in-another-package",level:3},{value:"Best Practices for Package Design",id:"best-practices-for-package-design",level:3},{value:"Guidelines for Struct Visibility",id:"guidelines-for-struct-visibility",level:3}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"structs-and-custom-types",children:"Structs and Custom Types"})}),"\n",(0,r.jsx)(n.p,{children:"Structs are Go's way of creating user-defined types that group together related data. They are similar to classes in other languages but without inheritance. Go also allows you to create custom types based on existing types, providing flexibility and type safety."}),"\n",(0,r.jsx)(n.h2,{id:"defining-structs",children:"Defining Structs"}),"\n",(0,r.jsxs)(n.p,{children:["A struct is defined using the ",(0,r.jsx)(n.code,{children:"type"})," keyword followed by the struct name and the ",(0,r.jsx)(n.code,{children:"struct"})," keyword:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"type Person struct {\n    Name    string\n    Age     int\n    Email   string\n    Address string\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"creating-struct-instances",children:"Creating Struct Instances"}),"\n",(0,r.jsx)(n.p,{children:"There are several ways to create instances of a struct:"}),"\n",(0,r.jsx)(n.h3,{id:"using-struct-literals",children:"Using Struct Literals"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'// Method 1: Specify all fields in order\np1 := Person{"John Doe", 30, "john@example.com", "123 Main St"}\n\n// Method 2: Specify fields by name (preferred)\np2 := Person{\n    Name:    "Jane Smith",\n    Age:     25,\n    Email:   "jane@example.com",\n    Address: "456 Oak Ave",\n}\n\n// Method 3: Partial initialization (unspecified fields get zero values)\np3 := Person{\n    Name: "Bob Johnson",\n    Age:  35,\n}\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"using-the-new-function",children:["Using the ",(0,r.jsx)(n.code,{children:"new"})," Function"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'p := new(Person)\np.Name = "Alice Brown"\np.Age = 28\n'})}),"\n",(0,r.jsx)(n.h3,{id:"using-pointer-to-struct",children:"Using Pointer to Struct"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'p := &Person{\n    Name: "Charlie Wilson",\n    Age:  40,\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"accessing-struct-fields",children:"Accessing Struct Fields"}),"\n",(0,r.jsx)(n.p,{children:"Use dot notation to access struct fields:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'fmt.Println(p.Name)\nfmt.Println(p.Age)\n\n// Modifying fields\np.Age = 31\np.Email = "newemail@example.com"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"anonymous-structs",children:"Anonymous Structs"}),"\n",(0,r.jsx)(n.p,{children:"You can create structs without defining a named type:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'person := struct {\n    Name string\n    Age  int\n}{\n    Name: "Anonymous Person",\n    Age:  25,\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"nested-structs",children:"Nested Structs"}),"\n",(0,r.jsx)(n.p,{children:"Structs can contain other structs as fields:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'type Address struct {\n    Street   string\n    City     string\n    State    string\n    ZipCode  string\n}\n\ntype Person struct {\n    Name    string\n    Age     int\n    Address Address\n}\n\np := Person{\n    Name: "John Doe",\n    Age:  30,\n    Address: Address{\n        Street:  "123 Main St",\n        City:    "Anytown",\n        State:   "CA",\n        ZipCode: "12345",\n    },\n}\n\n// Accessing nested fields\nfmt.Println(p.Address.City)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"embedded-structs-struct-composition",children:"Embedded Structs (Struct Composition)"}),"\n",(0,r.jsx)(n.p,{children:"Go supports struct embedding, which provides a form of composition:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'type Animal struct {\n    Name    string\n    Species string\n}\n\ntype Dog struct {\n    Animal  // Embedded struct\n    Breed   string\n    IsGood  bool\n}\n\ndog := Dog{\n    Animal: Animal{\n        Name:    "Buddy",\n        Species: "Canine",\n    },\n    Breed:  "Golden Retriever",\n    IsGood: true,\n}\n\n// Can access embedded fields directly\nfmt.Println(dog.Name)    // Same as dog.Animal.Name\nfmt.Println(dog.Species) // Same as dog.Animal.Species\n'})}),"\n",(0,r.jsx)(n.h2,{id:"methods-on-structs",children:"Methods on Structs"}),"\n",(0,r.jsx)(n.p,{children:"You can define methods on structs using receiver functions:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"type Rectangle struct {\n    Width  float64\n    Height float64\n}\n\n// Method with value receiver\nfunc (r Rectangle) Area() float64 {\n    return r.Width * r.Height\n}\n\n// Method with pointer receiver\nfunc (r *Rectangle) Scale(factor float64) {\n    r.Width *= factor\n    r.Height *= factor\n}\n\n// Usage\nrect := Rectangle{Width: 10, Height: 5}\nfmt.Println(rect.Area()) // 50\n\nrect.Scale(2)\nfmt.Println(rect.Width)  // 20\nfmt.Println(rect.Height) // 10\n"})}),"\n",(0,r.jsx)(n.h2,{id:"custom-types",children:"Custom Types"}),"\n",(0,r.jsx)(n.p,{children:"Go allows you to create custom types based on existing types:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"type UserID int\ntype Temperature float64\ntype StatusCode int\n\nconst (\n    StatusOK StatusCode = 200\n    StatusNotFound StatusCode = 404\n    StatusInternalError StatusCode = 500\n)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"methods-on-custom-types",children:"Methods on Custom Types"}),"\n",(0,r.jsx)(n.p,{children:"You can define methods on custom types:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'type Temperature float64\n\nfunc (t Temperature) Celsius() float64 {\n    return float64(t)\n}\n\nfunc (t Temperature) Fahrenheit() float64 {\n    return float64(t)*9/5 + 32\n}\n\nfunc (t Temperature) Kelvin() float64 {\n    return float64(t) + 273.15\n}\n\n// Usage\ntemp := Temperature(25.0)\nfmt.Printf("%.1f\xb0C = %.1f\xb0F = %.1fK\\n",\n    temp.Celsius(), temp.Fahrenheit(), temp.Kelvin())\n'})}),"\n",(0,r.jsx)(n.h2,{id:"struct-tags",children:"Struct Tags"}),"\n",(0,r.jsx)(n.p,{children:"Struct tags provide metadata about struct fields, commonly used for JSON serialization:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'type User struct {\n    ID       int    `json:"id"`\n    Name     string `json:"name"`\n    Email    string `json:"email,omitempty"`\n    Password string `json:"-"` // Excluded from JSON\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"struct-comparison",children:"Struct Comparison"}),"\n",(0,r.jsx)(n.p,{children:"Structs are comparable if all their fields are comparable:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"type Point struct {\n    X, Y int\n}\n\np1 := Point{1, 2}\np2 := Point{1, 2}\np3 := Point{2, 3}\n\nfmt.Println(p1 == p2) // true\nfmt.Println(p1 == p3) // false\n"})}),"\n",(0,r.jsx)(n.h2,{id:"zero-values",children:"Zero Values"}),"\n",(0,r.jsx)(n.p,{children:"Structs have zero values - all fields are set to their respective zero values:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'var p Person\n// p.Name = ""\n// p.Age = 0\n// p.Email = ""\n// p.Address = ""\n'})}),"\n",(0,r.jsx)(n.h2,{id:"exporting-structs-from-packages",children:"Exporting Structs from Packages"}),"\n",(0,r.jsx)(n.p,{children:"Go uses capitalization to determine visibility across packages. Structs and their fields that start with a capital letter are exported (public), while those starting with a lowercase letter are unexported (private to the package)."}),"\n",(0,r.jsx)(n.h3,{id:"exported-vs-unexported-structs",children:"Exported vs Unexported Structs"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'// In package "models"\npackage models\n\n// Exported struct - can be used by other packages\ntype User struct {\n    ID       int    // Exported field\n    Name     string // Exported field\n    email    string // Unexported field - only accessible within this package\n    password string // Unexported field - only accessible within this package\n}\n\n// Unexported struct - only accessible within this package\ntype userSession struct {\n    UserID    int\n    Token     string\n    ExpiresAt time.Time\n}\n\n// Exported constructor function for creating User instances\nfunc NewUser(id int, name, email, password string) *User {\n    return &User{\n        ID:       id,\n        Name:     name,\n        email:    email,\n        password: password,\n    }\n}\n\n// Exported method to get email (since email field is unexported)\nfunc (u *User) Email() string {\n    return u.email\n}\n\n// Exported method to validate password\nfunc (u *User) ValidatePassword(password string) bool {\n    return u.password == password\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"using-exported-structs-in-another-package",children:"Using Exported Structs in Another Package"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'// In package "main"\npackage main\n\nimport (\n    "fmt"\n    "yourmodule/models" // Import the package containing the structs\n)\n\nfunc main() {\n    // Create a new user using the exported constructor\n    user := models.NewUser(1, "John Doe", "john@example.com", "secret123")\n\n    // Access exported fields directly\n    fmt.Println("User ID:", user.ID)\n    fmt.Println("User Name:", user.Name)\n\n    // Access unexported field through exported method\n    fmt.Println("User Email:", user.Email())\n\n    // Use exported method\n    if user.ValidatePassword("secret123") {\n        fmt.Println("Password is valid")\n    }\n\n    // This would cause a compile error (unexported field):\n    // fmt.Println(user.email) // Error: cannot refer to unexported field\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"best-practices-for-package-design",children:"Best Practices for Package Design"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'// In package "api"\npackage api\n\nimport "time"\n\n// Response represents an API response - exported for external use\ntype Response struct {\n    Success bool        `json:"success"`\n    Data    interface{} `json:"data,omitempty"`\n    Error   string      `json:"error,omitempty"`\n    Meta    *Metadata   `json:"meta,omitempty"`\n}\n\n// Metadata contains response metadata - exported\ntype Metadata struct {\n    Timestamp time.Time `json:"timestamp"`\n    Version   string    `json:"version"`\n    RequestID string    `json:"request_id"`\n}\n\n// Internal configuration struct - unexported\ntype config struct {\n    apiKey    string\n    baseURL   string\n    timeout   time.Duration\n    retries   int\n}\n\n// NewResponse creates a new successful response - exported constructor\nfunc NewResponse(data interface{}) *Response {\n    return &Response{\n        Success: true,\n        Data:    data,\n        Meta: &Metadata{\n            Timestamp: time.Now(),\n            Version:   "1.0",\n        },\n    }\n}\n\n// NewErrorResponse creates a new error response - exported constructor\nfunc NewErrorResponse(err string) *Response {\n    return &Response{\n        Success: false,\n        Error:   err,\n        Meta: &Metadata{\n            Timestamp: time.Now(),\n            Version:   "1.0",\n        },\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"guidelines-for-struct-visibility",children:"Guidelines for Struct Visibility"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Export structs"})," that other packages need to create, modify, or interact with"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Keep internal implementation details unexported"})," to maintain encapsulation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Provide exported constructor functions"})," for complex initialization"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Use exported methods"})," to access unexported fields when necessary"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Export fields"})," that other packages legitimately need to read or modify"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Keep configuration and internal state unexported"})," to prevent misuse"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(96540);const r={},i=s.createContext(r);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);