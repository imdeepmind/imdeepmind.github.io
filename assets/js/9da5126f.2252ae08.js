"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[4731],{4589:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"frameworks-libraries/react/state-management","title":"State Management","description":"Context API","source":"@site/docs/frameworks-libraries/react/state-management.md","sourceDirName":"frameworks-libraries/react","slug":"/frameworks-libraries/react/state-management","permalink":"/docs/frameworks-libraries/react/state-management","draft":false,"unlisted":false,"editUrl":"https://github.com/imdeepmind/imdeepmind.github.io/blob/main/docs/frameworks-libraries/react/state-management.md","tags":[],"version":"current","lastUpdatedBy":"Abhishek Chatterjee","lastUpdatedAt":1735581142000,"sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Component Composition and Design","permalink":"/docs/frameworks-libraries/react/components"},"next":{"title":"Routing","permalink":"/docs/frameworks-libraries/react/routing"}}');var i=t(4848),a=t(8453);const r={sidebar_position:5},o="State Management",c={},l=[{value:"Context API",id:"context-api",level:2},{value:"Key Concepts",id:"key-concepts",level:3},{value:"Use Cases",id:"use-cases",level:3},{value:"Basic Example",id:"basic-example",level:3},{value:"Limitations",id:"limitations",level:3},{value:"Redux",id:"redux",level:2},{value:"Core Concepts",id:"core-concepts",level:3},{value:"Redux Flow",id:"redux-flow",level:3},{value:"Basic Example",id:"basic-example-1",level:3},{value:"Middleware in Redux",id:"middleware-in-redux",level:2},{value:"Redux Thunk",id:"redux-thunk",level:3},{value:"Redux Saga",id:"redux-saga",level:3},{value:"Redux Toolkit (RTK)",id:"redux-toolkit-rtk",level:2},{value:"Key Features",id:"key-features",level:3},{value:"Basic Example",id:"basic-example-2",level:3},{value:"Benefits",id:"benefits",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"state-management",children:"State Management"})}),"\n",(0,i.jsx)(n.h2,{id:"context-api",children:"Context API"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"Context API"}),' is a feature built into React that enables you to manage global state across a component tree without having to manually pass props down the hierarchy (i.e., avoiding "prop drilling").']}),"\n",(0,i.jsx)(n.h3,{id:"key-concepts",children:"Key Concepts"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Context"}),": Provides a way to share data (state) between components without explicitly passing props."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Provider"}),": The component that holds the global state and makes it available to all its children."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Consumer"}),": Components that access the context's data."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"use-cases",children:"Use Cases"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Managing global themes (e.g., light/dark mode)."}),"\n",(0,i.jsx)(n.li,{children:"User authentication and session management."}),"\n",(0,i.jsx)(n.li,{children:"Sharing data that doesn't change frequently across deeply nested components."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"basic-example",children:"Basic Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'import React, { createContext, useContext, useState } from "react";\n\n// Create a context\nconst ThemeContext = createContext<{ theme: string; toggleTheme: () => void }>({\n  theme: "light",\n  toggleTheme: () => {},\n});\n\n// Provide the context to children\nconst ThemeProvider = ({ children }: { children: React.ReactNode }) => {\n  const [theme, setTheme] = useState("light");\n\n  const toggleTheme = () => {\n    setTheme((prev) => (prev === "light" ? "dark" : "light"));\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\n// Consume the context\nconst ThemedComponent = () => {\n  const { theme, toggleTheme } = useContext(ThemeContext);\n\n  return (\n    <div\n      style={{\n        background: theme === "light" ? "#fff" : "#333",\n        color: theme === "light" ? "#000" : "#fff",\n      }}\n    >\n      <p>The current theme is {theme}</p>\n      <button onClick={toggleTheme}>Toggle Theme</button>\n    </div>\n  );\n};\n\nconst App = () => (\n  <ThemeProvider>\n    <ThemedComponent />\n  </ThemeProvider>\n);\n'})}),"\n",(0,i.jsx)(n.h3,{id:"limitations",children:"Limitations"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Can lead to ",(0,i.jsx)(n.strong,{children:"unnecessary re-renders"})," if the context value changes frequently."]}),"\n",(0,i.jsx)(n.li,{children:"Doesn't scale well for large and complex applications with many interdependent states."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"redux",children:"Redux"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Redux"})," is a state management library commonly used in React applications to handle complex state and interactions in a predictable way."]}),"\n",(0,i.jsx)(n.h3,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Store"}),": A single source of truth where the global state is stored."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Actions"}),": Plain JavaScript objects that describe what should change in the state."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Reducers"}),": Pure functions that take the current state and an action and return the new state."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Dispatch"}),": A method to send actions to the store."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Selectors"}),": Functions to extract data from the state."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"redux-flow",children:"Redux Flow"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Dispatch an action."}),"\n",(0,i.jsx)(n.li,{children:"The reducer processes the action and updates the store."}),"\n",(0,i.jsx)(n.li,{children:"The updated state is propagated to the React components."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"basic-example-1",children:"Basic Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'import { createStore } from "redux";\nimport { Provider, useDispatch, useSelector } from "react-redux";\n\n// Define actions\nconst INCREMENT = "INCREMENT";\nconst DECREMENT = "DECREMENT";\n\nconst increment = () => ({ type: INCREMENT });\nconst decrement = () => ({ type: DECREMENT });\n\n// Reducer\nconst counterReducer = (state = 0, action: { type: string }) => {\n  switch (action.type) {\n    case INCREMENT:\n      return state + 1;\n    case DECREMENT:\n      return state - 1;\n    default:\n      return state;\n  }\n};\n\n// Create store\nconst store = createStore(counterReducer);\n\n// React components\nconst Counter = () => {\n  const dispatch = useDispatch();\n  const count = useSelector((state: number) => state);\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => dispatch(increment())}>Increment</button>\n      <button onClick={() => dispatch(decrement())}>Decrement</button>\n    </div>\n  );\n};\n\nconst App = () => (\n  <Provider store={store}>\n    <Counter />\n  </Provider>\n);\n'})}),"\n",(0,i.jsx)(n.h2,{id:"middleware-in-redux",children:"Middleware in Redux"}),"\n",(0,i.jsxs)(n.p,{children:["Middleware in Redux extends its functionality by allowing custom logic to be executed between the action being dispatched and the reducer handling the action. It's commonly used for handling ",(0,i.jsx)(n.strong,{children:"asynchronous operations"})," and ",(0,i.jsx)(n.strong,{children:"side effects"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"redux-thunk",children:"Redux Thunk"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Allows you to write action creators that return a function instead of an action."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Used for handling asynchronous actions (e.g., API calls)."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'import { createSlice, configureStore } from "@reduxjs/toolkit";\nimport thunk from "redux-thunk";\nimport { Provider, useDispatch, useSelector } from "react-redux";\n\nconst dataSlice = createSlice({\n  name: "data",\n  initialState: { loading: false, items: [] },\n  reducers: {\n    fetchStart: (state) => {\n      state.loading = true;\n    },\n    fetchSuccess: (state, action) => {\n      state.loading = false;\n      state.items = action.payload;\n    },\n  },\n});\n\nconst { fetchStart, fetchSuccess } = dataSlice.actions;\n\nconst fetchData = () => async (dispatch: any) => {\n  dispatch(fetchStart());\n  const response = await fetch("https://api.example.com/data");\n  const data = await response.json();\n  dispatch(fetchSuccess(data));\n};\n\nconst store = configureStore({\n  reducer: dataSlice.reducer,\n  middleware: [thunk],\n});\n\nconst DataComponent = () => {\n  const dispatch = useDispatch();\n  const { loading, items } = useSelector((state: any) => state);\n\n  React.useEffect(() => {\n    dispatch(fetchData());\n  }, [dispatch]);\n\n  return (\n    <div>\n      {loading ? (\n        <p>Loading...</p>\n      ) : (\n        <ul>\n          {items.map((item: any) => (\n            <li key={item.id}>{item.name}</li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nconst App = () => (\n  <Provider store={store}>\n    <DataComponent />\n  </Provider>\n);\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"redux-saga",children:"Redux Saga"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Uses generator functions (",(0,i.jsx)(n.code,{children:"function*"}),") to handle side effects in a more declarative way."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Useful for managing complex asynchronous workflows and tasks."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Example (simplified):"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'import createSagaMiddleware from "redux-saga";\nimport { takeEvery, put } from "redux-saga/effects";\n\n// Worker saga\nfunction* fetchUser(action: any) {\n  const user = yield fetch(\n    `https://api.example.com/users/${action.payload}`\n  ).then((res) => res.json());\n  yield put({ type: "USER_FETCH_SUCCESS", payload: user });\n}\n\n// Watcher saga\nfunction* watchFetchUser() {\n  yield takeEvery("USER_FETCH_REQUEST", fetchUser);\n}\n\n// Create Saga middleware\nconst sagaMiddleware = createSagaMiddleware();\n\n// Add sagaMiddleware to the Redux store\nconst store = configureStore({\n  reducer: userReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware().concat(sagaMiddleware),\n});\n\nsagaMiddleware.run(watchFetchUser);\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"redux-toolkit-rtk",children:"Redux Toolkit (RTK)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Redux Toolkit (RTK)"})," is the official, recommended way to use Redux. It simplifies Redux setup by providing utilities for writing less boilerplate code."]}),"\n",(0,i.jsx)(n.h3,{id:"key-features",children:"Key Features"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"createSlice"})}),": Combines reducers, actions, and action creators in one place."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"configureStore"})}),": Simplifies store configuration with built-in middleware."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"createAsyncThunk"})}),": Handles asynchronous logic like API calls."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"DevTools Support"}),": Automatically configures Redux DevTools for debugging."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"basic-example-2",children:"Basic Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'import {\n  createSlice,\n  configureStore,\n  createAsyncThunk,\n} from "@reduxjs/toolkit";\nimport { Provider, useDispatch, useSelector } from "react-redux";\n\n// Async thunk\nconst fetchUsers = createAsyncThunk("users/fetch", async () => {\n  const response = await fetch("https://api.example.com/users");\n  return await response.json();\n});\n\n// Create slice\nconst usersSlice = createSlice({\n  name: "users",\n  initialState: { loading: false, data: [] },\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchUsers.pending, (state) => {\n        state.loading = true;\n      })\n      .addCase(fetchUsers.fulfilled, (state, action) => {\n        state.loading = false;\n        state.data = action.payload;\n      });\n  },\n});\n\n// Create store\nconst store = configureStore({\n  reducer: usersSlice.reducer,\n});\n\nconst UsersComponent = () => {\n  const dispatch = useDispatch();\n  const { loading, data } = useSelector((state: any) => state);\n\n  React.useEffect(() => {\n    dispatch(fetchUsers());\n  }, [dispatch]);\n\n  return (\n    <div>\n      {loading ? (\n        <p>Loading...</p>\n      ) : (\n        <ul>\n          {data.map((user: any) => (\n            <li key={user.id}>{user.name}</li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nconst App = () => (\n  <Provider store={store}>\n    <UsersComponent />\n  </Provider>\n);\n'})}),"\n",(0,i.jsx)(n.h3,{id:"benefits",children:"Benefits"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Simplifies the Redux development process."}),"\n",(0,i.jsx)(n.li,{children:"Integrates seamlessly with TypeScript."}),"\n",(0,i.jsx)(n.li,{children:"Reduces boilerplate code significantly."}),"\n",(0,i.jsx)(n.li,{children:"Supports advanced use cases like asynchronous operations with minimal configuration."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var s=t(6540);const i={},a=s.createContext(i);function r(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);