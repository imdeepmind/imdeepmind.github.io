"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[4731],{4589:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"frameworks-libraries/react/state-management","title":"State Management","description":"State management refers to the process of managing the state of an application efficiently. In React, the \\"state\\" represents the dynamic data of a component or application, which can change over time as users interact with the UI.","source":"@site/docs/frameworks-libraries/react/state-management.md","sourceDirName":"frameworks-libraries/react","slug":"/frameworks-libraries/react/state-management","permalink":"/docs/frameworks-libraries/react/state-management","draft":false,"unlisted":false,"editUrl":"https://github.com/imdeepmind/imdeepmind.github.io/blob/main/docs/frameworks-libraries/react/state-management.md","tags":[],"version":"current","lastUpdatedBy":"Abhishek Chatterjee","lastUpdatedAt":1735711473000,"sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Components","permalink":"/docs/frameworks-libraries/react/class-functional-components"},"next":{"title":"React Hooks","permalink":"/docs/frameworks-libraries/react/hooks"}}');var i=t(4848),r=t(8453);const a={sidebar_position:6},c="State Management",l={},o=[{value:"State Management with <code>useState</code>",id:"state-management-with-usestate",level:2},{value:"Characteristics",id:"characteristics",level:3},{value:"Syntax",id:"syntax",level:3},{value:"Example",id:"example",level:3},{value:"When to Use",id:"when-to-use",level:3},{value:"State Management with <code>useReducer</code>",id:"state-management-with-usereducer",level:2},{value:"Characteristics",id:"characteristics-1",level:3},{value:"Syntax",id:"syntax-1",level:3},{value:"Example",id:"example-1",level:3},{value:"When to Use",id:"when-to-use-1",level:3},{value:"State Management with Context API",id:"state-management-with-context-api",level:2},{value:"Characteristics",id:"characteristics-2",level:3},{value:"Key Components",id:"key-components",level:3},{value:"Example",id:"example-2",level:3},{value:"When to Use",id:"when-to-use-2",level:3},{value:"State Management with Redux",id:"state-management-with-redux",level:2},{value:"Characteristics",id:"characteristics-3",level:3},{value:"Core Concepts",id:"core-concepts",level:3},{value:"Example",id:"example-3",level:3},{value:"When to Use",id:"when-to-use-3",level:3},{value:"Redux Middleware (Thunk and Saga)",id:"redux-middleware-thunk-and-saga",level:2},{value:"Redux Thunk",id:"redux-thunk",level:3},{value:"Redux Saga",id:"redux-saga",level:3},{value:"When to Use",id:"when-to-use-4",level:3},{value:"State Management with Redux Toolkit",id:"state-management-with-redux-toolkit",level:2},{value:"Features",id:"features",level:3},{value:"Example",id:"example-4",level:3},{value:"When to Use",id:"when-to-use-5",level:3},{value:"Summary Table",id:"summary-table",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"state-management",children:"State Management"})}),"\n",(0,i.jsx)(n.p,{children:'State management refers to the process of managing the state of an application efficiently. In React, the "state" represents the dynamic data of a component or application, which can change over time as users interact with the UI.'}),"\n",(0,i.jsx)(n.p,{children:"State management ensures:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Data consistency"})," across components."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Efficient updates"})," to the UI based on state changes."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Simplified communication"})," between components."]}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"state-management-with-usestate",children:["State Management with ",(0,i.jsx)(n.code,{children:"useState"})]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"useState"})," hook is the most basic way to manage state in a React functional component."]}),"\n",(0,i.jsx)(n.h3,{id:"characteristics",children:"Characteristics"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Manages ",(0,i.jsx)(n.strong,{children:"local state"})," for a single component."]}),"\n",(0,i.jsx)(n.li,{children:"Best for simple, isolated state needs."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"syntax",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"const [state, setState] = useState(initialState);\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"state"}),": The current state value."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"setState"}),": A function to update the state."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'import React, { useState } from "react";\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n      <button onClick={() => setCount(count - 1)}>Decrement</button>\n    </div>\n  );\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"when-to-use",children:"When to Use"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["For ",(0,i.jsx)(n.strong,{children:"simple state logic"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["For ",(0,i.jsx)(n.strong,{children:"component-specific state"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"state-management-with-usereducer",children:["State Management with ",(0,i.jsx)(n.code,{children:"useReducer"})]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"useReducer"})," hook is a more powerful alternative to ",(0,i.jsx)(n.code,{children:"useState"})," for managing complex state logic."]}),"\n",(0,i.jsx)(n.h3,{id:"characteristics-1",children:"Characteristics"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Suitable for ",(0,i.jsx)(n.strong,{children:"complex state transitions"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Uses a ",(0,i.jsx)(n.strong,{children:"reducer function"})," to determine how state updates based on actions."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"syntax-1",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"const [state, dispatch] = useReducer(reducer, initialState);\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"reducer"}),": A function ",(0,i.jsx)(n.code,{children:"(state, action) => newState"})," that defines state transitions."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"dispatch"}),": A function to trigger state changes."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"example-1",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'import React, { useReducer } from "react";\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case "increment":\n      return { count: state.count + 1 };\n    case "decrement":\n      return { count: state.count - 1 };\n    case "reset":\n      return { count: 0 };\n    default:\n      throw new Error("Unknown action type");\n  }\n}\n\nfunction Counter() {\n  const [state, dispatch] = useReducer(reducer, { count: 0 });\n\n  return (\n    <div>\n      <p>Count: {state.count}</p>\n      <button onClick={() => dispatch({ type: "increment" })}>Increment</button>\n      <button onClick={() => dispatch({ type: "decrement" })}>Decrement</button>\n      <button onClick={() => dispatch({ type: "reset" })}>Reset</button>\n    </div>\n  );\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"when-to-use-1",children:"When to Use"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["For ",(0,i.jsx)(n.strong,{children:"complex state logic"})," involving multiple actions."]}),"\n",(0,i.jsxs)(n.li,{children:["When the next state depends on the ",(0,i.jsx)(n.strong,{children:"previous state"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"state-management-with-context-api",children:"State Management with Context API"}),"\n",(0,i.jsx)(n.p,{children:"The Context API provides a way to share state across multiple components without passing props down manually at every level."}),"\n",(0,i.jsx)(n.h3,{id:"characteristics-2",children:"Characteristics"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Solves the ",(0,i.jsx)(n.strong,{children:"prop drilling"})," problem (passing props through many levels)."]}),"\n",(0,i.jsxs)(n.li,{children:["Not suitable for ",(0,i.jsx)(n.strong,{children:"frequent state updates"})," (due to performance overhead)."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"key-components",children:"Key Components"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Context Provider"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Wraps components and provides the shared state."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"const MyContext = React.createContext();\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Context Consumer"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Consumes the shared state."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"example-2",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'import React, { useState, useContext } from "react";\n\n// Create context\nconst ThemeContext = React.createContext();\n\nfunction App() {\n  const [theme, setTheme] = useState("light");\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme }}>\n      <Toolbar />\n    </ThemeContext.Provider>\n  );\n}\n\nfunction Toolbar() {\n  const { theme, setTheme } = useContext(ThemeContext);\n\n  return (\n    <div>\n      <p>Current Theme: {theme}</p>\n      <button onClick={() => setTheme("dark")}>Switch to Dark Theme</button>\n    </div>\n  );\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"when-to-use-2",children:"When to Use"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["To ",(0,i.jsx)(n.strong,{children:"share state globally"})," across the component tree."]}),"\n",(0,i.jsxs)(n.li,{children:["For ",(0,i.jsx)(n.strong,{children:"static or infrequently changing state"})," (e.g., theme, user authentication)."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"state-management-with-redux",children:"State Management with Redux"}),"\n",(0,i.jsx)(n.p,{children:"Redux is a predictable state management library often used with React for managing application-level state."}),"\n",(0,i.jsx)(n.h3,{id:"characteristics-3",children:"Characteristics"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Centralizes state in a ",(0,i.jsx)(n.strong,{children:"single store"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["State is updated using ",(0,i.jsx)(n.strong,{children:"pure reducer functions"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Provides ",(0,i.jsx)(n.strong,{children:"predictable state transitions"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Store"}),": The centralized state container."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Actions"}),": Objects describing what to do (e.g., ",(0,i.jsx)(n.code,{children:"{ type: 'INCREMENT' }"}),")."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Reducer"}),": A function ",(0,i.jsx)(n.code,{children:"(state, action) => newState"})," that handles state transitions."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"example-3",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'import { createStore } from "redux";\n\n// Reducer\nfunction counterReducer(state = { count: 0 }, action) {\n  switch (action.type) {\n    case "INCREMENT":\n      return { count: state.count + 1 };\n    case "DECREMENT":\n      return { count: state.count - 1 };\n    default:\n      return state;\n  }\n}\n\n// Create Store\nconst store = createStore(counterReducer);\n\n// Dispatch Actions\nstore.dispatch({ type: "INCREMENT" });\nconsole.log(store.getState()); // { count: 1 }\n'})}),"\n",(0,i.jsx)(n.h3,{id:"when-to-use-3",children:"When to Use"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["For ",(0,i.jsx)(n.strong,{children:"large applications"})," where state needs to be shared across many components."]}),"\n",(0,i.jsxs)(n.li,{children:["When ",(0,i.jsx)(n.strong,{children:"state transitions need to be predictable"})," and easy to debug."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"redux-middleware-thunk-and-saga",children:"Redux Middleware (Thunk and Saga)"}),"\n",(0,i.jsx)(n.p,{children:"Middleware in Redux extends the store's capabilities by handling side effects like asynchronous actions."}),"\n",(0,i.jsx)(n.h3,{id:"redux-thunk",children:"Redux Thunk"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["A middleware for handling ",(0,i.jsx)(n.strong,{children:"async actions"})," in Redux."]}),"\n",(0,i.jsx)(n.li,{children:"Allows action creators to return functions (instead of objects)."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'// Action Creator with Thunk\nfunction fetchData() {\n  return async (dispatch) => {\n    const response = await fetch("/api/data");\n    const data = await response.json();\n    dispatch({ type: "SET_DATA", payload: data });\n  };\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"redux-saga",children:"Redux Saga"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["A middleware for handling ",(0,i.jsx)(n.strong,{children:"complex side effects"})," using generator functions."]}),"\n",(0,i.jsx)(n.li,{children:"Provides better control over side effects compared to Thunk."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'import { call, put, takeEvery } from "redux-saga/effects";\n\nfunction* fetchDataSaga() {\n  const data = yield call(fetch, "/api/data");\n  yield put({ type: "SET_DATA", payload: data });\n}\n\nfunction* watchFetchData() {\n  yield takeEvery("FETCH_DATA", fetchDataSaga);\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"when-to-use-4",children:"When to Use"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.strong,{children:"Thunk"})," for simple async logic (e.g., API calls)."]}),"\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.strong,{children:"Saga"})," for complex async workflows (e.g., orchestrating multiple side effects)."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"state-management-with-redux-toolkit",children:"State Management with Redux Toolkit"}),"\n",(0,i.jsx)(n.p,{children:"Redux Toolkit (RTK) simplifies Redux by providing utilities for setting up a Redux store with less boilerplate."}),"\n",(0,i.jsx)(n.h3,{id:"features",children:"Features"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"configureStore"})}),": Sets up the store with middleware pre-configured."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"createSlice"})}),": Automatically generates actions and reducers."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"createAsyncThunk"})}),": Simplifies async actions."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"example-4",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'import { configureStore, createSlice } from "@reduxjs/toolkit";\n\n// Slice\nconst counterSlice = createSlice({\n  name: "counter",\n  initialState: { count: 0 },\n  reducers: {\n    increment: (state) => {\n      state.count += 1;\n    },\n    decrement: (state) => {\n      state.count -= 1;\n    },\n  },\n});\n\nconst store = configureStore({\n  reducer: { counter: counterSlice.reducer },\n});\n\n// Dispatch Actions\nstore.dispatch(counterSlice.actions.increment());\nconsole.log(store.getState()); // { counter: { count: 1 } }\n'})}),"\n",(0,i.jsx)(n.h3,{id:"when-to-use-5",children:"When to Use"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["For ",(0,i.jsx)(n.strong,{children:"simplified Redux setup"}),"."]}),"\n",(0,i.jsx)(n.li,{children:"When you want to avoid the boilerplate of traditional Redux."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"summary-table",children:"Summary Table"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:(0,i.jsx)(n.strong,{children:"Method"})}),(0,i.jsx)(n.th,{children:(0,i.jsx)(n.strong,{children:"Use Case"})}),(0,i.jsx)(n.th,{children:(0,i.jsx)(n.strong,{children:"Complexity"})})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"useState"})}),(0,i.jsx)(n.td,{children:"Local state, simple components"}),(0,i.jsx)(n.td,{children:"Low"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"useReducer"})}),(0,i.jsx)(n.td,{children:"Complex state logic, multiple actions"}),(0,i.jsx)(n.td,{children:"Medium"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Context API"})}),(0,i.jsx)(n.td,{children:"Sharing global state across the component tree"}),(0,i.jsx)(n.td,{children:"Medium"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Redux"})}),(0,i.jsx)(n.td,{children:"Large-scale apps with shared, predictable state"}),(0,i.jsx)(n.td,{children:"High"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Redux Thunk"})}),(0,i.jsx)(n.td,{children:"Async actions in Redux"}),(0,i.jsx)(n.td,{children:"Medium"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Redux Saga"})}),(0,i.jsx)(n.td,{children:"Complex async workflows"}),(0,i.jsx)(n.td,{children:"High"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Redux Toolkit"})}),(0,i.jsx)(n.td,{children:"Simplified Redux setup, reduced boilerplate"}),(0,i.jsx)(n.td,{children:"Medium"})]})]})]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var s=t(6540);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);