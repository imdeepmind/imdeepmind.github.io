"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[8313],{30722:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"programming-languages/javascript/functions","title":"Functions","description":"In JavaScript, functions are core building blocks. A function is a reusable block of code that performs a specific task. Functions allow for modular code, encapsulation, and are essential for asynchronous operations and callback handling.","source":"@site/docs/programming-languages/javascript/functions.md","sourceDirName":"programming-languages/javascript","slug":"/programming-languages/javascript/functions","permalink":"/docs/programming-languages/javascript/functions","draft":false,"unlisted":false,"editUrl":"https://github.com/imdeepmind/imdeepmind.github.io/blob/main/docs/programming-languages/javascript/functions.md","tags":[],"version":"current","lastUpdatedBy":"Abhishek Chatterjee","lastUpdatedAt":1735114663000,"sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Mutation and Immutability","permalink":"/docs/programming-languages/javascript/mutation"},"next":{"title":"Asynchronous Programming","permalink":"/docs/programming-languages/javascript/asynchronous"}}');var t=s(74848),i=s(28453);const a={sidebar_position:5},o="Functions",c={},l=[{value:"Declaring Functions",id:"declaring-functions",level:2},{value:"Function Declaration",id:"function-declaration",level:3},{value:"Function Expression",id:"function-expression",level:3},{value:"Arrow Function",id:"arrow-function",level:3},{value:"Parameters and Arguments",id:"parameters-and-arguments",level:2},{value:"Return Statements",id:"return-statements",level:2},{value:"Anonymous Functions",id:"anonymous-functions",level:2},{value:"Higher-Order Functions",id:"higher-order-functions",level:2},{value:"Closures",id:"closures",level:2},{value:"<code>this</code> Context",id:"this-context",level:2},{value:"Function Scope and Hoisting",id:"function-scope-and-hoisting",level:2},{value:"Rest Parameters and Spread Operator",id:"rest-parameters-and-spread-operator",level:2},{value:"Pure vs. Impure Functions",id:"pure-vs-impure-functions",level:2}];function u(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"functions",children:"Functions"})}),"\n",(0,t.jsxs)(e.p,{children:["In JavaScript, ",(0,t.jsx)(e.strong,{children:"functions"})," are core building blocks. A function is a reusable block of code that performs a specific task. Functions allow for modular code, encapsulation, and are essential for asynchronous operations and callback handling."]}),"\n",(0,t.jsx)(e.h2,{id:"declaring-functions",children:"Declaring Functions"}),"\n",(0,t.jsx)(e.p,{children:"Functions in JavaScript can be created in several ways, each with unique syntax and behavior."}),"\n",(0,t.jsx)(e.h3,{id:"function-declaration",children:"Function Declaration"}),"\n",(0,t.jsxs)(e.p,{children:["A ",(0,t.jsx)(e.strong,{children:"function declaration"})," defines a named function that can be invoked later."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:'function greet(name) {\n  return `Hello, ${name}!`;\n}\n\nconsole.log(greet("Alice")); // Output: Hello, Alice!\n'})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Characteristics:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Function declarations are hoisted, meaning they are available throughout their scope even before they are declared."}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"function-expression",children:"Function Expression"}),"\n",(0,t.jsxs)(e.p,{children:["A ",(0,t.jsx)(e.strong,{children:"function expression"})," creates a function as part of an expression, usually by assigning it to a variable."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:'const greet = function (name) {\n  return `Hello, ${name}!`;\n};\n\nconsole.log(greet("Bob")); // Output: Hello, Bob!\n'})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Characteristics:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Function expressions are not hoisted. The function can only be used after the expression is evaluated."}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"arrow-function",children:"Arrow Function"}),"\n",(0,t.jsxs)(e.p,{children:["An ",(0,t.jsx)(e.strong,{children:"arrow function"})," is a concise way to write functions introduced in ES6."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:'const greet = (name) => `Hello, ${name}!`;\n\nconsole.log(greet("Carol")); // Output: Hello, Carol!\n'})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Characteristics:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Arrow functions have a shorter syntax and are useful for simple functions."}),"\n",(0,t.jsxs)(e.li,{children:["They do not have their own ",(0,t.jsx)(e.code,{children:"this"})," context (inherited from their enclosing scope)."]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"parameters-and-arguments",children:"Parameters and Arguments"}),"\n",(0,t.jsxs)(e.p,{children:["Functions can take ",(0,t.jsx)(e.strong,{children:"parameters"})," (placeholders in the function definition) and are passed ",(0,t.jsx)(e.strong,{children:"arguments"})," when invoked."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function add(a, b) {\n  return a + b;\n}\n\nconsole.log(add(3, 5)); // Output: 8\n"})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Default Parameters"}),": JavaScript allows you to set default values for function parameters."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:'function greet(name = "Guest") {\n  return `Hello, ${name}!`;\n}\n\nconsole.log(greet()); // Output: Hello, Guest!\n'})}),"\n",(0,t.jsx)(e.h2,{id:"return-statements",children:"Return Statements"}),"\n",(0,t.jsxs)(e.p,{children:["Functions use the ",(0,t.jsx)(e.code,{children:"return"})," keyword to return a value to the caller. If there is no ",(0,t.jsx)(e.code,{children:"return"}),", the function returns ",(0,t.jsx)(e.code,{children:"undefined"})," by default."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function multiply(a, b) {\n  return a * b;\n}\n\nconsole.log(multiply(4, 5)); // Output: 20\n"})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Returning Functions"}),": Functions in JavaScript can also return other functions."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function createMultiplier(factor) {\n  return function (number) {\n    return number * factor;\n  };\n}\n\nconst double = createMultiplier(2);\nconsole.log(double(5)); // Output: 10\n"})}),"\n",(0,t.jsx)(e.h2,{id:"anonymous-functions",children:"Anonymous Functions"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Anonymous functions"})," are functions without a name, often used as arguments or immediately invoked."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:'setTimeout(function () {\n  console.log("This message appears after 2 seconds");\n}, 2000);\n'})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Immediately Invoked Function Expressions (IIFE)"}),": An IIFE is an anonymous function that is executed immediately after its definition."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:'(function () {\n  console.log("IIFE Executed!");\n})();\n'})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"higher-order-functions",children:"Higher-Order Functions"}),"\n",(0,t.jsxs)(e.p,{children:["A ",(0,t.jsx)(e.strong,{children:"higher-order function"})," is a function that accepts other functions as arguments or returns a function. Many built-in array methods like ",(0,t.jsx)(e.code,{children:"map"}),", ",(0,t.jsx)(e.code,{children:"filter"}),", and ",(0,t.jsx)(e.code,{children:"reduce"})," are higher-order functions."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"const numbers = [1, 2, 3, 4];\n\nconst doubled = numbers.map((num) => num * 2);\nconsole.log(doubled); // Output: [2, 4, 6, 8]\n"})}),"\n",(0,t.jsx)(e.h2,{id:"closures",children:"Closures"}),"\n",(0,t.jsxs)(e.p,{children:["A ",(0,t.jsx)(e.strong,{children:"closure"})," is created when an inner function maintains access to variables from its outer function, even after the outer function has finished execution."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:'function outer() {\n  const message = "Hello, world!";\n\n  function inner() {\n    console.log(message);\n  }\n\n  return inner;\n}\n\nconst sayHello = outer();\nsayHello(); // Output: Hello, world!\n'})}),"\n",(0,t.jsx)(e.p,{children:"Closures are useful for encapsulating data and creating private variables."}),"\n",(0,t.jsxs)(e.h2,{id:"this-context",children:[(0,t.jsx)(e.code,{children:"this"})," Context"]}),"\n",(0,t.jsxs)(e.p,{children:["The ",(0,t.jsx)(e.code,{children:"this"})," keyword refers to the context in which a function is called. In traditional functions, ",(0,t.jsx)(e.code,{children:"this"})," refers to the object calling the function. In arrow functions, ",(0,t.jsx)(e.code,{children:"this"})," is lexically scoped, meaning it refers to the enclosing scope."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"const person = {\n  name: \"Alice\",\n  greet: function () {\n    console.log(`Hello, ${this.name}`);\n  },\n};\n\nperson.greet(); // Output: Hello, Alice\n\n// With arrow function (inherits 'this' from surrounding scope)\nconst person2 = {\n  name: \"Bob\",\n  greet: () => {\n    console.log(`Hello, ${this.name}`);\n  },\n};\n\nperson2.greet(); // Output: Hello, undefined (since 'this' refers to the global scope)\n"})}),"\n",(0,t.jsx)(e.h2,{id:"function-scope-and-hoisting",children:"Function Scope and Hoisting"}),"\n",(0,t.jsxs)(e.p,{children:["JavaScript functions are ",(0,t.jsx)(e.strong,{children:"function-scoped"})," (or ",(0,t.jsx)(e.strong,{children:"block-scoped"})," if using ",(0,t.jsx)(e.code,{children:"let"})," or ",(0,t.jsx)(e.code,{children:"const"})," within blocks). Function declarations are hoisted, meaning they can be called before their definition."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"console.log(add(2, 3)); // Output: 5\n\nfunction add(x, y) {\n  return x + y;\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"rest-parameters-and-spread-operator",children:"Rest Parameters and Spread Operator"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Rest Parameters"})," allow a function to accept an indefinite number of arguments as an array:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function sum(...numbers) {\n  return numbers.reduce((total, num) => total + num, 0);\n}\n\nconsole.log(sum(1, 2, 3, 4)); // Output: 10\n"})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Spread Operator"})," lets you spread an array into individual arguments:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"const nums = [1, 2, 3];\nconsole.log(Math.max(...nums)); // Output: 3\n"})}),"\n",(0,t.jsx)(e.h2,{id:"pure-vs-impure-functions",children:"Pure vs. Impure Functions"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Pure Functions"}),": A pure function always returns the same result for the same inputs and has no side effects."]}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"function add(a, b) {\n  return a + b;\n}\n"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Impure Functions"}),": Impure functions may have side effects, such as modifying global variables or changing input data."]}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"let count = 0;\nfunction increment() {\n  count++;\n}\n"})})]})}function d(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(u,{...n})}):u(n)}},28453:(n,e,s)=>{s.d(e,{R:()=>a,x:()=>o});var r=s(96540);const t={},i=r.createContext(t);function a(n){const e=r.useContext(i);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:a(n.components),r.createElement(i.Provider,{value:e},n.children)}}}]);