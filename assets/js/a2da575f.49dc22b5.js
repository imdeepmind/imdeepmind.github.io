"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[6602],{19905:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>l,default:()=>o,frontMatter:()=>t,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"data-structure-and-algorithms/algorithms/tree/tree-representation","title":"Tree Representation in Memory","description":"A tree can be stored in memory mainly in two ways:","source":"@site/docs/data-structure-and-algorithms/algorithms/tree/tree-representation.md","sourceDirName":"data-structure-and-algorithms/algorithms/tree","slug":"/data-structure-and-algorithms/algorithms/tree/tree-representation","permalink":"/docs/data-structure-and-algorithms/algorithms/tree/tree-representation","draft":false,"unlisted":false,"editUrl":"https://github.com/imdeepmind/imdeepmind.github.io/blob/main/docs/data-structure-and-algorithms/algorithms/tree/tree-representation.md","tags":[],"version":"current","lastUpdatedBy":"Abhishek Chatterjee","lastUpdatedAt":1755184658000,"sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"N-ary Tree","permalink":"/docs/data-structure-and-algorithms/algorithms/tree/n-ary-tree"},"next":{"title":"Full vs Complete Binary Tree","permalink":"/docs/data-structure-and-algorithms/algorithms/tree/full-vs-complete-binary-tree"}}');var r=n(74848),i=n(28453);const t={sidebar_position:5},l="Tree Representation in Memory",d={},c=[{value:"Array Representation of a Tree",id:"array-representation-of-a-tree",level:2},{value:"Concept",id:"concept",level:3},{value:"Example \u2013 Binary Tree in Array",id:"example--binary-tree-in-array",level:3},{value:"For N-ary Trees",id:"for-n-ary-trees",level:3},{value:"Advantages",id:"advantages",level:3},{value:"Disadvantages",id:"disadvantages",level:3},{value:"Linked Representation of a Tree",id:"linked-representation-of-a-tree",level:2},{value:"Concept",id:"concept-1",level:3},{value:"Binary Tree \u2013 Linked Representation",id:"binary-tree--linked-representation",level:3},{value:"N-ary Tree \u2013 Linked Representation",id:"n-ary-tree--linked-representation",level:3},{value:"Option 1: Fixed-size children array",id:"option-1-fixed-size-children-array",level:4},{value:"Option 2: Variable-size children list",id:"option-2-variable-size-children-list",level:4},{value:"Option 3: First Child / Next Sibling Representation",id:"option-3-first-child--next-sibling-representation",level:4},{value:"Advantages",id:"advantages-1",level:3},{value:"Disadvantages",id:"disadvantages-1",level:3},{value:"Comparison Table",id:"comparison-table",level:2},{value:"When to Use",id:"when-to-use",level:2}];function h(e){const s={annotation:"annotation",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",math:"math",mermaid:"mermaid",mi:"mi",mn:"mn",mo:"mo",mrow:"mrow",mtext:"mtext",ol:"ol",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"tree-representation-in-memory",children:"Tree Representation in Memory"})}),"\n",(0,r.jsx)(s.p,{children:"A tree can be stored in memory mainly in two ways:"}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.strong,{children:"Array Representation"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.strong,{children:"Linked Representation"})}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"array-representation-of-a-tree",children:"Array Representation of a Tree"}),"\n",(0,r.jsx)(s.h3,{id:"concept",children:"Concept"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Store tree nodes in a Python list."}),"\n",(0,r.jsx)(s.li,{children:"The index of the node determines its parent-child relationship."}),"\n",(0,r.jsx)(s.li,{children:"For binary trees:"}),"\n"]}),"\n",(0,r.jsx)(s.span,{className:"katex-display",children:(0,r.jsxs)(s.span,{className:"katex",children:[(0,r.jsx)(s.span,{className:"katex-mathml",children:(0,r.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block",children:(0,r.jsxs)(s.semantics,{children:[(0,r.jsxs)(s.mrow,{children:[(0,r.jsx)(s.mtext,{children:"Left\xa0Child\xa0Index"}),(0,r.jsx)(s.mo,{children:"="}),(0,r.jsx)(s.mn,{children:"2"}),(0,r.jsx)(s.mi,{children:"i"}),(0,r.jsx)(s.mo,{children:"+"}),(0,r.jsx)(s.mn,{children:"1"})]}),(0,r.jsx)(s.annotation,{encoding:"application/x-tex",children:"\\text{Left Child Index} = 2i + 1"})]})})}),(0,r.jsxs)(s.span,{className:"katex-html","aria-hidden":"true",children:[(0,r.jsxs)(s.span,{className:"base",children:[(0,r.jsx)(s.span,{className:"strut",style:{height:"0.6944em"}}),(0,r.jsx)(s.span,{className:"mord text",children:(0,r.jsx)(s.span,{className:"mord",children:"Left\xa0Child\xa0Index"})}),(0,r.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.jsx)(s.span,{className:"mrel",children:"="}),(0,r.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,r.jsxs)(s.span,{className:"base",children:[(0,r.jsx)(s.span,{className:"strut",style:{height:"0.7429em",verticalAlign:"-0.0833em"}}),(0,r.jsx)(s.span,{className:"mord",children:"2"}),(0,r.jsx)(s.span,{className:"mord mathnormal",children:"i"}),(0,r.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,r.jsx)(s.span,{className:"mbin",children:"+"}),(0,r.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,r.jsxs)(s.span,{className:"base",children:[(0,r.jsx)(s.span,{className:"strut",style:{height:"0.6444em"}}),(0,r.jsx)(s.span,{className:"mord",children:"1"})]})]})]})}),"\n",(0,r.jsx)(s.span,{className:"katex-display",children:(0,r.jsxs)(s.span,{className:"katex",children:[(0,r.jsx)(s.span,{className:"katex-mathml",children:(0,r.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block",children:(0,r.jsxs)(s.semantics,{children:[(0,r.jsxs)(s.mrow,{children:[(0,r.jsx)(s.mtext,{children:"Right\xa0Child\xa0Index"}),(0,r.jsx)(s.mo,{children:"="}),(0,r.jsx)(s.mn,{children:"2"}),(0,r.jsx)(s.mi,{children:"i"}),(0,r.jsx)(s.mo,{children:"+"}),(0,r.jsx)(s.mn,{children:"2"})]}),(0,r.jsx)(s.annotation,{encoding:"application/x-tex",children:"\\text{Right Child Index} = 2i + 2"})]})})}),(0,r.jsxs)(s.span,{className:"katex-html","aria-hidden":"true",children:[(0,r.jsxs)(s.span,{className:"base",children:[(0,r.jsx)(s.span,{className:"strut",style:{height:"0.8889em",verticalAlign:"-0.1944em"}}),(0,r.jsx)(s.span,{className:"mord text",children:(0,r.jsx)(s.span,{className:"mord",children:"Right\xa0Child\xa0Index"})}),(0,r.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.jsx)(s.span,{className:"mrel",children:"="}),(0,r.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,r.jsxs)(s.span,{className:"base",children:[(0,r.jsx)(s.span,{className:"strut",style:{height:"0.7429em",verticalAlign:"-0.0833em"}}),(0,r.jsx)(s.span,{className:"mord",children:"2"}),(0,r.jsx)(s.span,{className:"mord mathnormal",children:"i"}),(0,r.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,r.jsx)(s.span,{className:"mbin",children:"+"}),(0,r.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,r.jsxs)(s.span,{className:"base",children:[(0,r.jsx)(s.span,{className:"strut",style:{height:"0.6444em"}}),(0,r.jsx)(s.span,{className:"mord",children:"2"})]})]})]})}),"\n",(0,r.jsxs)(s.p,{children:["where ",(0,r.jsxs)(s.span,{className:"katex",children:[(0,r.jsx)(s.span,{className:"katex-mathml",children:(0,r.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(s.semantics,{children:[(0,r.jsx)(s.mrow,{children:(0,r.jsx)(s.mi,{children:"i"})}),(0,r.jsx)(s.annotation,{encoding:"application/x-tex",children:"i"})]})})}),(0,r.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,r.jsxs)(s.span,{className:"base",children:[(0,r.jsx)(s.span,{className:"strut",style:{height:"0.6595em"}}),(0,r.jsx)(s.span,{className:"mord mathnormal",children:"i"})]})})]})," is the parent index."]}),"\n",(0,r.jsx)(s.h3,{id:"example--binary-tree-in-array",children:"Example \u2013 Binary Tree in Array"}),"\n",(0,r.jsx)("div",{style:{textAlign:"center"},children:(0,r.jsx)(s.mermaid,{value:"graph TD\n    A((10)) --\x3e B((20))\n    A --\x3e C((30))\n    B --\x3e D((40))\n    B --\x3e E((50))\n    C --\x3e F((60))"})}),"\n",(0,r.jsx)(s.p,{children:"Python representation:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'# Array representation of a binary tree\ntree = [10, 20, 30, 40, 50, 60]\n\n# Accessing children\nparent_index = 1  # Node 20\nleft_child = tree[2 * parent_index + 1]  # 40\nright_child = tree[2 * parent_index + 2]  # 50\n\nprint(f"Left Child of 20: {left_child}")\nprint(f"Right Child of 20: {right_child}")\n'})}),"\n",(0,r.jsx)(s.h3,{id:"for-n-ary-trees",children:"For N-ary Trees"}),"\n",(0,r.jsx)(s.p,{children:"For an n-ary tree, one common way is:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Store children contiguously and maintain a dictionary mapping each node index to a list of child indices."}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:["Example for ",(0,r.jsxs)(s.span,{className:"katex",children:[(0,r.jsx)(s.span,{className:"katex-mathml",children:(0,r.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(s.semantics,{children:[(0,r.jsxs)(s.mrow,{children:[(0,r.jsx)(s.mi,{children:"n"}),(0,r.jsx)(s.mo,{children:"="}),(0,r.jsx)(s.mn,{children:"3"})]}),(0,r.jsx)(s.annotation,{encoding:"application/x-tex",children:"n = 3"})]})})}),(0,r.jsxs)(s.span,{className:"katex-html","aria-hidden":"true",children:[(0,r.jsxs)(s.span,{className:"base",children:[(0,r.jsx)(s.span,{className:"strut",style:{height:"0.4306em"}}),(0,r.jsx)(s.span,{className:"mord mathnormal",children:"n"}),(0,r.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.jsx)(s.span,{className:"mrel",children:"="}),(0,r.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,r.jsxs)(s.span,{className:"base",children:[(0,r.jsx)(s.span,{className:"strut",style:{height:"0.6444em"}}),(0,r.jsx)(s.span,{className:"mord",children:"3"})]})]})]}),":"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'# N-ary tree stored in arrays\nvalues = ["A", "B", "C", "D", "E", "F", "G"]\nchildren = {\n    0: [1, 2, 3],   # A -> B, C, D\n    1: [4, 5],      # B -> E, F\n    2: [6],         # C -> G\n    3: [],          # D\n    4: [],          # E\n    5: [],          # F\n    6: []           # G\n}\n'})}),"\n",(0,r.jsx)(s.h3,{id:"advantages",children:"Advantages"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Fast access (",(0,r.jsxs)(s.span,{className:"katex",children:[(0,r.jsx)(s.span,{className:"katex-mathml",children:(0,r.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(s.semantics,{children:[(0,r.jsxs)(s.mrow,{children:[(0,r.jsx)(s.mi,{children:"O"}),(0,r.jsx)(s.mo,{stretchy:"false",children:"("}),(0,r.jsx)(s.mn,{children:"1"}),(0,r.jsx)(s.mo,{stretchy:"false",children:")"})]}),(0,r.jsx)(s.annotation,{encoding:"application/x-tex",children:"O(1)"})]})})}),(0,r.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,r.jsxs)(s.span,{className:"base",children:[(0,r.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,r.jsx)(s.span,{className:"mopen",children:"("}),(0,r.jsx)(s.span,{className:"mord",children:"1"}),(0,r.jsx)(s.span,{className:"mclose",children:")"})]})})]}),") for parent/children if tree is complete."]}),"\n",(0,r.jsx)(s.li,{children:"Cache-friendly."}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"disadvantages",children:"Disadvantages"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Wasted space if tree is sparse."}),"\n",(0,r.jsx)(s.li,{children:"Difficult to grow dynamically."}),"\n",(0,r.jsx)(s.li,{children:"Not ideal for non-complete trees."}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"linked-representation-of-a-tree",children:"Linked Representation of a Tree"}),"\n",(0,r.jsx)(s.h3,{id:"concept-1",children:"Concept"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Each node is an object storing:","\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"data"}),"\n",(0,r.jsx)(s.li,{children:"links to children (and optionally parent)."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"binary-tree--linked-representation",children:"Binary Tree \u2013 Linked Representation"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"class BinaryTreeNode:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\n# Example tree\nroot = BinaryTreeNode(10)\nroot.left = BinaryTreeNode(20)\nroot.right = BinaryTreeNode(30)\nroot.left.left = BinaryTreeNode(40)\nroot.left.right = BinaryTreeNode(50)\nroot.right.left = BinaryTreeNode(60)\n"})}),"\n",(0,r.jsx)(s.h3,{id:"n-ary-tree--linked-representation",children:"N-ary Tree \u2013 Linked Representation"}),"\n",(0,r.jsx)(s.h4,{id:"option-1-fixed-size-children-array",children:"Option 1: Fixed-size children array"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'class NAryTreeNode:\n    def __init__(self, data, n):\n        self.data = data\n        self.children = [None] * n  # fixed number of children\n\n# Example for n = 3\nroot = NAryTreeNode("A", 3)\nroot.children[0] = NAryTreeNode("B", 3)\nroot.children[1] = NAryTreeNode("C", 3)\nroot.children[2] = NAryTreeNode("D", 3)\n'})}),"\n",(0,r.jsx)(s.h4,{id:"option-2-variable-size-children-list",children:"Option 2: Variable-size children list"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'class NAryTreeNode:\n    def __init__(self, data):\n        self.data = data\n        self.children = []  # dynamic list of children\n\n# Example\nroot = NAryTreeNode("A")\nroot.children.append(NAryTreeNode("B"))\nroot.children.append(NAryTreeNode("C"))\nroot.children.append(NAryTreeNode("D"))\n'})}),"\n",(0,r.jsx)(s.h4,{id:"option-3-first-child--next-sibling-representation",children:"Option 3: First Child / Next Sibling Representation"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'class FCNSNode:\n    def __init__(self, data):\n        self.data = data\n        self.first_child = None\n        self.next_sibling = None\n\n# Example\nroot = FCNSNode("A")\nroot.first_child = FCNSNode("B")\nroot.first_child.next_sibling = FCNSNode("C")\nroot.first_child.first_child = FCNSNode("D")\n'})}),"\n",(0,r.jsx)(s.h3,{id:"advantages-1",children:"Advantages"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Flexible: works for any shape tree."}),"\n",(0,r.jsx)(s.li,{children:"No wasted space for missing children."}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"disadvantages-1",children:"Disadvantages"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Pointer overhead."}),"\n",(0,r.jsx)(s.li,{children:"Slower child access (must follow references)."}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"comparison-table",children:"Comparison Table"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Feature"}),(0,r.jsx)(s.th,{children:"Array Representation"}),(0,r.jsx)(s.th,{children:"Linked Representation"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Memory usage"}),(0,r.jsx)(s.td,{children:"Wastes space in sparse trees"}),(0,r.jsx)(s.td,{children:"Uses extra space for pointers"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Access time"}),(0,r.jsxs)(s.td,{children:[(0,r.jsxs)(s.span,{className:"katex",children:[(0,r.jsx)(s.span,{className:"katex-mathml",children:(0,r.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(s.semantics,{children:[(0,r.jsxs)(s.mrow,{children:[(0,r.jsx)(s.mi,{children:"O"}),(0,r.jsx)(s.mo,{stretchy:"false",children:"("}),(0,r.jsx)(s.mn,{children:"1"}),(0,r.jsx)(s.mo,{stretchy:"false",children:")"})]}),(0,r.jsx)(s.annotation,{encoding:"application/x-tex",children:"O(1)"})]})})}),(0,r.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,r.jsxs)(s.span,{className:"base",children:[(0,r.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,r.jsx)(s.span,{className:"mopen",children:"("}),(0,r.jsx)(s.span,{className:"mord",children:"1"}),(0,r.jsx)(s.span,{className:"mclose",children:")"})]})})]})," for complete trees"]}),(0,r.jsxs)(s.td,{children:[(0,r.jsxs)(s.span,{className:"katex",children:[(0,r.jsx)(s.span,{className:"katex-mathml",children:(0,r.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(s.semantics,{children:[(0,r.jsxs)(s.mrow,{children:[(0,r.jsx)(s.mi,{children:"O"}),(0,r.jsx)(s.mo,{stretchy:"false",children:"("}),(0,r.jsx)(s.mi,{children:"k"}),(0,r.jsx)(s.mo,{stretchy:"false",children:")"})]}),(0,r.jsx)(s.annotation,{encoding:"application/x-tex",children:"O(k)"})]})})}),(0,r.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,r.jsxs)(s.span,{className:"base",children:[(0,r.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.02778em"},children:"O"}),(0,r.jsx)(s.span,{className:"mopen",children:"("}),(0,r.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.03148em"},children:"k"}),(0,r.jsx)(s.span,{className:"mclose",children:")"})]})})]})," for k-th child"]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Insert/Delete"}),(0,r.jsx)(s.td,{children:"Expensive (shift elements)"}),(0,r.jsx)(s.td,{children:"Easy (update pointers)"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Works for"}),(0,r.jsx)(s.td,{children:"Complete trees"}),(0,r.jsx)(s.td,{children:"Any tree shape"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Cache performance"}),(0,r.jsx)(s.td,{children:"High"}),(0,r.jsx)(s.td,{children:"Lower"})]})]})]}),"\n",(0,r.jsx)(s.h2,{id:"when-to-use",children:"When to Use"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Array Representation"}),": For complete trees (e.g., heaps, segment trees)."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Linked Representation"}),": For sparse, dynamic, or n-ary trees."]}),"\n"]})]})}function o(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>t,x:()=>l});var a=n(96540);const r={},i=a.createContext(r);function t(e){const s=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),a.createElement(i.Provider,{value:s},e.children)}}}]);