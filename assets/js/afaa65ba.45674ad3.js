"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[7872],{20496:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>t,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"frameworks-libraries/frontend/react/jsx","title":"JSX","description":"What is JSX?","source":"@site/docs/frameworks-libraries/frontend/react/jsx.md","sourceDirName":"frameworks-libraries/frontend/react","slug":"/frameworks-libraries/frontend/react/jsx","permalink":"/docs/frameworks-libraries/frontend/react/jsx","draft":false,"unlisted":false,"editUrl":"https://github.com/imdeepmind/imdeepmind.github.io/blob/main/docs/frameworks-libraries/frontend/react/jsx.md","tags":[],"version":"current","lastUpdatedBy":"Abhishek Chatterjee","lastUpdatedAt":1749212834000,"sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Introduction","permalink":"/docs/frameworks-libraries/frontend/react/introduction"},"next":{"title":"Props","permalink":"/docs/frameworks-libraries/frontend/react/props"}}');var l=s(74848),r=s(28453);const t={sidebar_position:2},c="JSX",d={},a=[{value:"What is JSX?",id:"what-is-jsx",level:2},{value:"Features of JSX",id:"features-of-jsx",level:2},{value:"How JSX is Transformed",id:"how-jsx-is-transformed",level:2},{value:"Advantages of JSX",id:"advantages-of-jsx",level:2},{value:"Common JSX Rules and Best Practices",id:"common-jsx-rules-and-best-practices",level:2},{value:"Limitations of JSX",id:"limitations-of-jsx",level:2},{value:"JSX vs Traditional JavaScript",id:"jsx-vs-traditional-javascript",level:2}];function o(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"jsx",children:"JSX"})}),"\n",(0,l.jsx)(n.h2,{id:"what-is-jsx",children:"What is JSX?"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"JSX (JavaScript XML)"})," is a syntax extension for JavaScript used in React. It allows developers to write HTML-like code directly in JavaScript, making it easier to define the structure of the UI and improving the readability of React components."]}),"\n",(0,l.jsxs)(n.li,{children:["JSX is not valid JavaScript; it is a syntactic sugar that is compiled into JavaScript using tools like Babel. Under the hood, JSX transforms into calls to React's ",(0,l.jsx)(n.code,{children:"React.createElement()"})," method."]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"features-of-jsx",children:"Features of JSX"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"HTML-Like Syntax"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["JSX looks like HTML but can embed JavaScript expressions inside ",(0,l.jsx)(n.code,{children:"{}"}),"."]}),"\n",(0,l.jsxs)(n.li,{children:["Example:","\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:"const element = <h1>Hello, {user.name}!</h1>;\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"JavaScript Integration"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"JSX supports embedding JavaScript expressions, loops, conditionals, and functions."}),"\n",(0,l.jsxs)(n.li,{children:["Example:","\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:"const numbers = [1, 2, 3, 4];\nconst listItems = numbers.map((number) => <li key={number}>{number}</li>);\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Component Rendering"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"JSX is used to render React components, allowing developers to nest components inside one another."}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Example:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:'function Welcome(props) {\n  return <h1>Hello, {props.name}</h1>;\n}\n\nconst element = <Welcome name="Abhishek" />;\n'})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Attribute Handling"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Attributes in JSX resemble HTML but are camelCased for consistency with JavaScript conventions. For example, ",(0,l.jsx)(n.code,{children:"class"})," in HTML becomes ",(0,l.jsx)(n.code,{children:"className"})," in JSX, and ",(0,l.jsx)(n.code,{children:"onclick"})," becomes ",(0,l.jsx)(n.code,{children:"onClick"}),"."]}),"\n",(0,l.jsxs)(n.li,{children:["Example:","\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:'const button = (\n  <button className="btn-primary" onClick={handleClick}>\n    Click Me\n  </button>\n);\n'})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"JavaScript Functions and Expressions"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["You can pass JavaScript functions, objects, and variables into JSX using ",(0,l.jsx)(n.code,{children:"{}"}),"."]}),"\n",(0,l.jsxs)(n.li,{children:["Example:","\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:'const style = { color: "blue", fontSize: 20 };\nconst text = <p style={style}>This is styled text</p>;\n'})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"how-jsx-is-transformed",children:"How JSX is Transformed"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["JSX code is transformed into JavaScript using a transpiler like ",(0,l.jsx)(n.strong,{children:"Babel"}),". For instance:","\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:"const element = <h1>Hello, World!</h1>;\n"})}),"\n","gets converted to:","\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:'const element = React.createElement("h1", null, "Hello, World!");\n'})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"React.createElement"})," creates a virtual DOM representation of the element."]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"advantages-of-jsx",children:"Advantages of JSX"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Improved Readability"}),":","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"JSX allows developers to write UI code that is visually similar to HTML, making it more intuitive and easier to understand."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Powerful JavaScript Integration"}),":","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"You can use JavaScript's full power (e.g., functions, loops, conditionals) directly within JSX, providing flexibility in building dynamic UIs."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Component Nesting"}),":","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"JSX makes it easy to nest and compose components, promoting reusable and modular code."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Static Analysis"}),":","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"JSX allows tools like ESLint to statically analyze the code for syntax and accessibility issues."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"common-jsx-rules-and-best-practices",children:"Common JSX Rules and Best Practices"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Wrapping Elements"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["JSX expressions must have a single root element. If you need to return multiple elements, wrap them in a parent element (e.g., ",(0,l.jsx)(n.code,{children:"<div>"}),") or use React fragments (",(0,l.jsx)(n.code,{children:"<>...</>"}),")."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:"// Invalid JSX\nreturn (\n  <h1>Title</h1>\n  <p>Description</p>\n);\n\n// Valid JSX\nreturn (\n  <>\n    <h1>Title</h1>\n    <p>Description</p>\n  </>\n);\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"JSX Expressions Must Be Closed"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["All tags must be properly closed, including self-closing tags like ",(0,l.jsx)(n.code,{children:"<img />"}),", ",(0,l.jsx)(n.code,{children:"<br />"}),", or ",(0,l.jsx)(n.code,{children:"<input />"}),"."]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsxs)(n.strong,{children:["JavaScript Expressions in ",(0,l.jsx)(n.code,{children:"{}"})]}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Use ",(0,l.jsx)(n.code,{children:"{}"})," to embed JavaScript expressions inside JSX.","\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:'const name = "Abhishek";\nconst element = <h1>Hello, {name}</h1>;\n'})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Class vs className"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Always use ",(0,l.jsx)(n.code,{children:"className"})," instead of ",(0,l.jsx)(n.code,{children:"class"})," for setting CSS classes in JSX.","\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:'const button = <button className="btn-primary">Click Me</button>;\n'})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Inline Styles"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Inline styles in JSX are specified as objects with camelCased property names.","\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:'const style = { color: "red", backgroundColor: "yellow" };\nconst element = <p style={style}>Styled Text</p>;\n'})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Avoid Using String Literals for Props"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["Pass strings inside quotes but avoid unnecessary wrapping of JavaScript expressions in ",(0,l.jsx)(n.code,{children:"{}"})," when not needed."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:'// Good\nconst element = <input type="text" value="Hello" />;\n\n// Avoid\nconst element = <input type="text" value={"Hello"} />;\n'})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Key Attribute for Lists"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Always provide a ",(0,l.jsx)(n.code,{children:"key"})," attribute when rendering lists to help React efficiently update the UI.","\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:'const items = ["A", "B", "C"];\nconst list = items.map((item, index) => <li key={index}>{item}</li>);\n'})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"limitations-of-jsx",children:"Limitations of JSX"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Learning Curve"}),":","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"JSX introduces a new syntax that might be unfamiliar to developers who are new to React or JavaScript."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Tooling Dependency"}),":","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"JSX requires transpilation, adding an extra step in the development process."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Complexity in Large Components"}),":","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Large components with deeply nested JSX can become difficult to read and maintain. Breaking components into smaller pieces helps mitigate this."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"jsx-vs-traditional-javascript",children:"JSX vs Traditional JavaScript"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{children:(0,l.jsx)(n.strong,{children:"Feature"})}),(0,l.jsx)(n.th,{children:(0,l.jsx)(n.strong,{children:"JSX"})}),(0,l.jsx)(n.th,{children:(0,l.jsx)(n.strong,{children:"Traditional JavaScript"})})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Syntax"}),(0,l.jsx)(n.td,{children:"HTML-like with JavaScript"}),(0,l.jsx)(n.td,{children:"Only JavaScript syntax"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Readability"}),(0,l.jsx)(n.td,{children:"More intuitive and declarative"}),(0,l.jsx)(n.td,{children:"Verbose for UI creation"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Transformation"}),(0,l.jsxs)(n.td,{children:["Compiled to ",(0,l.jsx)(n.code,{children:"React.createElement"})]}),(0,l.jsx)(n.td,{children:"No transformation required"})]})]})]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(o,{...e})}):o(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>c});var i=s(96540);const l={},r=i.createContext(l);function t(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);