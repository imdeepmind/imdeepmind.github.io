"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[6012],{28706:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>t,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"programming/programming-languages/go/variable","title":"Variables and Scope","description":"Variables","source":"@site/docs/programming/programming-languages/go/variable.md","sourceDirName":"programming/programming-languages/go","slug":"/programming/programming-languages/go/variable","permalink":"/docs/programming/programming-languages/go/variable","draft":false,"unlisted":false,"editUrl":"https://github.com/imdeepmind/imdeepmind.github.io/blob/main/docs/programming/programming-languages/go/variable.md","tags":[],"version":"current","lastUpdatedBy":"Abhishek Chatterjee","lastUpdatedAt":1753899147000,"sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Packages and Modules","permalink":"/docs/programming/programming-languages/go/packages-modules"},"next":{"title":"Mutation","permalink":"/docs/programming/programming-languages/go/mutation"}}');var a=s(74848),l=s(28453);const r={sidebar_position:3},c="Variables and Scope",t={},o=[{value:"Variables",id:"variables",level:2},{value:"Variable Declaration",id:"variable-declaration",level:3},{value:"Multiple Variable Declarations",id:"multiple-variable-declarations",level:3},{value:"Default Values",id:"default-values",level:3},{value:"Constants in Go",id:"constants-in-go",level:3},{value:"Declaring Constants",id:"declaring-constants",level:4},{value:"Advantages of Constants",id:"advantages-of-constants",level:4},{value:"Example of Constants in Go",id:"example-of-constants-in-go",level:4},{value:"Constant Expressions",id:"constant-expressions",level:4},{value:"Data Types",id:"data-types",level:2},{value:"Basic Data Types",id:"basic-data-types",level:3},{value:"Composite Data Types",id:"composite-data-types",level:3},{value:"Special Types",id:"special-types",level:3},{value:"Type Casting",id:"type-casting",level:2},{value:"Syntax",id:"syntax",level:3},{value:"Common Conversions",id:"common-conversions",level:3},{value:"Type Assertion (for interfaces)",id:"type-assertion-for-interfaces",level:3},{value:"Variable Scope",id:"variable-scope",level:2},{value:"Local Scope",id:"local-scope",level:3},{value:"Package Scope",id:"package-scope",level:3},{value:"Exported Scope (Cross-Package Access)",id:"exported-scope-cross-package-access",level:3},{value:"Shadowing",id:"shadowing",level:3},{value:"Example Code",id:"example-code",level:2}];function d(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"variables-and-scope",children:"Variables and Scope"})}),"\n",(0,a.jsx)(e.h2,{id:"variables",children:"Variables"}),"\n",(0,a.jsxs)(e.p,{children:["A variable in Go is a storage location with a name, associated with a type, that holds a value. Variables can be declared using the ",(0,a.jsx)(e.code,{children:"var"})," keyword or short declaration syntax."]}),"\n",(0,a.jsx)(e.h3,{id:"variable-declaration",children:"Variable Declaration"}),"\n",(0,a.jsx)(e.p,{children:"Go supports three ways to declare variables:"}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:(0,a.jsxs)(e.strong,{children:["Using ",(0,a.jsx)(e.code,{children:"var"})," keyword (explicit type):"]})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-go",children:'var name string\nname = "John"\n'})}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:(0,a.jsxs)(e.strong,{children:["Using ",(0,a.jsx)(e.code,{children:"var"})," keyword (implicit type inference):"]})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-go",children:"var age = 30\n"})}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Short variable declaration (only inside functions):"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-go",children:'name := "Alice"\n'})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(e.h3,{id:"multiple-variable-declarations",children:"Multiple Variable Declarations"}),"\n",(0,a.jsx)(e.p,{children:"You can declare and initialize multiple variables at once:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-go",children:'var x, y int = 10, 20\na, b := 3.14, "Hello"\n'})}),"\n",(0,a.jsx)(e.h3,{id:"default-values",children:"Default Values"}),"\n",(0,a.jsx)(e.p,{children:"If a variable is declared but not initialized, it gets a default value based on its type:"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:["Numeric types: ",(0,a.jsx)(e.code,{children:"0"})]}),"\n",(0,a.jsxs)(e.li,{children:["Strings: ",(0,a.jsx)(e.code,{children:'""'})]}),"\n",(0,a.jsxs)(e.li,{children:["Booleans: ",(0,a.jsx)(e.code,{children:"false"})]}),"\n",(0,a.jsxs)(e.li,{children:["Pointers, slices, maps, channels, interfaces: ",(0,a.jsx)(e.code,{children:"nil"})]}),"\n"]}),"\n",(0,a.jsx)(e.h3,{id:"constants-in-go",children:"Constants in Go"}),"\n",(0,a.jsxs)(e.p,{children:["In addition to variables, Go also supports ",(0,a.jsx)(e.strong,{children:"constants"}),", which are similar to variables but, once assigned, cannot be changed. Constants can be typed or untyped."]}),"\n",(0,a.jsx)(e.h4,{id:"declaring-constants",children:"Declaring Constants"}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:(0,a.jsxs)(e.strong,{children:["Using ",(0,a.jsx)(e.code,{children:"const"})," keyword:"]})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-go",children:"const pi = 3.14      // Untyped constant\nconst radius = 10    // Untyped constant\nconst isActive = true // Untyped constant\n"})}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Typed Constants:"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-go",children:"const daysInWeek int = 7\n"})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(e.h4,{id:"advantages-of-constants",children:"Advantages of Constants"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Immutability"})," \u2013 constants cannot be changed"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Performance"})," \u2013 evaluated at compile-time"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Expressiveness"})," \u2013 improves code readability"]}),"\n"]}),"\n",(0,a.jsx)(e.h4,{id:"example-of-constants-in-go",children:"Example of Constants in Go"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-go",children:'package main\n\nimport "fmt"\n\nconst Pi = 3.14159\nconst Greeting = "Hello, Go!"\n\nfunc main() {\n    fmt.Println("Pi:", Pi)\n    fmt.Println(Greeting)\n}\n'})}),"\n",(0,a.jsx)(e.h4,{id:"constant-expressions",children:"Constant Expressions"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-go",children:"const (\n    x = 5\n    y = 10\n    sum = x + y // evaluated at compile time\n)\n"})}),"\n",(0,a.jsx)(e.h2,{id:"data-types",children:"Data Types"}),"\n",(0,a.jsx)(e.p,{children:"Go is a statically typed language, meaning the type of a variable is known and checked at compile time."}),"\n",(0,a.jsx)(e.h3,{id:"basic-data-types",children:"Basic Data Types"}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Numeric Types"})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:["Integer: ",(0,a.jsx)(e.code,{children:"int"}),", ",(0,a.jsx)(e.code,{children:"int8"}),", ",(0,a.jsx)(e.code,{children:"int16"}),", ",(0,a.jsx)(e.code,{children:"int32"}),", ",(0,a.jsx)(e.code,{children:"int64"})]}),"\n",(0,a.jsxs)(e.li,{children:["Unsigned: ",(0,a.jsx)(e.code,{children:"uint"}),", ",(0,a.jsx)(e.code,{children:"uint8"}),", ",(0,a.jsx)(e.code,{children:"uint16"}),", ",(0,a.jsx)(e.code,{children:"uint32"}),", ",(0,a.jsx)(e.code,{children:"uint64"})]}),"\n",(0,a.jsxs)(e.li,{children:["Floating-point: ",(0,a.jsx)(e.code,{children:"float32"}),", ",(0,a.jsx)(e.code,{children:"float64"})]}),"\n",(0,a.jsxs)(e.li,{children:["Complex: ",(0,a.jsx)(e.code,{children:"complex64"}),", ",(0,a.jsx)(e.code,{children:"complex128"})]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Boolean"})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"true"})," or ",(0,a.jsx)(e.code,{children:"false"})]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"String"})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Immutable UTF-8 character sequence"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(e.h3,{id:"composite-data-types",children:"Composite Data Types"}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Array"})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Fixed size and homogeneous"}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-go",children:"var arr [3]int = [3]int{1, 2, 3}\n"})}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Slice"})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Dynamically sized"}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-go",children:"nums := []int{1, 2, 3}\n"})}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Map"})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Key-value pairs"}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-go",children:'m := map[string]int{"A": 1}\n'})}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Struct"})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Custom type grouping multiple fields"}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-go",children:"type Person struct {\n    Name string\n    Age  int\n}\n"})}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Pointer"})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Stores memory address of a value"}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-go",children:"var ptr *int\n"})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(e.h3,{id:"special-types",children:"Special Types"}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Interface"})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Defines a set of method signatures"}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-go",children:"type Shape interface {\n    Area() float64\n}\n"})}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Function Types"})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Functions can be assigned to variables"}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-go",children:"var f func(int, int) int\n"})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"type-casting",children:"Type Casting"}),"\n",(0,a.jsx)(e.p,{children:"Go is strongly typed and does not support implicit type conversions. Type casting must be done explicitly."}),"\n",(0,a.jsx)(e.h3,{id:"syntax",children:"Syntax"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-go",children:"var a int = 42\nvar b float64 = float64(a)\n"})}),"\n",(0,a.jsx)(e.h3,{id:"common-conversions",children:"Common Conversions"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Integer to Float"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-go",children:"var i int = 10\nvar f float64 = float64(i)\n"})}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.strong,{children:"Float to Integer"})," (truncates decimal part)"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-go",children:"var f float64 = 3.14\nvar i int = int(f) // i = 3\n"})}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Integer to String"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-go",children:'import "strconv"\ns := strconv.Itoa(42) // "42"\n'})}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"String to Integer"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-go",children:'import "strconv"\ni, err := strconv.Atoi("42")\n'})}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Rune to String"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-go",children:"var r rune = 'A'\nvar s string = string(r) // \"A\"\n"})}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Byte to String"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-go",children:'var b byte = 65\ns := string(b) // "A"\n'})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(e.h3,{id:"type-assertion-for-interfaces",children:"Type Assertion (for interfaces)"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-go",children:'var i interface{} = "hello"\ns := i.(string) // type assertion\n'})}),"\n",(0,a.jsx)(e.p,{children:"Use the comma-ok idiom to avoid panic:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-go",children:'s, ok := i.(string)\nif ok {\n    fmt.Println("Conversion successful:", s)\n}\n'})}),"\n",(0,a.jsx)(e.h2,{id:"variable-scope",children:"Variable Scope"}),"\n",(0,a.jsx)(e.p,{children:"The scope of a variable defines where it can be accessed in a program."}),"\n",(0,a.jsx)(e.h3,{id:"local-scope",children:"Local Scope"}),"\n",(0,a.jsx)(e.p,{children:"Variables declared inside a function or block are accessible only within that block."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-go",children:"func main() {\n    x := 10\n    fmt.Println(x)\n}\n"})}),"\n",(0,a.jsx)(e.h3,{id:"package-scope",children:"Package Scope"}),"\n",(0,a.jsx)(e.p,{children:"Variables declared outside any function are accessible to all functions in the same package."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-go",children:"var count int // package-scoped\n"})}),"\n",(0,a.jsx)(e.h3,{id:"exported-scope-cross-package-access",children:"Exported Scope (Cross-Package Access)"}),"\n",(0,a.jsxs)(e.p,{children:["A variable is ",(0,a.jsx)(e.strong,{children:"exported"})," (accessible from other packages) if it starts with an uppercase letter."]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-go",children:'var PublicVar = "Visible to other packages"\n'})}),"\n",(0,a.jsx)(e.h3,{id:"shadowing",children:"Shadowing"}),"\n",(0,a.jsxs)(e.p,{children:["A local variable can ",(0,a.jsx)(e.strong,{children:"shadow"})," a package-level variable with the same name."]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-go",children:"var x = 5\n\nfunc main() {\n    x := 10\n    fmt.Println(x) // prints 10, not 5\n}\n"})}),"\n",(0,a.jsx)(e.h2,{id:"example-code",children:"Example Code"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-go",children:'package main\n\nimport "fmt"\n\nvar packageVar = "I\'m accessible within this package!"\nconst pi = 3.14159\n\nfunc main() {\n    var localVar int = 42\n    shortVar := "I was declared using short syntax!"\n\n    fmt.Println(packageVar)\n    fmt.Println(localVar)\n    fmt.Println(shortVar)\n    fmt.Println("Pi constant:", pi)\n\n    demonstrateScope()\n    demonstrateCasting()\n}\n\nfunc demonstrateScope() {\n    fmt.Println(packageVar)\n}\n\nfunc demonstrateCasting() {\n    var i int = 42\n    var f float64 = float64(i)\n    fmt.Println("Int to Float:", f)\n\n    s := fmt.Sprintf("%d", i)\n    fmt.Println("Int to String:", s)\n}\n'})})]})}function h(n={}){const{wrapper:e}={...(0,l.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(d,{...n})}):d(n)}},28453:(n,e,s)=>{s.d(e,{R:()=>r,x:()=>c});var i=s(96540);const a={},l=i.createContext(a);function r(n){const e=i.useContext(l);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:r(n.components),i.createElement(l.Provider,{value:e},n.children)}}}]);