"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[7563],{81389:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"data-structure-and-algorithms/algorithms/tree/introduction","title":"Introduction","description":"A tree is a widely used abstract data structure that simulates a hierarchical tree structure, with a root value and subtrees of children, represented as a set of linked nodes. Trees are fundamental in computer science and are used in various applications such as databases, file systems, compilers, and more.","source":"@site/docs/data-structure-and-algorithms/algorithms/tree/introduction.md","sourceDirName":"data-structure-and-algorithms/algorithms/tree","slug":"/data-structure-and-algorithms/algorithms/tree/introduction","permalink":"/docs/data-structure-and-algorithms/algorithms/tree/introduction","draft":false,"unlisted":false,"editUrl":"https://github.com/imdeepmind/imdeepmind.github.io/blob/main/docs/data-structure-and-algorithms/algorithms/tree/introduction.md","tags":[],"version":"current","lastUpdatedBy":"Abhishek Chatterjee","lastUpdatedAt":1754751812000,"sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Queue","permalink":"/docs/data-structure-and-algorithms/algorithms/queue"},"next":{"title":"Binary Tree","permalink":"/docs/data-structure-and-algorithms/algorithms/tree/binary-tree"}}');var s=t(74848),i=t(28453);const o={sidebar_position:1},a="Introduction",d={},l=[{value:"Tree Terminology",id:"tree-terminology",level:2}];function h(e){const n={h1:"h1",h2:"h2",header:"header",li:"li",mermaid:"mermaid",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"introduction",children:"Introduction"})}),"\n",(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.strong,{children:"tree"})," is a widely used abstract data structure that simulates a hierarchical tree structure, with a root value and subtrees of children, represented as a set of linked nodes. Trees are fundamental in computer science and are used in various applications such as databases, file systems, compilers, and more."]}),"\n",(0,s.jsx)(n.h2,{id:"tree-terminology",children:"Tree Terminology"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Node"}),": The basic unit of a tree, containing data and links to child nodes."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Root"}),": The topmost node in a tree, with no parent."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Parent"}),": A node that has one or more child nodes."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Child"}),": A node that descends from another node (its parent)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Leaf"}),": A node with no children."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Sibling"}),": Nodes that share the same parent."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Edge"}),": The connection between two nodes (parent to child)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Subtree"}),": A tree formed by a node and its descendants."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Level"}),": The distance from the root node (root is level 0)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Height"}),": The length of the longest path from the root to a leaf."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Depth"}),": The length of the path from the root to a given node."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Degree"}),": The number of children a node has."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Ancestor"}),": Any node on the path from a node to the root."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Descendant"}),": Any node on the path from a node to a leaf."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Path"}),": A sequence of nodes and edges connecting a node with a descendant."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Below is a binary tree diagram with levels and height highlighted using Mermaid:"}),"\n",(0,s.jsx)("div",{style:{textAlign:"center"},children:(0,s.jsx)(n.mermaid,{value:'graph TD;\n    A["Root (Level 0)"]\n    B["Left Child (Level 1)"]\n    C["Right Child (Level 1)"]\n    D["Left Leaf (Level 2)"]\n    E["Right Leaf (Level 2)"]\n    F["Right Leaf (Level 2)"]\n    A --\x3e B\n    A --\x3e C\n    B --\x3e D\n    B --\x3e E\n    C --\x3e F\n    %% Highlight levels\n    subgraph "Level 0"\n        A\n    end\n    subgraph "Level 1"\n        B\n        C\n    end\n    subgraph "Level 2"\n        D\n        E\n        F\n    end\n    %% Height annotation\n    H["Tree Height = 2"]\n    H --- A'})}),"\n",(0,s.jsx)(n.p,{children:"In this diagram:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"A"})," is the root node at Level 0."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"B"})," and ",(0,s.jsx)(n.strong,{children:"C"})," are at Level 1."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"D"}),", ",(0,s.jsx)(n.strong,{children:"E"}),", and ",(0,s.jsx)(n.strong,{children:"F"})," are leaf nodes at Level 2."]}),"\n",(0,s.jsx)(n.li,{children:"The tree height is 2 (longest path from root to leaf)."}),"\n",(0,s.jsx)(n.li,{children:"Subgraphs visually group nodes by their level."}),"\n"]})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var r=t(96540);const s={},i=r.createContext(s);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);