"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[2728],{22798:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"system-design/containers/internals","title":"Docker Internals","description":"Docker is a tool designed to make it easier to create, deploy, and run applications using containers. The internal working of Docker involves several components, each playing a specific role in the containerization process. Below, I will explain the key components and how they interact within Docker using diagrams in Mermaid.","source":"@site/docs/system-design/containers/internals.md","sourceDirName":"system-design/containers","slug":"/system-design/containers/internals","permalink":"/docs/system-design/containers/internals","draft":false,"unlisted":false,"editUrl":"https://github.com/imdeepmind/imdeepmind.github.io/blob/main/docs/system-design/containers/internals.md","tags":[],"version":"current","lastUpdatedBy":"Abhishek Chatterjee","lastUpdatedAt":1735140631000,"sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Introduction","permalink":"/docs/system-design/containers/introduction"},"next":{"title":"chroot in Linux","permalink":"/docs/system-design/containers/chroot"}}');var o=r(74848),t=r(28453);const s={sidebar_position:2},a="Docker Internals",c={},l=[{value:"Docker Architecture Overview",id:"docker-architecture-overview",level:2},{value:"Docker Client and Daemon Interaction",id:"docker-client-and-daemon-interaction",level:2},{value:"Docker Images and Containers",id:"docker-images-and-containers",level:2},{value:"Docker Container Internals",id:"docker-container-internals",level:2},{value:"Docker Registry",id:"docker-registry",level:2},{value:"Docker Network",id:"docker-network",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",mermaid:"mermaid",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"docker-internals",children:"Docker Internals"})}),"\n",(0,o.jsxs)(n.p,{children:["Docker is a tool designed to make it easier to create, deploy, and run applications using containers. The internal working of Docker involves several components, each playing a specific role in the containerization process. Below, I will explain the key components and how they interact within Docker using diagrams in ",(0,o.jsx)(n.strong,{children:"Mermaid"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"docker-architecture-overview",children:"Docker Architecture Overview"}),"\n",(0,o.jsx)(n.p,{children:"The core components of Docker are:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Docker Client"}),": The interface used by users to interact with Docker (CLI or API)."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Docker Daemon"}),": The background service that manages Docker containers, images, networks, etc."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Docker Images"}),": Pre-configured templates to create containers."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Docker Containers"}),": Running instances of Docker images."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Docker Registry"}),": A storage for Docker images, often Docker Hub."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Here\u2019s a high-level architecture diagram:"}),"\n",(0,o.jsx)(n.mermaid,{value:"graph LR\n    A[Docker Client] --\x3e|Command Line/API| B[Docker Daemon]\n    B --\x3e|Pull/Push Images| C[Docker Registry]\n    B --\x3e D[Containers]\n    D --\x3e E[Running Application]\n    B --\x3e F[Images]\n    D --\x3e|Runs from| F"}),"\n",(0,o.jsx)(n.h2,{id:"docker-client-and-daemon-interaction",children:"Docker Client and Daemon Interaction"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.strong,{children:"Docker Client"})," sends commands to the ",(0,o.jsx)(n.strong,{children:"Docker Daemon"})," (server-side), which then executes those commands. For example, when you run ",(0,o.jsx)(n.code,{children:"docker run"}),", the Docker Client sends this command to the Docker Daemon, which decides what to do based on the request (e.g., pull an image, create a container, etc.)."]}),"\n",(0,o.jsx)(n.mermaid,{value:"sequenceDiagram\n    participant Client as Docker Client\n    participant Daemon as Docker Daemon\n    Client->>Daemon: docker run <image>\n    Daemon->>Daemon: Check if image exists\n    Daemon->>Client: Return running container ID\n    Daemon->>Daemon: Start container with image\n    Daemon->>Container: Execute application inside container"}),"\n",(0,o.jsx)(n.h2,{id:"docker-images-and-containers",children:"Docker Images and Containers"}),"\n",(0,o.jsxs)(n.p,{children:["A ",(0,o.jsx)(n.strong,{children:"Docker Image"})," is a lightweight, portable, and executable package that includes everything needed to run a piece of software, including the code, runtime, libraries, and environment variables. A ",(0,o.jsx)(n.strong,{children:"Container"})," is a running instance of a Docker Image."]}),"\n",(0,o.jsx)(n.p,{children:"The process of creating a container from an image looks like this:"}),"\n",(0,o.jsx)(n.mermaid,{value:"sequenceDiagram\n    participant Daemon as Docker Daemon\n    participant Image as Docker Image\n    participant Container as Docker Container\n    Daemon->>Image: Fetch Image from Registry\n    Image->>Daemon: Return Image Layers\n    Daemon->>Container: Create Container from Image\n    Container->>Daemon: Start Running\n    Daemon->>Container: Execute Command"}),"\n",(0,o.jsx)(n.h2,{id:"docker-container-internals",children:"Docker Container Internals"}),"\n",(0,o.jsxs)(n.p,{children:["Internally, each ",(0,o.jsx)(n.strong,{children:"Docker container"})," is isolated using Linux kernel features such as:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Namespaces"}),": Provide isolation for resources (PID, Mount, Network, etc.)."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Cgroups"}),": Control resource allocation (CPU, Memory, IO)."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Union File System (UFS)"}),": Combines multiple layers of Docker images into a single filesystem."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Here\u2019s a diagram showing the isolation:"}),"\n",(0,o.jsx)(n.mermaid,{value:"graph LR\n    A[Host OS] --\x3e|Namespaces| B[Container 1]\n    A[Host OS] --\x3e|Namespaces| C[Container 2]\n    B --\x3e|Cgroups| D[Container 1 Resources]\n    C --\x3e|Cgroups| E[Container 2 Resources]\n    A[Host OS] --\x3e|Union FS| F[Shared Filesystem Layers]"}),"\n",(0,o.jsx)(n.h2,{id:"docker-registry",children:"Docker Registry"}),"\n",(0,o.jsxs)(n.p,{children:["Docker images are stored in a ",(0,o.jsx)(n.strong,{children:"Docker Registry"})," (like Docker Hub). The registry holds different versions of images, which can be pulled to create containers. This allows developers to manage and share images easily."]}),"\n",(0,o.jsx)(n.mermaid,{value:"graph LR\n    A[Docker Daemon] --\x3e|Push| B[Docker Registry]\n    A[Docker Daemon] --\x3e|Pull| B[Docker Registry]\n    B[Docker Registry] --\x3e C[Docker Images]\n    C --\x3e|Store| D[Image Layers]"}),"\n",(0,o.jsx)(n.h2,{id:"docker-network",children:"Docker Network"}),"\n",(0,o.jsx)(n.p,{children:"Docker uses its own network driver to manage container communication. Containers can be connected to different networks (bridge, host, overlay). Here's a simple diagram showing containers in a Docker network:"}),"\n",(0,o.jsx)(n.mermaid,{value:"graph LR\n    A[Docker Host] --\x3e|Bridge Network| B[Container 1]\n    A[Docker Host] --\x3e|Bridge Network| C[Container 2]\n    B --\x3e|Can communicate| C"})]})}function m(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>a});var i=r(96540);const o={},t=i.createContext(o);function s(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);