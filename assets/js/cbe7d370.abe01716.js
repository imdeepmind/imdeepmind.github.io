"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[8982],{1633:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"design-patterns/other-principles","title":"Core Software Engineering Principles","description":"These fundamental principles help developers write maintainable, scalable, and robust code. Let\'s explore each with Python examples.","source":"@site/docs/design-patterns/other-principles.md","sourceDirName":"design-patterns","slug":"/design-patterns/other-principles","permalink":"/docs/design-patterns/other-principles","draft":false,"unlisted":false,"editUrl":"https://github.com/imdeepmind/imdeepmind.github.io/blob/main/docs/design-patterns/other-principles.md","tags":[],"version":"current","lastUpdatedBy":"Abhishek Chatterjee","lastUpdatedAt":1745242793000,"sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"SOLD","permalink":"/docs/design-patterns/solid"},"next":{"title":"Architectural Patterns","permalink":"/docs/design-patterns/architectural-patterns-concepts"}}');var t=i(74848),l=i(28453);const s={sidebar_position:3},a="Core Software Engineering Principles",o={},d=[{value:"DRY (Don&#39;t Repeat Yourself)",id:"dry-dont-repeat-yourself",level:2},{value:"Why it matters",id:"why-it-matters",level:3},{value:"Bad Example (Violates DRY)",id:"bad-example-violates-dry",level:3},{value:"Good Example (DRY)",id:"good-example-dry",level:3},{value:"When to break DRY",id:"when-to-break-dry",level:3},{value:"KISS (Keep It Simple, Stupid)",id:"kiss-keep-it-simple-stupid",level:2},{value:"Why it matters",id:"why-it-matters-1",level:3},{value:"Complex Solution (Violates KISS)",id:"complex-solution-violates-kiss",level:3},{value:"Simple Solution (KISS)",id:"simple-solution-kiss",level:3},{value:"KISS in Practice",id:"kiss-in-practice",level:3},{value:"YAGNI (You Aren&#39;t Gonna Need It)",id:"yagni-you-arent-gonna-need-it",level:2},{value:"Why it matters",id:"why-it-matters-2",level:3},{value:"Bad Example (Violates YAGNI)",id:"bad-example-violates-yagni",level:3},{value:"Good Example (YAGNI)",id:"good-example-yagni",level:3},{value:"YAGNI Exception",id:"yagni-exception",level:3},{value:"Law of Demeter (Principle of Least Knowledge)",id:"law-of-demeter-principle-of-least-knowledge",level:2},{value:"Why it matters",id:"why-it-matters-3",level:3},{value:"Violation Example",id:"violation-example",level:3},{value:"Proper Implementation",id:"proper-implementation",level:3},{value:"Demeter Exception",id:"demeter-exception",level:3},{value:"Composition Over Inheritance",id:"composition-over-inheritance",level:2},{value:"Why it matters",id:"why-it-matters-4",level:3},{value:"Inheritance Example (Problematic)",id:"inheritance-example-problematic",level:3},{value:"Composition Solution",id:"composition-solution",level:3},{value:"When to Use Inheritance",id:"when-to-use-inheritance",level:3},{value:"Separation of Concerns (SoC)",id:"separation-of-concerns-soc",level:2},{value:"Why it matters",id:"why-it-matters-5",level:3},{value:"Violation Example (Monolithic Function)",id:"violation-example-monolithic-function",level:3},{value:"Proper Separation",id:"proper-separation",level:3},{value:"SoC Benefits",id:"soc-benefits",level:3},{value:"Summary Table",id:"summary-table",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"core-software-engineering-principles",children:"Core Software Engineering Principles"})}),"\n",(0,t.jsx)(n.p,{children:"These fundamental principles help developers write maintainable, scalable, and robust code. Let's explore each with Python examples."}),"\n",(0,t.jsx)(n.h2,{id:"dry-dont-repeat-yourself",children:"DRY (Don't Repeat Yourself)"}),"\n",(0,t.jsx)(n.p,{children:"Avoid code duplication by abstracting common functionality into reusable components."}),"\n",(0,t.jsx)(n.h3,{id:"why-it-matters",children:"Why it matters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Reduces maintenance overhead"}),"\n",(0,t.jsx)(n.li,{children:"Minimizes bugs from inconsistent changes"}),"\n",(0,t.jsx)(n.li,{children:"Improves readability"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"bad-example-violates-dry",children:"Bad Example (Violates DRY)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def calculate_area_square(side):\r\n    return side * side\r\n\r\ndef calculate_volume_cube(side):\r\n    return side * side * side  # Duplicated multiplication logic\n"})}),"\n",(0,t.jsx)(n.h3,{id:"good-example-dry",children:"Good Example (DRY)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def square(x):\r\n    return x * x\r\n\r\ndef calculate_area_square(side):\r\n    return square(side)\r\n\r\ndef calculate_volume_cube(side):\r\n    return square(side) * side  # Reuses square() function\n"})}),"\n",(0,t.jsx)(n.h3,{id:"when-to-break-dry",children:"When to break DRY"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"When abstraction would make code harder to understand"}),"\n",(0,t.jsx)(n.li,{children:"For truly one-off operations"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"kiss-keep-it-simple-stupid",children:"KISS (Keep It Simple, Stupid)"}),"\n",(0,t.jsx)(n.p,{children:"Favor simple, straightforward solutions over complex ones."}),"\n",(0,t.jsx)(n.h3,{id:"why-it-matters-1",children:"Why it matters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Easier to maintain and debug"}),"\n",(0,t.jsx)(n.li,{children:"Faster to implement"}),"\n",(0,t.jsx)(n.li,{children:"More accessible to other developers"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"complex-solution-violates-kiss",children:"Complex Solution (Violates KISS)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def is_even(num):\r\n    return True if num % 2 == 0 else False  # Unnecessary ternary\n"})}),"\n",(0,t.jsx)(n.h3,{id:"simple-solution-kiss",children:"Simple Solution (KISS)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def is_even(num):\r\n    return num % 2 == 0  # Direct boolean expression\n"})}),"\n",(0,t.jsx)(n.h3,{id:"kiss-in-practice",children:"KISS in Practice"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Avoid premature optimization"}),"\n",(0,t.jsx)(n.li,{children:"Prefer clear variable names over clever one-liners"}),"\n",(0,t.jsx)(n.li,{children:"Limit abstraction layers to what's necessary"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"yagni-you-arent-gonna-need-it",children:"YAGNI (You Aren't Gonna Need It)"}),"\n",(0,t.jsx)(n.p,{children:"Don't implement functionality until it's actually needed."}),"\n",(0,t.jsx)(n.h3,{id:"why-it-matters-2",children:"Why it matters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Reduces wasted development time"}),"\n",(0,t.jsx)(n.li,{children:"Keeps codebase lean"}),"\n",(0,t.jsx)(n.li,{children:"Avoids maintaining unused code"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"bad-example-violates-yagni",children:"Bad Example (Violates YAGNI)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'class User:\r\n    def __init__(self, name):\r\n        self.name = name\r\n        self.age = None  # Added "just in case" we need it later\r\n        self.address = None  # Not currently used anywhere\n'})}),"\n",(0,t.jsx)(n.h3,{id:"good-example-yagni",children:"Good Example (YAGNI)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"class User:\r\n    def __init__(self, name):\r\n        self.name = name  # Only what we need now\n"})}),"\n",(0,t.jsx)(n.h3,{id:"yagni-exception",children:"YAGNI Exception"}),"\n",(0,t.jsx)(n.p,{children:"When building extensible frameworks where future needs are well-understood"}),"\n",(0,t.jsx)(n.h2,{id:"law-of-demeter-principle-of-least-knowledge",children:"Law of Demeter (Principle of Least Knowledge)"}),"\n",(0,t.jsx)(n.p,{children:"An object should only talk to its immediate neighbors (friends), not strangers."}),"\n",(0,t.jsx)(n.h3,{id:"why-it-matters-3",children:"Why it matters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Reduces coupling between classes"}),"\n",(0,t.jsx)(n.li,{children:"Makes code more modular"}),"\n",(0,t.jsx)(n.li,{children:"Easier to refactor"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"violation-example",children:"Violation Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Bad: Digging deep into object relationships\r\nuser.get_account().get_balance().format_currency()\n"})}),"\n",(0,t.jsx)(n.h3,{id:"proper-implementation",children:"Proper Implementation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Good: Delegate to immediate neighbors\r\nuser.format_account_balance()\r\n\r\n# Inside User class:\r\ndef format_account_balance(self):\r\n    return self.account.format_balance()  # Only talks to direct dependency\n"})}),"\n",(0,t.jsx)(n.h3,{id:"demeter-exception",children:"Demeter Exception"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Builder pattern method chaining"}),"\n",(0,t.jsx)(n.li,{children:"Fluent interfaces"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"composition-over-inheritance",children:"Composition Over Inheritance"}),"\n",(0,t.jsx)(n.p,{children:"Favor building functionality by combining simple objects rather than inheriting from base classes."}),"\n",(0,t.jsx)(n.h3,{id:"why-it-matters-4",children:"Why it matters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"More flexible than deep inheritance hierarchies"}),"\n",(0,t.jsx)(n.li,{children:"Avoids fragile base class problem"}),"\n",(0,t.jsx)(n.li,{children:"Easier to change behavior at runtime"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"inheritance-example-problematic",children:"Inheritance Example (Problematic)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'class Vehicle:\r\n    def move(self):\r\n        pass\r\n\r\nclass Car(Vehicle):\r\n    def move(self):\r\n        print("Driving")\r\n\r\nclass FlyingCar(Car):  # What if we need different movement?\r\n    def move(self):\r\n        print("Flying")  # Overriding parent behavior\n'})}),"\n",(0,t.jsx)(n.h3,{id:"composition-solution",children:"Composition Solution"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'class Engine:\r\n    def move(self):\r\n        print("Driving")\r\n\r\nclass JetEngine:\r\n    def move(self):\r\n        print("Flying")\r\n\r\nclass Vehicle:\r\n    def __init__(self, engine):\r\n        self.engine = engine\r\n\r\n    def move(self):\r\n        self.engine.move()\r\n\r\n# Usage\r\ncar = Vehicle(Engine())\r\ncar.move()  # Driving\r\n\r\nflying_car = Vehicle(JetEngine())\r\nflying_car.move()  # Flying\n'})}),"\n",(0,t.jsx)(n.h3,{id:"when-to-use-inheritance",children:"When to Use Inheritance"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:'For true "is-a" relationships'}),"\n",(0,t.jsx)(n.li,{children:"When you need method overriding"}),"\n",(0,t.jsx)(n.li,{children:"For interface implementation"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"separation-of-concerns-soc",children:"Separation of Concerns (SoC)"}),"\n",(0,t.jsx)(n.p,{children:"Divide a program into distinct sections, each addressing a separate concern."}),"\n",(0,t.jsx)(n.h3,{id:"why-it-matters-5",children:"Why it matters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Easier maintenance"}),"\n",(0,t.jsx)(n.li,{children:"Better code organization"}),"\n",(0,t.jsx)(n.li,{children:"Enables parallel development"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"violation-example-monolithic-function",children:"Violation Example (Monolithic Function)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'def process_order(order):\r\n    # Validate order\r\n    if not order.items:\r\n        raise ValueError("Empty order")\r\n\r\n    # Calculate total\r\n    total = sum(item.price * item.quantity for item in order.items)\r\n\r\n    # Charge payment\r\n    payment_service.charge(order.customer, total)\r\n\r\n    # Send confirmation\r\n    email_service.send_confirmation(order.customer)\r\n\r\n    # Update inventory\r\n    inventory_manager.update_stock(order.items)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"proper-separation",children:"Proper Separation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'class OrderValidator:\r\n    def validate(self, order):\r\n        if not order.items:\r\n            raise ValueError("Empty order")\r\n\r\nclass OrderCalculator:\r\n    def get_total(self, order):\r\n        return sum(item.price * item.quantity for item in order.items)\r\n\r\nclass OrderProcessor:\r\n    def __init__(self):\r\n        self.validator = OrderValidator()\r\n        self.calculator = OrderCalculator()\r\n\r\n    def process(self, order):\r\n        self.validator.validate(order)\r\n        total = self.calculator.get_total(order)\r\n        payment_service.charge(order.customer, total)\r\n        email_service.send_confirmation(order.customer)\r\n        inventory_manager.update_stock(order.items)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"soc-benefits",children:"SoC Benefits"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Each class has single responsibility"}),"\n",(0,t.jsx)(n.li,{children:"Easier to test components in isolation"}),"\n",(0,t.jsx)(n.li,{children:"Changes to one concern don't affect others"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"summary-table",children:"Summary Table"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Principle"}),(0,t.jsx)(n.th,{children:"Key Benefit"}),(0,t.jsx)(n.th,{children:"Python Example"}),(0,t.jsx)(n.th,{children:"When to Violate"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"DRY"})}),(0,t.jsx)(n.td,{children:"Reduce duplication"}),(0,t.jsx)(n.td,{children:"Reusable functions"}),(0,t.jsx)(n.td,{children:"When abstraction hurts clarity"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"KISS"})}),(0,t.jsx)(n.td,{children:"Maintainability"}),(0,t.jsx)(n.td,{children:"Simple boolean returns"}),(0,t.jsx)(n.td,{children:"Performance-critical sections"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"YAGNI"})}),(0,t.jsx)(n.td,{children:"Avoid waste"}),(0,t.jsx)(n.td,{children:"Minimal class attributes"}),(0,t.jsx)(n.td,{children:"Framework development"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Law of Demeter"})}),(0,t.jsx)(n.td,{children:"Loose coupling"}),(0,t.jsx)(n.td,{children:"Method delegation"}),(0,t.jsx)(n.td,{children:"Fluent interfaces"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Composition"})}),(0,t.jsx)(n.td,{children:"Flexibility"}),(0,t.jsx)(n.td,{children:"Engine injection"}),(0,t.jsx)(n.td,{children:'True "is-a" relationships'})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"SoC"})}),(0,t.jsx)(n.td,{children:"Modularity"}),(0,t.jsx)(n.td,{children:"Separate validator class"}),(0,t.jsx)(n.td,{children:"Trivial applications"})]})]})]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>a});var r=i(96540);const t={},l=r.createContext(t);function s(e){const n=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),r.createElement(l.Provider,{value:n},e.children)}}}]);