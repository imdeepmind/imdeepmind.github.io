"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[2011],{82274:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"ml/mcp/architecture","title":"Architecture","description":"The Model Context Protocol (MCP) is an open, standardized protocol for integrating AI applications with external tools, data sources, and workflows in a secure, discoverable, and extensible way. MCP is designed to work across multiple transport mechanisms and follows a layered architecture, separating message semantics from transport.","source":"@site/docs/ml/mcp/architecture.md","sourceDirName":"ml/mcp","slug":"/ml/mcp/architecture","permalink":"/docs/ml/mcp/architecture","draft":false,"unlisted":false,"editUrl":"https://github.com/imdeepmind/imdeepmind.github.io/blob/main/docs/ml/mcp/architecture.md","tags":[],"version":"current","lastUpdatedBy":"Abhishek Chatterjee","lastUpdatedAt":1755155288000,"sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Hello World","permalink":"/docs/ml/mcp/hello-world"},"next":{"title":"LangChain","permalink":"/docs/ml/mcp/langchain"}}');var i=s(74848),t=s(28453);const l={sidebar_position:3},a="Architecture",o={},c=[{value:"Core Architectural Roles",id:"core-architectural-roles",level:2},{value:"Host",id:"host",level:3},{value:"Client",id:"client",level:3},{value:"Server",id:"server",level:3},{value:"MCP Layers",id:"mcp-layers",level:2},{value:"Data Layer",id:"data-layer",level:3},{value:"Transport Layer",id:"transport-layer",level:3},{value:"Communication Mechanisms",id:"communication-mechanisms",level:2},{value:"STDIO Transport",id:"stdio-transport",level:3},{value:"Streamable HTTP Transport",id:"streamable-http-transport",level:3},{value:"Capabilities",id:"capabilities",level:2},{value:"Tools",id:"tools",level:3},{value:"Resources",id:"resources",level:3},{value:"Prompts",id:"prompts",level:3},{value:"Session Lifecycle",id:"session-lifecycle",level:2},{value:"Security &amp; Isolation",id:"security--isolation",level:2},{value:"Key Points",id:"key-points",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"architecture",children:"Architecture"})}),"\n",(0,i.jsx)(n.p,{children:"The Model Context Protocol (MCP) is an open, standardized protocol for integrating AI applications with external tools, data sources, and workflows in a secure, discoverable, and extensible way. MCP is designed to work across multiple transport mechanisms and follows a layered architecture, separating message semantics from transport."}),"\n",(0,i.jsx)(n.h2,{id:"core-architectural-roles",children:"Core Architectural Roles"}),"\n",(0,i.jsx)(n.p,{children:"MCP defines three main participants:"}),"\n",(0,i.jsx)(n.h3,{id:"host",children:"Host"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The AI application that orchestrates interaction with the model and end-user."}),"\n",(0,i.jsx)(n.li,{children:"Examples: chatbot, IDE extension, CLI interface, or any LLM-enabled application."}),"\n",(0,i.jsx)(n.li,{children:"Manages multiple Clients, each connected to a different Server."}),"\n",(0,i.jsx)(n.li,{children:"Responsible for presenting capabilities, managing permissions, and deciding which Client/Server to call for a request."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"client",children:"Client"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Lives inside or alongside the Host."}),"\n",(0,i.jsx)(n.li,{children:"Maintains a 1:1 connection with a specific Server."}),"\n",(0,i.jsx)(n.li,{children:"Handles session management, message routing, error handling, and transport (STDIO, HTTP, SSE)."}),"\n",(0,i.jsx)(n.li,{children:"A Host can have multiple Clients to talk to multiple Servers simultaneously."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"server",children:"Server"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"A separate process or service that exposes capabilities in MCP format."}),"\n",(0,i.jsx)(n.li,{children:"Implements capability discovery and execution."}),"\n",(0,i.jsxs)(n.li,{children:["Three main capability types:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Tools: Executable actions (e.g., ",(0,i.jsx)(n.code,{children:"create_ticket"}),", ",(0,i.jsx)(n.code,{children:"run_query"}),")."]}),"\n",(0,i.jsx)(n.li,{children:"Resources: Read-only data sources (e.g., files, DB rows, API endpoints)."}),"\n",(0,i.jsx)(n.li,{children:"Prompts: Parameterized templates for structured model input."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.mermaid,{value:'flowchart LR\n  subgraph Host["MCP Host (AI Application)"]\n    H["LLM / Agent Logic"]\n    C1["MCP Client A"]\n    C2["MCP Client B"]\n  end\n  subgraph S1["MCP Server 1"]\n    T1["Tools"]\n    R1["Resources"]\n    P1["Prompts"]\n  end\n  subgraph S2["MCP Server 2"]\n    T2["Tools"]\n    R2["Resources"]\n    P2["Prompts"]\n  end\n  H <--\x3e C1\n  H <--\x3e C2\n  C1 <--\x3e S1\n  C2 <--\x3e S2'}),"\n",(0,i.jsx)(n.h2,{id:"mcp-layers",children:"MCP Layers"}),"\n",(0,i.jsx)(n.p,{children:"MCP separates what is communicated from how it is transported."}),"\n",(0,i.jsx)(n.h3,{id:"data-layer",children:"Data Layer"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Protocol: JSON-RPC 2.0 over a chosen transport."}),"\n",(0,i.jsx)(n.li,{children:"Capabilities: request/response, notifications, streaming, cancellation, error codes."}),"\n",(0,i.jsx)(n.li,{children:"Key concept: Same message format works across all transports."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"transport-layer",children:"Transport Layer"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Defines how JSON-RPC messages are exchanged."}),"\n",(0,i.jsx)(n.li,{children:"Standard transports: STDIO (local), Streamable HTTP (remote)."}),"\n",(0,i.jsx)(n.li,{children:"Custom transports are possible but must preserve data layer semantics."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"communication-mechanisms",children:"Communication Mechanisms"}),"\n",(0,i.jsx)(n.h3,{id:"stdio-transport",children:"STDIO Transport"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Client spawns Server as a subprocess."}),"\n",(0,i.jsx)(n.li,{children:"Client writes JSON-RPC messages to Server\u2019s stdin; Server writes responses to stdout; stderr is for logs/errors."}),"\n",(0,i.jsx)(n.li,{children:"Use for local integrations; fastest and simplest transport."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"streamable-http-transport",children:"Streamable HTTP Transport"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Client sends JSON-RPC requests via HTTP POST /mcp."}),"\n",(0,i.jsx)(n.li,{children:"Responses can be standard JSON or SSE stream for partial results."}),"\n",(0,i.jsx)(n.li,{children:"Security: validate Origin headers, bind to localhost for local usage, require authentication for remote usage."}),"\n"]}),"\n",(0,i.jsx)(n.mermaid,{value:"sequenceDiagram\n  participant Client\n  participant Server\n  Client->>Server: HTTP POST /mcp (JSON-RPC request)\n  alt SSE stream\n    Server--\x3e>Client: SSE events (JSON-RPC messages)\n    Server--\x3e>Client: [close stream]\n  else Single response\n    Server--\x3e>Client: JSON (full result)\n  end\n  opt Server-initiated\n    Client->>Server: GET /mcp (text/event-stream)\n    Server--\x3e>Client: SSE notifications\n  end"}),"\n",(0,i.jsx)(n.h2,{id:"capabilities",children:"Capabilities"}),"\n",(0,i.jsx)(n.h3,{id:"tools",children:"Tools"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Executable actions the model can invoke."}),"\n",(0,i.jsx)(n.li,{children:"Defined with name, input schema, description."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"resources",children:"Resources"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Read-only references to data."}),"\n",(0,i.jsxs)(n.li,{children:["Accessed via ",(0,i.jsx)(n.code,{children:"resources/list"})," and ",(0,i.jsx)(n.code,{children:"resources/read"}),"."]}),"\n",(0,i.jsx)(n.li,{children:"Often paginated or streamed."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"prompts",children:"Prompts"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Parameterized text templates for structured requests."}),"\n",(0,i.jsxs)(n.li,{children:["Accessed via ",(0,i.jsx)(n.code,{children:"prompts/list"})," and ",(0,i.jsx)(n.code,{children:"prompts/get"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"session-lifecycle",children:"Session Lifecycle"}),"\n",(0,i.jsx)(n.p,{children:"Defines the full flow of interaction between a Client and a Server:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Session Creation"}),": Host requests capability, Client creates session, establishes transport."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Initialization"}),": Client sends ",(0,i.jsx)(n.code,{children:"initialize"})," request; Server responds with capabilities and metadata."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Discovery"}),": Client queries available capabilities (",(0,i.jsx)(n.code,{children:"tools/list"}),", ",(0,i.jsx)(n.code,{children:"resources/list"}),", ",(0,i.jsx)(n.code,{children:"prompts/list"}),")."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Execution"}),": Host selects capability, Client sends MCP request, Server returns result or error."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Streaming Results"}),": Server sends partial chunks if streaming, final message signals end."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Error Handling"}),": Server responds with structured error code/message."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Teardown"}),": Host signals end of session, Server cleans up and closes connection."]}),"\n"]}),"\n",(0,i.jsx)(n.mermaid,{value:'sequenceDiagram\n  participant Host\n  participant Client\n  participant Server\n  Host->>Client: createSession()\n  Client->>Server: initialize(capabilities)\n  Server--\x3e>Client: initializeResult(serverCaps)\n  Client->>Server: tools/list, resources/list, prompts/list\n  Server--\x3e>Client: catalogs\n  Host->>Client: callTool("search_tickets", args)\n  Client->>Server: tools/call\n  alt Streaming results\n    Server--\x3e>Client: resultChunk\n    Client--\x3e>Host: resultChunk\n    Server--\x3e>Client: resultComplete\n  else Error\n    Server--\x3e>Client: error(code, msg)\n    Client--\x3e>Host: error(code, msg)\n  end\n  Host->>Client: closeSession()\n  Client->>Server: shutdown()\n  Server--\x3e>Client: bye'}),"\n",(0,i.jsx)(n.h2,{id:"security--isolation",children:"Security & Isolation"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Servers run in separate processes or containers."}),"\n",(0,i.jsx)(n.li,{children:"Only required capabilities exposed (least privilege)."}),"\n",(0,i.jsx)(n.li,{children:"Server enforces input schemas and manages backend credentials."}),"\n",(0,i.jsx)(n.li,{children:"Host presents permissions/consent before access."}),"\n"]}),"\n",(0,i.jsx)(n.mermaid,{value:'flowchart TB\n  subgraph Boundary["Security Boundary: Host vs Server"]\n    direction LR\n    subgraph H2["Host"]\n      UI["Consent UI / Policy"]\n      CL["MCP Client"]\n    end\n    subgraph Srv["Server (sandbox/container)"]\n      POL["Argument Validation & Policies"]\n      ADP["Backend Adapters (APIs, DB)"]\n    end\n  end\n  UI --\x3e CL --\x3e Srv\n  Srv --\x3e ADP\n  ADP --\x3e| scoped creds | Srv --\x3e CL --\x3e UI'}),"\n",(0,i.jsx)(n.h2,{id:"key-points",children:"Key Points"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Host"}),": Orchestrator, user-facing."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Client"}),": Session & transport manager."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Server"}),": Capability provider."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Transports"}),": STDIO (local) or Streamable HTTP (remote)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Protocol"}),": JSON-RPC 2.0 with streaming and error handling."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Security"}),": Sandbox isolation, explicit capability listing, auth control."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>a});var r=s(96540);const i={},t=r.createContext(i);function l(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);