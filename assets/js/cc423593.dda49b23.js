"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[5519],{84401:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>t,contentTitle:()=>d,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"frameworks-libraries/backend/flask/middlewares","title":"Middlewares","description":"Middleware is a component in a web application that acts as an intermediary between the client request and the server response. In Flask, middleware is used to process requests before they reach the Flask application or after the application has processed the request but before sending the response back to the client.","source":"@site/docs/frameworks-libraries/backend/flask/middlewares.md","sourceDirName":"frameworks-libraries/backend/flask","slug":"/frameworks-libraries/backend/flask/middlewares","permalink":"/docs/frameworks-libraries/backend/flask/middlewares","draft":false,"unlisted":false,"editUrl":"https://github.com/imdeepmind/imdeepmind.github.io/blob/main/docs/frameworks-libraries/backend/flask/middlewares.md","tags":[],"version":"current","lastUpdatedBy":"Abhishek Chatterjee","lastUpdatedAt":1749212834000,"sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"tutorialSidebar","previous":{"title":"Static Files","permalink":"/docs/frameworks-libraries/backend/flask/static-files"},"next":{"title":"Request and Response Cycle","permalink":"/docs/frameworks-libraries/backend/flask/request-response-cycle"}}');var i=r(74848),l=r(28453);const a={sidebar_position:7},d="Middlewares",t={},o=[{value:"What is Middleware?",id:"what-is-middleware",level:2},{value:"Middleware Workflow",id:"middleware-workflow",level:3},{value:"Types of Middleware in Flask",id:"types-of-middleware-in-flask",level:2},{value:"Implementing Middleware in Flask",id:"implementing-middleware-in-flask",level:2},{value:"Middleware Using <code>before_request</code> and <code>after_request</code>",id:"middleware-using-before_request-and-after_request",level:3},{value:"<code>before_request</code>",id:"before_request",level:4},{value:"<code>after_request</code>",id:"after_request",level:4},{value:"Combining <code>before_request</code> and <code>after_request</code>",id:"combining-before_request-and-after_request",level:4},{value:"WSGI Middleware",id:"wsgi-middleware",level:3},{value:"How WSGI Middleware Works",id:"how-wsgi-middleware-works",level:4},{value:"Custom Middleware Classes",id:"custom-middleware-classes",level:3},{value:"Real-World Use Cases of Flask Middleware",id:"real-world-use-cases-of-flask-middleware",level:2},{value:"Middleware vs Decorators in Flask",id:"middleware-vs-decorators-in-flask",level:2},{value:"Best Practices for Using Middleware in Flask",id:"best-practices-for-using-middleware-in-flask",level:2},{value:"Example: Complete Flask App with Middleware",id:"example-complete-flask-app-with-middleware",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"middlewares",children:"Middlewares"})}),"\n",(0,i.jsxs)(n.p,{children:["Middleware is a component in a web application that acts as an intermediary between the client request and the server response. In Flask, middleware is used to process requests ",(0,i.jsx)(n.strong,{children:"before"})," they reach the Flask application or ",(0,i.jsx)(n.strong,{children:"after"})," the application has processed the request but ",(0,i.jsx)(n.strong,{children:"before"})," sending the response back to the client."]}),"\n",(0,i.jsx)(n.p,{children:"Flask, being a lightweight and extensible framework, provides a way to implement middleware to perform additional processing, such as logging, authentication, input validation, error handling, or modifying requests and responses."}),"\n",(0,i.jsx)(n.h2,{id:"what-is-middleware",children:"What is Middleware?"}),"\n",(0,i.jsxs)(n.p,{children:["Middleware functions lie between the ",(0,i.jsx)(n.strong,{children:"WSGI server"})," (like Gunicorn or uWSGI) and the Flask application. They can:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Inspect or modify incoming requests before they reach the Flask application."}),"\n",(0,i.jsx)(n.li,{children:"Inspect or modify outgoing responses before they are sent back to the client."}),"\n",(0,i.jsx)(n.li,{children:"Add additional functionality, such as logging or security headers."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"middleware-workflow",children:"Middleware Workflow"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.strong,{children:"client"})," sends a request."]}),"\n",(0,i.jsx)(n.li,{children:"The middleware intercepts the request, processes it, and optionally modifies it."}),"\n",(0,i.jsx)(n.li,{children:"The request is forwarded to the Flask application."}),"\n",(0,i.jsx)(n.li,{children:"The Flask application processes the request and generates a response."}),"\n",(0,i.jsx)(n.li,{children:"The middleware intercepts the response, processes it, and optionally modifies it."}),"\n",(0,i.jsx)(n.li,{children:"The response is sent back to the client."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"types-of-middleware-in-flask",children:"Types of Middleware in Flask"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Request Middleware"}),": Runs before the Flask view function is called. It processes the incoming request."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Response Middleware"}),": Runs after the Flask view function generates a response. It processes the outgoing response."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"implementing-middleware-in-flask",children:"Implementing Middleware in Flask"}),"\n",(0,i.jsx)(n.p,{children:"Flask does not have a built-in concept of middleware. However, middleware can be implemented in Flask using:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.code,{children:"before_request"})," and ",(0,i.jsx)(n.code,{children:"after_request"})," Hooks"]})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"WSGI Middleware"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Custom Middleware Classes"})}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"middleware-using-before_request-and-after_request",children:["Middleware Using ",(0,i.jsx)(n.code,{children:"before_request"})," and ",(0,i.jsx)(n.code,{children:"after_request"})]}),"\n",(0,i.jsxs)(n.p,{children:["Flask provides hooks like ",(0,i.jsx)(n.code,{children:"before_request"})," and ",(0,i.jsx)(n.code,{children:"after_request"})," to execute functions ",(0,i.jsx)(n.strong,{children:"before"})," or ",(0,i.jsx)(n.strong,{children:"after"})," the request is processed."]}),"\n",(0,i.jsx)(n.h4,{id:"before_request",children:(0,i.jsx)(n.code,{children:"before_request"})}),"\n",(0,i.jsx)(n.p,{children:"Runs before the view function is executed. Useful for tasks like authentication, input validation, or logging."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from flask import Flask, request\r\n\r\napp = Flask(__name__)\r\n\r\n@app.before_request\r\ndef log_request_info():\r\n    print(f"Request Method: {request.method}")\r\n    print(f"Request URL: {request.url}")\r\n\r\n@app.route(\'/\')\r\ndef home():\r\n    return "Welcome to the Home Page!"\r\n\r\nif __name__ == \'__main__\':\r\n    app.run(debug=True)\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"When a request is made, details like the HTTP method and URL are logged before processing the view."}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"after_request",children:(0,i.jsx)(n.code,{children:"after_request"})}),"\n",(0,i.jsx)(n.p,{children:"Runs after the view function generates a response but before the response is sent back to the client. Useful for tasks like adding security headers or caching."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from flask import Flask, request\r\n\r\napp = Flask(__name__)\r\n\r\n@app.after_request\r\ndef add_security_headers(response):\r\n    response.headers["X-Content-Type-Options"] = "nosniff"\r\n    response.headers["X-Frame-Options"] = "DENY"\r\n    return response\r\n\r\n@app.route(\'/\')\r\ndef home():\r\n    return "Welcome to the Home Page!"\r\n\r\nif __name__ == \'__main__\':\r\n    app.run(debug=True)\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Adds security headers (",(0,i.jsx)(n.code,{children:"X-Content-Type-Options"}),", ",(0,i.jsx)(n.code,{children:"X-Frame-Options"}),") to all responses."]}),"\n"]}),"\n",(0,i.jsxs)(n.h4,{id:"combining-before_request-and-after_request",children:["Combining ",(0,i.jsx)(n.code,{children:"before_request"})," and ",(0,i.jsx)(n.code,{children:"after_request"})]}),"\n",(0,i.jsx)(n.p,{children:"You can combine both hooks to create a complete middleware pipeline."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from flask import Flask, request\r\n\r\napp = Flask(__name__)\r\n\r\n@app.before_request\r\ndef log_request():\r\n    print(f"Incoming request: {request.method} {request.url}")\r\n\r\n@app.after_request\r\ndef modify_response(response):\r\n    response.headers["X-Custom-Header"] = "CustomValue"\r\n    return response\r\n\r\n@app.route(\'/\')\r\ndef home():\r\n    return "Welcome to the Flask App!"\r\n\r\nif __name__ == \'__main__\':\r\n    app.run(debug=True)\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Logs each request and modifies the response by adding a custom header."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"wsgi-middleware",children:"WSGI Middleware"}),"\n",(0,i.jsx)(n.p,{children:"Flask applications are WSGI-compliant, which means middleware can be implemented at the WSGI layer. WSGI middleware wraps the Flask application and intercepts requests and responses."}),"\n",(0,i.jsx)(n.h4,{id:"how-wsgi-middleware-works",children:"How WSGI Middleware Works"}),"\n",(0,i.jsxs)(n.p,{children:["A WSGI middleware is essentially a Python callable that takes the WSGI ",(0,i.jsx)(n.code,{children:"environ"})," and ",(0,i.jsx)(n.code,{children:"start_response"})," arguments, processes them, and forwards them to the next WSGI application (the Flask app)."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class SimpleMiddleware:\r\n    def __init__(self, app):\r\n        self.app = app\r\n\r\n    def __call__(self, environ, start_response):\r\n        # Process the request (before the Flask app)\r\n        print("WSGI Middleware: Request received")\r\n\r\n        # Call the Flask application\r\n        response = self.app(environ, start_response)\r\n\r\n        # Process the response (after the Flask app)\r\n        print("WSGI Middleware: Response processed")\r\n\r\n        return response\r\n\r\nfrom flask import Flask\r\n\r\napp = Flask(__name__)\r\napp.wsgi_app = SimpleMiddleware(app.wsgi_app)  # Wrap the Flask app with middleware\r\n\r\n@app.route(\'/\')\r\ndef home():\r\n    return "Hello, World!"\r\n\r\nif __name__ == \'__main__\':\r\n    app.run(debug=True)\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The middleware logs messages before and after the request is processed by the Flask application."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"custom-middleware-classes",children:"Custom Middleware Classes"}),"\n",(0,i.jsx)(n.p,{children:"For complex middleware functionality, you can define a custom class with methods for request and response handling."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from flask import Flask, request\r\n\r\nclass CustomMiddleware:\r\n    def __init__(self, app):\r\n        self.app = app\r\n\r\n    def __call__(self, environ, start_response):\r\n        # Pre-process the request\r\n        print(f\"Custom Middleware: Before Request - {environ['PATH_INFO']}\")\r\n\r\n        # Call the Flask application\r\n        response = self.app(environ, start_response)\r\n\r\n        # Post-process the response\r\n        print(\"Custom Middleware: After Request\")\r\n\r\n        return response\r\n\r\napp = Flask(__name__)\r\napp.wsgi_app = CustomMiddleware(app.wsgi_app)  # Wrap the Flask app with middleware\r\n\r\n@app.route('/')\r\ndef home():\r\n    return \"Middleware Example!\"\r\n\r\nif __name__ == '__main__':\r\n    app.run(debug=True)\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Logs request and response details using the custom middleware class."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"real-world-use-cases-of-flask-middleware",children:"Real-World Use Cases of Flask Middleware"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Authentication/Authorization"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Check if the user is authenticated before allowing access to certain routes."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Logging and Analytics"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Log request details like IP address, user agent, and response times for monitoring and debugging."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Input Validation"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Validate incoming request data (e.g., headers, query parameters) before passing it to the Flask app."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Error Handling"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Catch and handle errors globally before they reach the client."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Rate Limiting"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Implement rate-limiting logic to prevent abuse of the application."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Security Enhancements"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Add security headers to responses, such as CSP (Content Security Policy) or HSTS (HTTP Strict Transport Security)."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"middleware-vs-decorators-in-flask",children:"Middleware vs Decorators in Flask"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Middleware"})," operates globally for all requests and responses. It is applied at the application level."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Decorators"})," operate on specific routes or view functions. They are applied at the route level."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"For example, while middleware can log all requests, decorators are better suited for route-specific tasks like adding authentication to only certain endpoints."}),"\n",(0,i.jsx)(n.h2,{id:"best-practices-for-using-middleware-in-flask",children:"Best Practices for Using Middleware in Flask"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Use WSGI Middleware for Cross-App Functionality"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"WSGI middleware can be reused across multiple Flask applications."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Keep Middleware Lightweight"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Avoid adding too much logic to middleware to keep it efficient."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Chain Middleware"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"You can chain multiple middleware components by wrapping the Flask app sequentially."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Use Middleware Libraries"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use existing middleware libraries for common tasks like rate-limiting, logging, and security enhancements."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"example-complete-flask-app-with-middleware",children:"Example: Complete Flask App with Middleware"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from flask import Flask, request\r\n\r\nclass LoggingMiddleware:\r\n    def __init__(self, app):\r\n        self.app = app\r\n\r\n    def __call__(self, environ, start_response):\r\n        print(f\"Request: {environ['REQUEST_METHOD']} {environ['PATH_INFO']}\")\r\n        return self.app(environ, start_response)\r\n\r\napp = Flask(__name__)\r\napp.wsgi_app = LoggingMiddleware(app.wsgi_app)  # Add middleware\r\n\r\n@app.route('/')\r\ndef home():\r\n    return \"Welcome to Flask with Middleware!\"\r\n\r\n@app.route('/about')\r\ndef about():\r\n    return \"This is the about page.\"\r\n\r\nif __name__ == '__main__':\r\n    app.run(debug=True)\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Logs every request's HTTP method and path."}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>d});var s=r(96540);const i={},l=s.createContext(i);function a(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);