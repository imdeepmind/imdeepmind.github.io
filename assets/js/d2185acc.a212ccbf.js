"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[6726],{94481:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>m,frontMatter:()=>s,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"programming/programming-languages/go/interfaces","title":"Interfaces and Generics","description":"Go provides powerful features for abstraction and code reuse through interfaces and, since Go 1.18, generics. These concepts are essential for writing flexible, maintainable, and idiomatic Go code.","source":"@site/docs/programming/programming-languages/go/interfaces.md","sourceDirName":"programming/programming-languages/go","slug":"/programming/programming-languages/go/interfaces","permalink":"/docs/programming/programming-languages/go/interfaces","draft":false,"unlisted":false,"editUrl":"https://github.com/imdeepmind/imdeepmind.github.io/blob/main/docs/programming/programming-languages/go/interfaces.md","tags":[],"version":"current","lastUpdatedBy":"Abhishek Chatterjee","lastUpdatedAt":1754997544000,"sidebarPosition":12,"frontMatter":{"sidebar_position":12},"sidebar":"tutorialSidebar","previous":{"title":"Structs and Custom Types","permalink":"/docs/programming/programming-languages/go/structs"},"next":{"title":"Arrays, Slices and, Maps","permalink":"/docs/programming/programming-languages/go/array-maps"}}');var t=i(74848),a=i(28453);const s={sidebar_position:12},c="Interfaces and Generics",l={},o=[{value:"Interfaces",id:"interfaces",level:2},{value:"Defining and Using Interfaces",id:"defining-and-using-interfaces",level:3},{value:"Multiple Implementations",id:"multiple-implementations",level:3},{value:"Embedded Interfaces",id:"embedded-interfaces",level:3},{value:"Custom Interface Example: Sorting",id:"custom-interface-example-sorting",level:3},{value:"Empty Interface",id:"empty-interface",level:3},{value:"Key Points",id:"key-points",level:3},{value:"Generics",id:"generics",level:2},{value:"Defining Generic Functions",id:"defining-generic-functions",level:3},{value:"Generic Types",id:"generic-types",level:3},{value:"Generic Map Function",id:"generic-map-function",level:3},{value:"Generic Constraints",id:"generic-constraints",level:3},{value:"Combining Generics and Interfaces",id:"combining-generics-and-interfaces",level:3},{value:"Key Points",id:"key-points-1",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"interfaces-and-generics",children:"Interfaces and Generics"})}),"\n",(0,t.jsxs)(n.p,{children:["Go provides powerful features for abstraction and code reuse through ",(0,t.jsx)(n.strong,{children:"interfaces"})," and, since Go 1.18, ",(0,t.jsx)(n.strong,{children:"generics"}),". These concepts are essential for writing flexible, maintainable, and idiomatic Go code."]}),"\n",(0,t.jsx)(n.h2,{id:"interfaces",children:"Interfaces"}),"\n",(0,t.jsxs)(n.p,{children:["An ",(0,t.jsx)(n.strong,{children:"interface"})," in Go is a type that specifies a set of method signatures. Any type that implements those methods implicitly satisfies the interface. This enables polymorphism and decouples code from concrete implementations."]}),"\n",(0,t.jsx)(n.h3,{id:"defining-and-using-interfaces",children:"Defining and Using Interfaces"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'// Define an interface\n type Shape interface {\n     Area() float64\n     Perimeter() float64\n }\n\n// Implement the interface with a struct\n type Rectangle struct {\n     Width, Height float64\n }\n\nfunc (r Rectangle) Area() float64 {\n     return r.Width * r.Height\n}\n\nfunc (r Rectangle) Perimeter() float64 {\n     return 2 * (r.Width + r.Height)\n}\n\n// Use the interface\nfunc printShapeInfo(s Shape) {\n     fmt.Printf("Area: %f, Perimeter: %f\\n", s.Area(), s.Perimeter())\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"multiple-implementations",children:"Multiple Implementations"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"// Circle implements Shape\n type Circle struct {\n     Radius float64\n }\n\nfunc (c Circle) Area() float64 {\n     return math.Pi * c.Radius * c.Radius\n}\n\nfunc (c Circle) Perimeter() float64 {\n     return 2 * math.Pi * c.Radius\n}\n\n// Both Rectangle and Circle satisfy Shape\nfunc main() {\n    var s Shape\n    s = Rectangle{Width: 3, Height: 4}\n    printShapeInfo(s)\n    s = Circle{Radius: 5}\n    printShapeInfo(s)\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"embedded-interfaces",children:"Embedded Interfaces"}),"\n",(0,t.jsx)(n.p,{children:"Go allows interfaces to embed other interfaces, enabling the creation of more complex and modular abstractions."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:" type Reader interface {\n     Read(p []byte) (n int, err error)\n }\n\n type Writer interface {\n     Write(p []byte) (n int, err error)\n }\n\n type ReadWriter interface {\n     Reader\n     Writer\n }\n\n// Any type that implements both Read and Write methods satisfies ReadWriter\n type File struct {}\n\nfunc (f File) Read(p []byte) (n int, err error) {\n     // Implementation\n     return 0, nil\n}\n\nfunc (f File) Write(p []byte) (n int, err error) {\n     // Implementation\n     return 0, nil\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"custom-interface-example-sorting",children:"Custom Interface Example: Sorting"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:" type Sortable interface {\n     Len() int\n     Less(i, j int) bool\n     Swap(i, j int)\n }\n\nfunc Sort(data Sortable) {\n     // Sorting logic using the interface\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"empty-interface",children:"Empty Interface"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"interface{}"})," type is the empty interface, which can hold values of any type."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'func describe(i interface{}) {\n    fmt.Printf("Type = %T, Value = %v\\n", i, i)\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"key-points",children:"Key Points"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Interfaces are satisfied implicitly (no explicit declaration required)."}),"\n",(0,t.jsx)(n.li,{children:"Interfaces enable loose coupling and testability."}),"\n",(0,t.jsx)(n.li,{children:"Embedded interfaces promote modularity and code reuse."}),"\n",(0,t.jsx)(n.li,{children:"The empty interface allows for generic containers and APIs."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"generics",children:"Generics"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Generics"})," allow us to write functions, types, and data structures that work with any type, increasing code reuse and type safety. Generics were introduced in Go 1.18."]}),"\n",(0,t.jsx)(n.h3,{id:"defining-generic-functions",children:"Defining Generic Functions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"// A generic function to find the maximum of two values\nfunc Max[T comparable](a, b T) T {\n    if a > b {\n        return a\n    }\n    return b\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"generic-types",children:"Generic Types"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"// A generic Stack type\n type Stack[T any] struct {\n     items []T\n }\n\nfunc (s *Stack[T]) Push(item T) {\n     s.items = append(s.items, item)\n}\n\nfunc (s *Stack[T]) Pop() T {\n     n := len(s.items)\n     item := s.items[n-1]\n     s.items = s.items[:n-1]\n     return item\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"generic-map-function",children:"Generic Map Function"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"// Map applies a function to each element of a slice\nfunc Map[T any, U any](input []T, fn func(T) U) []U {\n    result := make([]U, len(input))\n    for i, v := range input {\n        result[i] = fn(v)\n    }\n    return result\n}\n\n// Usage:\nnums := []int{1, 2, 3}\nsquares := Map(nums, func(x int) int { return x * x })\n"})}),"\n",(0,t.jsx)(n.h3,{id:"generic-constraints",children:"Generic Constraints"}),"\n",(0,t.jsx)(n.p,{children:"We can restrict type parameters using interfaces or built-in constraints."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"// Only types that implement Stringer can be used\nfunc PrintAll[T fmt.Stringer](items []T) {\n    for _, item := range items {\n        fmt.Println(item.String())\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"combining-generics-and-interfaces",children:"Combining Generics and Interfaces"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"// A generic function that works with any type implementing an interface\nfunc PrintAreas[T Shape](shapes []T) {\n    for _, shape := range shapes {\n        fmt.Println(shape.Area())\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"key-points-1",children:"Key Points"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Generics use type parameters in square brackets: ",(0,t.jsx)(n.code,{children:"[T any]"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Constraints (like ",(0,t.jsx)(n.code,{children:"comparable"}),", ",(0,t.jsx)(n.code,{children:"any"}),", or custom interfaces) restrict which types can be used."]}),"\n",(0,t.jsx)(n.li,{children:"Generics improve code reuse and type safety, especially for data structures and algorithms."}),"\n",(0,t.jsx)(n.li,{children:"Generics and interfaces can be combined for maximum flexibility."}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>c});var r=i(96540);const t={},a=r.createContext(t);function s(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);