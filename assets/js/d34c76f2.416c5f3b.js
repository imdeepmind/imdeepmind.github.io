"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[2680],{13807:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>p,frontMatter:()=>l,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"programming/programming-languages/javascript/data-types","title":"Data Types","description":"JavaScript is a dynamically typed language, which means variables are not bound to specific data types. However, it still categorizes values into distinct data types, broadly divided into primitive and non-primitive types.","source":"@site/docs/programming/programming-languages/javascript/data-types.md","sourceDirName":"programming/programming-languages/javascript","slug":"/programming/programming-languages/javascript/data-types","permalink":"/docs/programming/programming-languages/javascript/data-types","draft":false,"unlisted":false,"editUrl":"https://github.com/imdeepmind/imdeepmind.github.io/blob/main/docs/programming/programming-languages/javascript/data-types.md","tags":[],"version":"current","lastUpdatedBy":"Abhishek Chatterjee","lastUpdatedAt":1749211863000,"sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Variables","permalink":"/docs/programming/programming-languages/javascript/variables"},"next":{"title":"Mutation and Immutability","permalink":"/docs/programming/programming-languages/javascript/mutation"}}');var s=i(74848),r=i(28453);const l={sidebar_position:3},t="Data Types",c={},d=[{value:"Primitive Data Types",id:"primitive-data-types",level:2},{value:"Number",id:"number",level:3},{value:"BigInt",id:"bigint",level:3},{value:"String",id:"string",level:3},{value:"Boolean",id:"boolean",level:3},{value:"Undefined",id:"undefined",level:3},{value:"Null",id:"null",level:3},{value:"Symbol",id:"symbol",level:3},{value:"Non-Primitive Data Types",id:"non-primitive-data-types",level:2},{value:"Object",id:"object",level:3},{value:"Array",id:"array",level:3},{value:"Function",id:"function",level:3},{value:"Date, Set, Map, WeakSet, WeakMap",id:"date-set-map-weakset-weakmap",level:3},{value:"Type Coercion",id:"type-coercion",level:2},{value:"Checking Data Types",id:"checking-data-types",level:2},{value:"<code>typeof</code> Operator",id:"typeof-operator",level:3},{value:"<code>instanceof</code> Operator",id:"instanceof-operator",level:3},{value:"<code>Array.isArray</code> Method",id:"arrayisarray-method",level:3},{value:"Summary",id:"summary",level:2}];function o(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"data-types",children:"Data Types"})}),"\n",(0,s.jsxs)(n.p,{children:["JavaScript is a dynamically typed language, which means variables are not bound to specific data types. However, it still categorizes values into distinct data types, broadly divided into ",(0,s.jsx)(n.em,{children:"primitive"})," and ",(0,s.jsx)(n.em,{children:"non-primitive"})," types."]}),"\n",(0,s.jsx)(n.h2,{id:"primitive-data-types",children:"Primitive Data Types"}),"\n",(0,s.jsx)(n.p,{children:"Primitive data types are immutable and represent a single value. There are seven primitive data types in JavaScript:"}),"\n",(0,s.jsx)(n.h3,{id:"number",children:"Number"}),"\n",(0,s.jsx)(n.p,{children:"Represents numeric values, both integer and floating-point numbers. JavaScript uses double-precision 64-bit format (IEEE 754) for numbers."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Examples:","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"let integer = 42;\nlet float = 3.14;\nlet negative = -10;\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Special numeric values:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Infinity"})," and ",(0,s.jsx)(n.code,{children:"-Infinity"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"console.log(1 / 0); // Infinity\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"NaN"})," (Not-a-Number)","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"console.log(Math.sqrt(-1)); // NaN\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"bigint",children:"BigInt"}),"\n",(0,s.jsx)(n.p,{children:"Used to represent integers of arbitrary length."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Syntax:","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"let bigInt = 1234567890123456789012345678901234567890n;\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Operations with BigInt and Number are not allowed:","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"let sum = bigInt + 10n; // Works\nlet invalid = bigInt + 10; // TypeError\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"string",children:"String"}),"\n",(0,s.jsxs)(n.p,{children:["Represents textual data enclosed within single (",(0,s.jsx)(n.code,{children:"'"}),"), double (",(0,s.jsx)(n.code,{children:'"'}),"), or template literals (",(0,s.jsx)(n.code,{children:"`"}),")."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Examples:","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'let single = "Hello";\nlet double = "World";\nlet template = `Sum: ${5 + 10}`; // Template literal\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"boolean",children:"Boolean"}),"\n",(0,s.jsxs)(n.p,{children:["Represents logical values: ",(0,s.jsx)(n.code,{children:"true"})," or ",(0,s.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Examples:","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"let isTrue = true;\nlet isFalse = false;\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"undefined",children:"Undefined"}),"\n",(0,s.jsx)(n.p,{children:"Indicates a variable has been declared but not assigned a value."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Example:","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"let unassigned;\nconsole.log(unassigned); // undefined\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"null",children:"Null"}),"\n",(0,s.jsx)(n.p,{children:"Represents the intentional absence of any object value."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Example:","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"let empty = null;\nconsole.log(empty); // null\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"symbol",children:"Symbol"}),"\n",(0,s.jsx)(n.p,{children:"Introduced in ES6, used to create unique and immutable identifiers."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Example:","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'let sym1 = Symbol("description");\nlet sym2 = Symbol("description");\nconsole.log(sym1 === sym2); // false\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"non-primitive-data-types",children:"Non-Primitive Data Types"}),"\n",(0,s.jsx)(n.p,{children:"Non-primitive types are mutable and include objects, arrays, and functions."}),"\n",(0,s.jsx)(n.h3,{id:"object",children:"Object"}),"\n",(0,s.jsx)(n.p,{children:"An object is a collection of key-value pairs, where keys are strings (or Symbols) and values can be of any type."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Example:","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'let person = {\n  name: "John",\n  age: 30,\n  greet: function () {\n    console.log("Hello");\n  },\n};\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"array",children:"Array"}),"\n",(0,s.jsx)(n.p,{children:"A type of object used to store ordered lists of values. Arrays are zero-indexed."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Example:","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'let fruits = ["Apple", "Banana", "Cherry"];\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"function",children:"Function"}),"\n",(0,s.jsx)(n.p,{children:"Functions are first-class objects, meaning they can be assigned to variables, passed as arguments, and returned from other functions."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Example:","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function add(a, b) {\n  return a + b;\n}\nlet subtract = (a, b) => a - b;\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"date-set-map-weakset-weakmap",children:"Date, Set, Map, WeakSet, WeakMap"}),"\n",(0,s.jsx)(n.p,{children:"JavaScript includes several built-in objects for more specialized purposes:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Date"}),": For handling dates and times.","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"let now = new Date();\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Set"}),": For storing unique values.","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"let unique = new Set([1, 2, 2, 3]);\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Map"}),": For key-value pairs with any data type as keys.","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'let map = new Map();\nmap.set("key", "value");\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"WeakSet"})," and ",(0,s.jsx)(n.strong,{children:"WeakMap"}),": Similar to Set and Map but allow garbage collection of unused entries."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"type-coercion",children:"Type Coercion"}),"\n",(0,s.jsx)(n.p,{children:"JavaScript performs implicit type conversion (coercion) in certain operations:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Example:","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"console.log(\"5\" - 3); // 2 (string '5' is coerced to number)\nconsole.log(\"5\" + 3); // '53' (number 3 is coerced to string)\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"checking-data-types",children:"Checking Data Types"}),"\n",(0,s.jsx)(n.p,{children:"To determine the type of a value, use:"}),"\n",(0,s.jsxs)(n.h3,{id:"typeof-operator",children:[(0,s.jsx)(n.code,{children:"typeof"})," Operator"]}),"\n",(0,s.jsx)(n.p,{children:"Returns the type of a value as a string."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Examples:","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'console.log(typeof 42); // "number"\nconsole.log(typeof null); // "object" (quirk in JavaScript)\nconsole.log(typeof undefined); // "undefined"\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"instanceof-operator",children:[(0,s.jsx)(n.code,{children:"instanceof"})," Operator"]}),"\n",(0,s.jsx)(n.p,{children:"Checks if an object is an instance of a specific class or constructor."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Example:","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"console.log([] instanceof Array); // true\nconsole.log({} instanceof Object); // true\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"arrayisarray-method",children:[(0,s.jsx)(n.code,{children:"Array.isArray"})," Method"]}),"\n",(0,s.jsx)(n.p,{children:"Used to check if a value is an array."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Example:","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"console.log(Array.isArray([])); // true\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Primitive types"}),": Immutable, single values like ",(0,s.jsx)(n.code,{children:"Number"}),", ",(0,s.jsx)(n.code,{children:"String"}),", and ",(0,s.jsx)(n.code,{children:"Boolean"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Non-primitive types"}),": Mutable, complex types like ",(0,s.jsx)(n.code,{children:"Object"}),", ",(0,s.jsx)(n.code,{children:"Array"}),", and ",(0,s.jsx)(n.code,{children:"Function"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.code,{children:"typeof"}),", ",(0,s.jsx)(n.code,{children:"instanceof"}),", and ",(0,s.jsx)(n.code,{children:"Array.isArray"})," for type checking."]}),"\n",(0,s.jsx)(n.li,{children:"JavaScript's type system supports flexibility but requires careful handling to avoid bugs due to coercion or type mismatches."}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>t});var a=i(96540);const s={},r=a.createContext(s);function l(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);