"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[186],{799:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"system-design/fundamental-concepts/fault-tolarance","title":"Fault Tolerance","description":"Fault tolerance is the ability of a system to continue operating properly in the event of a failure of one or more of its components.","source":"@site/docs/system-design/fundamental-concepts/fault-tolarance.md","sourceDirName":"system-design/fundamental-concepts","slug":"/system-design/fundamental-concepts/fault-tolarance","permalink":"/docs/system-design/fundamental-concepts/fault-tolarance","draft":false,"unlisted":false,"editUrl":"https://github.com/imdeepmind/imdeepmind.github.io/tree/main/packages/create-docusaurus/templates/shared/docs/system-design/fundamental-concepts/fault-tolarance.md","tags":[],"version":"current","lastUpdatedBy":"Abhishek Chatterjee","lastUpdatedAt":1734191566000,"sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Reliability","permalink":"/docs/system-design/fundamental-concepts/reliability"},"next":{"title":"CAP Theorem","permalink":"/docs/system-design/fundamental-concepts/cap-theorem"}}');var i=t(4848),a=t(8453);const r={sidebar_position:5},l="Fault Tolerance",o={},c=[{value:"Key Concepts:",id:"key-concepts",level:2},{value:"Fault Tolerance Techniques:",id:"fault-tolerance-techniques",level:2}];function d(e){const n={h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"fault-tolerance",children:"Fault Tolerance"})}),"\n",(0,i.jsx)(n.p,{children:"Fault tolerance is the ability of a system to continue operating properly in the event of a failure of one or more of its components."}),"\n",(0,i.jsx)(n.h2,{id:"key-concepts",children:"Key Concepts:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Redundancy:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Incorporating duplicate components (e.g., multiple instances of a service) to take over if one fails."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Replication:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Copying data across multiple nodes to ensure it remains available and consistent despite node failures."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Graceful Degradation:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Allowing the system to operate in a reduced capacity rather than failing completely (e.g., serving cached data)."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Failover Systems:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Automatically switching to a backup system in case of a primary system failure."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"fault-tolerance-techniques",children:"Fault Tolerance Techniques:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Active-Active Systems:"})," All systems are actively serving requests, providing load balancing and redundancy."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Active-Passive Systems:"})," A standby system is kept ready to take over if the active system fails."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Error Detection and Recovery:"})," Mechanisms like checksums and retries ensure errors are identified and corrected."]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var s=t(6540);const i={},a=s.createContext(i);function r(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);