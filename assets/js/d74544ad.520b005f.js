"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[3206],{45854:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"design-patterns/introduction","title":"Introduction","description":"Design Patterns are reusable solutions to common problems in software design. The Gang of Four (GoF)\u2014Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides\u2014introduced 23 classic design patterns in their book \\"Design Patterns: Elements of Reusable Object-Oriented Software\\" (1994).","source":"@site/docs/design-patterns/introduction.md","sourceDirName":"design-patterns","slug":"/design-patterns/introduction","permalink":"/docs/design-patterns/introduction","draft":false,"unlisted":false,"editUrl":"https://github.com/imdeepmind/imdeepmind.github.io/blob/main/docs/design-patterns/introduction.md","tags":[],"version":"current","lastUpdatedBy":"Abhishek Chatterjee","lastUpdatedAt":1745242793000,"sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Stashing in Git","permalink":"/docs/version-control/git/stashing"},"next":{"title":"SOLD","permalink":"/docs/design-patterns/solid"}}');var t=r(74848),i=r(28453);const l={sidebar_position:1},o="Introduction",a={},d=[{value:"Creational Design Patterns",id:"creational-design-patterns",level:2},{value:"Singleton Pattern",id:"singleton-pattern",level:3},{value:"When to use",id:"when-to-use",level:4},{value:"Python Example",id:"python-example",level:4},{value:"Pros &amp; Cons",id:"pros--cons",level:4},{value:"Factory Method Pattern",id:"factory-method-pattern",level:3},{value:"When to use",id:"when-to-use-1",level:4},{value:"Python Example",id:"python-example-1",level:4},{value:"Pros &amp; Cons",id:"pros--cons-1",level:4},{value:"Abstract Factory Pattern",id:"abstract-factory-pattern",level:3},{value:"When to use",id:"when-to-use-2",level:4},{value:"Python Example",id:"python-example-2",level:4},{value:"Pros &amp; Cons",id:"pros--cons-2",level:4},{value:"Builder Pattern",id:"builder-pattern",level:3},{value:"When to use",id:"when-to-use-3",level:4},{value:"Python Example",id:"python-example-3",level:4},{value:"Pros &amp; Cons",id:"pros--cons-3",level:4},{value:"Prototype Pattern",id:"prototype-pattern",level:3},{value:"When to use",id:"when-to-use-4",level:4},{value:"Python Example",id:"python-example-4",level:4},{value:"Pros &amp; Cons",id:"pros--cons-4",level:4},{value:"Summary Table",id:"summary-table",level:3},{value:"Structural Design Patterns",id:"structural-design-patterns",level:2},{value:"Adapter Pattern",id:"adapter-pattern",level:3},{value:"When to use",id:"when-to-use-5",level:4},{value:"Python Example",id:"python-example-5",level:4},{value:"Pros &amp; Cons",id:"pros--cons-5",level:4},{value:"Decorator Pattern",id:"decorator-pattern",level:3},{value:"When to use",id:"when-to-use-6",level:4},{value:"Python Example",id:"python-example-6",level:4},{value:"Pros &amp; Cons",id:"pros--cons-6",level:4},{value:"Facade Pattern",id:"facade-pattern",level:3},{value:"When to use",id:"when-to-use-7",level:4},{value:"Python Example",id:"python-example-7",level:4},{value:"Pros &amp; Cons",id:"pros--cons-7",level:4},{value:"Proxy Pattern",id:"proxy-pattern",level:3},{value:"When to use",id:"when-to-use-8",level:4},{value:"Python Example",id:"python-example-8",level:4},{value:"Pros &amp; Cons",id:"pros--cons-8",level:4},{value:"Composite Pattern",id:"composite-pattern",level:3},{value:"When to use",id:"when-to-use-9",level:4},{value:"Python Example",id:"python-example-9",level:4},{value:"Pros &amp; Cons",id:"pros--cons-9",level:4},{value:"Bridge Pattern",id:"bridge-pattern",level:3},{value:"When to use",id:"when-to-use-10",level:4},{value:"Python Example",id:"python-example-10",level:4},{value:"Pros &amp; Cons",id:"pros--cons-10",level:4},{value:"Summary Table",id:"summary-table-1",level:3},{value:"Behavioral Design Patterns",id:"behavioral-design-patterns",level:2},{value:"Observer Pattern",id:"observer-pattern",level:3},{value:"When to use",id:"when-to-use-11",level:4},{value:"Python Example",id:"python-example-11",level:4},{value:"Pros &amp; Cons",id:"pros--cons-11",level:4},{value:"Strategy Pattern",id:"strategy-pattern",level:3},{value:"When to use",id:"when-to-use-12",level:4},{value:"Python Example",id:"python-example-12",level:4},{value:"Pros &amp; Cons",id:"pros--cons-12",level:4},{value:"Command Pattern",id:"command-pattern",level:3},{value:"When to use",id:"when-to-use-13",level:4},{value:"Python Example",id:"python-example-13",level:4},{value:"Pros &amp; Cons",id:"pros--cons-13",level:4},{value:"Iterator Pattern",id:"iterator-pattern",level:3},{value:"When to use",id:"when-to-use-14",level:4},{value:"Python Example",id:"python-example-14",level:4},{value:"Pros &amp; Cons",id:"pros--cons-14",level:4},{value:"State Pattern",id:"state-pattern",level:3},{value:"When to use",id:"when-to-use-15",level:4},{value:"Python Example",id:"python-example-15",level:4},{value:"Pros &amp; Cons",id:"pros--cons-15",level:4},{value:"Template Method Pattern",id:"template-method-pattern",level:3},{value:"When to use",id:"when-to-use-16",level:4},{value:"Python Example",id:"python-example-16",level:4},{value:"Pros &amp; Cons",id:"pros--cons-16",level:4},{value:"Chain of Responsibility",id:"chain-of-responsibility",level:3},{value:"When to use",id:"when-to-use-17",level:4},{value:"Python Example",id:"python-example-17",level:4},{value:"Pros &amp; Cons",id:"pros--cons-17",level:4},{value:"Summary Table",id:"summary-table-2",level:3}];function c(e){const n={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"introduction",children:"Introduction"})}),"\n",(0,t.jsx)(n.p,{children:'Design Patterns are reusable solutions to common problems in software design. The Gang of Four (GoF)\u2014Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides\u2014introduced 23 classic design patterns in their book "Design Patterns: Elements of Reusable Object-Oriented Software" (1994).'}),"\n",(0,t.jsx)(n.p,{children:"These patterns are categorized into three main types:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Creational"})," \u2013 Deal with object creation mechanisms."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Structural"})," \u2013 Concerned with object composition and relationships."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Behavioral"})," \u2013 Define communication between objects."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"creational-design-patterns",children:"Creational Design Patterns"}),"\n",(0,t.jsxs)(n.p,{children:["Creational design patterns deal with ",(0,t.jsx)(n.strong,{children:"object creation mechanisms"}),", trying to create objects in a manner suitable to the situation. They help make a system ",(0,t.jsx)(n.strong,{children:"independent of how its objects are created, composed, and represented"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"singleton-pattern",children:"Singleton Pattern"}),"\n",(0,t.jsxs)(n.p,{children:["Ensures that a class has ",(0,t.jsx)(n.strong,{children:"only one instance"})," and provides a ",(0,t.jsx)(n.strong,{children:"global point of access"})," to it."]}),"\n",(0,t.jsx)(n.h4,{id:"when-to-use",children:"When to use"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"When exactly one instance of a class is needed (e.g., database connection, logging service)."}),"\n",(0,t.jsx)(n.li,{children:"To control shared resources."}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"python-example",children:"Python Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'class Singleton:\r\n    _instance = None  # Class-level variable to store the single instance\r\n\r\n    def __new__(cls):\r\n        """Override __new__ to control instance creation."""\r\n        if cls._instance is None:\r\n            cls._instance = super().__new__(cls)\r\n        return cls._instance\r\n\r\n# Usage\r\ns1 = Singleton()\r\ns2 = Singleton()\r\nprint(s1 is s2)  # True (Both variables point to the same instance)\n'})}),"\n",(0,t.jsx)(n.h4,{id:"pros--cons",children:"Pros & Cons"}),"\n",(0,t.jsxs)(n.p,{children:["\u2705 ",(0,t.jsx)(n.strong,{children:"Memory efficient"})," (only one instance exists)",(0,t.jsx)(n.br,{}),"\n","\u274c ",(0,t.jsx)(n.strong,{children:"Global state"})," (can make testing harder)"]}),"\n",(0,t.jsx)(n.h3,{id:"factory-method-pattern",children:"Factory Method Pattern"}),"\n",(0,t.jsxs)(n.p,{children:["Defines an ",(0,t.jsx)(n.strong,{children:"interface for creating objects"}),", but lets ",(0,t.jsx)(n.strong,{children:"subclasses decide which class to instantiate"}),"."]}),"\n",(0,t.jsx)(n.h4,{id:"when-to-use-1",children:"When to use"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"When a class can't anticipate the type of objects it needs to create."}),"\n",(0,t.jsx)(n.li,{children:"When you want to delegate instantiation to subclasses."}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"python-example-1",children:"Python Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from abc import ABC, abstractmethod\r\n\r\nclass Vehicle(ABC):\r\n    """Abstract base class for vehicles."""\r\n    @abstractmethod\r\n    def drive(self):\r\n        pass\r\n\r\nclass Car(Vehicle):\r\n    def drive(self):\r\n        return "Driving a car!"\r\n\r\nclass Bike(Vehicle):\r\n    def drive(self):\r\n        return "Riding a bike!"\r\n\r\nclass VehicleFactory(ABC):\r\n    """Abstract factory that defines the factory method."""\r\n    @abstractmethod\r\n    def create_vehicle(self) -> Vehicle:\r\n        pass\r\n\r\nclass CarFactory(VehicleFactory):\r\n    """Concrete factory for creating cars."""\r\n    def create_vehicle(self) -> Vehicle:\r\n        return Car()\r\n\r\nclass BikeFactory(VehicleFactory):\r\n    """Concrete factory for creating bikes."""\r\n    def create_vehicle(self) -> Vehicle:\r\n        return Bike()\r\n\r\n# Usage\r\ncar_factory = CarFactory()\r\ncar = car_factory.create_vehicle()\r\nprint(car.drive())  # Output: "Driving a car!"\n'})}),"\n",(0,t.jsx)(n.h4,{id:"pros--cons-1",children:"Pros & Cons"}),"\n",(0,t.jsxs)(n.p,{children:["\u2705 ",(0,t.jsx)(n.strong,{children:"Loose coupling"})," (client code doesn\u2019t depend on concrete classes)",(0,t.jsx)(n.br,{}),"\n","\u274c ",(0,t.jsx)(n.strong,{children:"Can lead to many subclasses"})]}),"\n",(0,t.jsx)(n.h3,{id:"abstract-factory-pattern",children:"Abstract Factory Pattern"}),"\n",(0,t.jsxs)(n.p,{children:["Provides an ",(0,t.jsx)(n.strong,{children:"interface for creating families of related objects"})," without specifying their concrete classes."]}),"\n",(0,t.jsx)(n.h4,{id:"when-to-use-2",children:"When to use"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["When a system needs to be ",(0,t.jsx)(n.strong,{children:"independent of how its products are created"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["When working with ",(0,t.jsx)(n.strong,{children:"multiple product families"})," (e.g., UI components for different OS)."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"python-example-2",children:"Python Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from abc import ABC, abstractmethod\r\n\r\n# Abstract Products\r\nclass Button(ABC):\r\n    @abstractmethod\r\n    def render(self):\r\n        pass\r\n\r\nclass Checkbox(ABC):\r\n    @abstractmethod\r\n    def render(self):\r\n        pass\r\n\r\n# Concrete Products (Windows)\r\nclass WindowsButton(Button):\r\n    def render(self):\r\n        return "Windows Button"\r\n\r\nclass WindowsCheckbox(Checkbox):\r\n    def render(self):\r\n        return "Windows Checkbox"\r\n\r\n# Concrete Products (Mac)\r\nclass MacButton(Button):\r\n    def render(self):\r\n        return "Mac Button"\r\n\r\nclass MacCheckbox(Checkbox):\r\n    def render(self):\r\n        return "Mac Checkbox"\r\n\r\n# Abstract Factory\r\nclass GUIFactory(ABC):\r\n    @abstractmethod\r\n    def create_button(self) -> Button:\r\n        pass\r\n\r\n    @abstractmethod\r\n    def create_checkbox(self) -> Checkbox:\r\n        pass\r\n\r\n# Concrete Factories\r\nclass WindowsFactory(GUIFactory):\r\n    def create_button(self) -> Button:\r\n        return WindowsButton()\r\n\r\n    def create_checkbox(self) -> Checkbox:\r\n        return WindowsCheckbox()\r\n\r\nclass MacFactory(GUIFactory):\r\n    def create_button(self) -> Button:\r\n        return MacButton()\r\n\r\n    def create_checkbox(self) -> Checkbox:\r\n        return MacCheckbox()\r\n\r\n# Usage\r\ndef create_ui(factory: GUIFactory):\r\n    button = factory.create_button()\r\n    checkbox = factory.create_checkbox()\r\n    print(button.render(), checkbox.render())\r\n\r\n# Create Windows UI\r\ncreate_ui(WindowsFactory())  # Output: "Windows Button Windows Checkbox"\r\n\r\n# Create Mac UI\r\ncreate_ui(MacFactory())  # Output: "Mac Button Mac Checkbox"\n'})}),"\n",(0,t.jsx)(n.h4,{id:"pros--cons-2",children:"Pros & Cons"}),"\n",(0,t.jsxs)(n.p,{children:["\u2705 ",(0,t.jsx)(n.strong,{children:"Ensures product compatibility"}),(0,t.jsx)(n.br,{}),"\n","\u274c ",(0,t.jsx)(n.strong,{children:"Complex to implement"})]}),"\n",(0,t.jsx)(n.h3,{id:"builder-pattern",children:"Builder Pattern"}),"\n",(0,t.jsxs)(n.p,{children:["Separates the ",(0,t.jsx)(n.strong,{children:"construction of a complex object"})," from its representation, allowing the same construction process to create different representations."]}),"\n",(0,t.jsx)(n.h4,{id:"when-to-use-3",children:"When to use"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["When an object has ",(0,t.jsx)(n.strong,{children:"many optional parameters"})," (e.g., configuring a complex object)."]}),"\n",(0,t.jsxs)(n.li,{children:["When you want to ",(0,t.jsx)(n.strong,{children:"avoid telescoping constructors"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"python-example-3",children:"Python Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'class Pizza:\r\n    def __init__(self):\r\n        self.crust = None\r\n        self.sauce = None\r\n        self.toppings = []\r\n\r\n    def __str__(self):\r\n        return f"Pizza: {self.crust} crust, {self.sauce} sauce, toppings: {\', \'.join(self.toppings)}"\r\n\r\nclass PizzaBuilder:\r\n    def __init__(self):\r\n        self.pizza = Pizza()\r\n\r\n    def set_crust(self, crust):\r\n        self.pizza.crust = crust\r\n        return self  # Return self for method chaining\r\n\r\n    def set_sauce(self, sauce):\r\n        self.pizza.sauce = sauce\r\n        return self\r\n\r\n    def add_topping(self, topping):\r\n        self.pizza.toppings.append(topping)\r\n        return self\r\n\r\n    def build(self):\r\n        return self.pizza\r\n\r\n# Usage\r\nbuilder = PizzaBuilder()\r\npizza = (builder.set_crust("thin")\r\n               .set_sauce("tomato")\r\n               .add_topping("cheese")\r\n               .add_topping("mushrooms")\r\n               .build())\r\n\r\nprint(pizza)  # Output: "Pizza: thin crust, tomato sauce, toppings: cheese, mushrooms"\n'})}),"\n",(0,t.jsx)(n.h4,{id:"pros--cons-3",children:"Pros & Cons"}),"\n",(0,t.jsxs)(n.p,{children:["\u2705 ",(0,t.jsx)(n.strong,{children:"Flexible object construction"}),(0,t.jsx)(n.br,{}),"\n","\u274c ",(0,t.jsx)(n.strong,{children:"Slightly verbose for simple objects"})]}),"\n",(0,t.jsx)(n.h3,{id:"prototype-pattern",children:"Prototype Pattern"}),"\n",(0,t.jsxs)(n.p,{children:["Creates new objects by ",(0,t.jsx)(n.strong,{children:"cloning an existing object"})," (prototype) instead of creating new instances from scratch."]}),"\n",(0,t.jsx)(n.h4,{id:"when-to-use-4",children:"When to use"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["When object creation is ",(0,t.jsx)(n.strong,{children:"expensive"})," (e.g., database calls, complex computations)."]}),"\n",(0,t.jsxs)(n.li,{children:["When you need ",(0,t.jsx)(n.strong,{children:"similar objects with slight variations"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"python-example-4",children:"Python Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import copy\r\n\r\nclass Prototype:\r\n    def clone(self):\r\n        """Deep copy the object to create a new instance."""\r\n        return copy.deepcopy(self)\r\n\r\nclass Car(Prototype):\r\n    def __init__(self, model, color):\r\n        self.model = model\r\n        self.color = color\r\n\r\n    def __str__(self):\r\n        return f"{self.color} {self.model}"\r\n\r\n# Usage\r\noriginal_car = Car("Tesla Model S", "Red")\r\ncloned_car = original_car.clone()\r\n\r\nprint(original_car)  # Output: "Red Tesla Model S"\r\nprint(cloned_car)    # Output: "Red Tesla Model S"\r\n\r\n# Modify the clone\r\ncloned_car.color = "Blue"\r\nprint(cloned_car)    # Output: "Blue Tesla Model S" (Original remains unchanged)\n'})}),"\n",(0,t.jsx)(n.h4,{id:"pros--cons-4",children:"Pros & Cons"}),"\n",(0,t.jsxs)(n.p,{children:["\u2705 ",(0,t.jsx)(n.strong,{children:"Performance boost"})," (avoids expensive initialization)",(0,t.jsx)(n.br,{}),"\n","\u274c ",(0,t.jsx)(n.strong,{children:"Deep vs. shallow copy issues"})]}),"\n",(0,t.jsx)(n.h3,{id:"summary-table",children:"Summary Table"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Pattern"}),(0,t.jsx)(n.th,{children:"Purpose"}),(0,t.jsx)(n.th,{children:"Use Case"}),(0,t.jsx)(n.th,{children:"Pros"}),(0,t.jsx)(n.th,{children:"Cons"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Singleton"})}),(0,t.jsx)(n.td,{children:"Single instance"}),(0,t.jsx)(n.td,{children:"Logging, DB connections"}),(0,t.jsx)(n.td,{children:"Memory efficient"}),(0,t.jsx)(n.td,{children:"Global state"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Factory Method"})}),(0,t.jsx)(n.td,{children:"Delegate instantiation"}),(0,t.jsx)(n.td,{children:"Frameworks"}),(0,t.jsx)(n.td,{children:"Loose coupling"}),(0,t.jsx)(n.td,{children:"Many subclasses"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Abstract Factory"})}),(0,t.jsx)(n.td,{children:"Families of objects"}),(0,t.jsx)(n.td,{children:"Cross-platform UI"}),(0,t.jsx)(n.td,{children:"Product compatibility"}),(0,t.jsx)(n.td,{children:"Complex"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Builder"})}),(0,t.jsx)(n.td,{children:"Complex object creation"}),(0,t.jsx)(n.td,{children:"Configurable objects"}),(0,t.jsx)(n.td,{children:"Flexible"}),(0,t.jsx)(n.td,{children:"Verbose"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Prototype"})}),(0,t.jsx)(n.td,{children:"Clone objects"}),(0,t.jsx)(n.td,{children:"Expensive initialization"}),(0,t.jsx)(n.td,{children:"Performance boost"}),(0,t.jsx)(n.td,{children:"Copy issues"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"structural-design-patterns",children:"Structural Design Patterns"}),"\n",(0,t.jsxs)(n.p,{children:["Structural patterns deal with ",(0,t.jsx)(n.strong,{children:"object composition"})," - how classes and objects are combined to form larger structures. They help ensure that when one part of a system changes, the entire structure doesn't need to change."]}),"\n",(0,t.jsx)(n.h3,{id:"adapter-pattern",children:"Adapter Pattern"}),"\n",(0,t.jsxs)(n.p,{children:["Allows ",(0,t.jsx)(n.strong,{children:"incompatible interfaces"})," to work together by converting the interface of one class into another interface clients expect."]}),"\n",(0,t.jsx)(n.h4,{id:"when-to-use-5",children:"When to use"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"When you need to integrate a new component with an existing system that expects a different interface"}),"\n",(0,t.jsx)(n.li,{children:"When working with legacy code or third-party libraries"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"python-example-5",children:"Python Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Old incompatible class\r\nclass OldPrinter:\r\n    def print_document(self):\r\n        print("Printing using old printer")\r\n\r\n# New expected interface\r\nclass NewPrinterInterface(ABC):\r\n    @abstractmethod\r\n    def print(self):\r\n        pass\r\n\r\n# Adapter that makes OldPrinter compatible with NewPrinterInterface\r\nclass PrinterAdapter(NewPrinterInterface):\r\n    def __init__(self, old_printer: OldPrinter):\r\n        self.old_printer = old_printer\r\n\r\n    def print(self):\r\n        self.old_printer.print_document()\r\n\r\n# Usage\r\nold_printer = OldPrinter()\r\nadapter = PrinterAdapter(old_printer)\r\nadapter.print()  # Output: "Printing using old printer"\n'})}),"\n",(0,t.jsx)(n.h4,{id:"pros--cons-5",children:"Pros & Cons"}),"\n",(0,t.jsxs)(n.p,{children:["\u2705 ",(0,t.jsx)(n.strong,{children:"Enables reusability of existing code"}),"\r\n\u274c ",(0,t.jsx)(n.strong,{children:"Can increase complexity with many adapters"})]}),"\n",(0,t.jsx)(n.h3,{id:"decorator-pattern",children:"Decorator Pattern"}),"\n",(0,t.jsxs)(n.p,{children:["Dynamically ",(0,t.jsx)(n.strong,{children:"adds responsibilities"})," to objects without changing their class. Provides a flexible alternative to subclassing."]}),"\n",(0,t.jsx)(n.h4,{id:"when-to-use-6",children:"When to use"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"When you need to add functionality to objects at runtime"}),"\n",(0,t.jsx)(n.li,{children:"When subclassing would lead to an explosion of classes"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"python-example-6",children:"Python Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"class Coffee:\r\n    def cost(self):\r\n        return 5\r\n\r\nclass MilkDecorator:\r\n    def __init__(self, coffee):\r\n        self._coffee = coffee\r\n\r\n    def cost(self):\r\n        return self._coffee.cost() + 2\r\n\r\nclass SugarDecorator:\r\n    def __init__(self, coffee):\r\n        self._coffee = coffee\r\n\r\n    def cost(self):\r\n        return self._coffee.cost() + 1\r\n\r\n# Usage\r\nsimple_coffee = Coffee()\r\nprint(simple_coffee.cost())  # 5\r\n\r\nmilk_coffee = MilkDecorator(simple_coffee)\r\nprint(milk_coffee.cost())  # 7\r\n\r\nsweet_milk_coffee = SugarDecorator(milk_coffee)\r\nprint(sweet_milk_coffee.cost())  # 8\n"})}),"\n",(0,t.jsx)(n.h4,{id:"pros--cons-6",children:"Pros & Cons"}),"\n",(0,t.jsxs)(n.p,{children:["\u2705 ",(0,t.jsx)(n.strong,{children:"More flexible than inheritance"}),"\r\n\u274c ",(0,t.jsx)(n.strong,{children:"Can result in many small objects"})]}),"\n",(0,t.jsx)(n.h3,{id:"facade-pattern",children:"Facade Pattern"}),"\n",(0,t.jsxs)(n.p,{children:["Provides a ",(0,t.jsx)(n.strong,{children:"simplified interface"})," to a complex subsystem. Hides implementation details behind a unified interface."]}),"\n",(0,t.jsx)(n.h4,{id:"when-to-use-7",children:"When to use"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"When you need to provide a simple interface to a complex system"}),"\n",(0,t.jsx)(n.li,{children:"To decouple client code from subsystem components"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"python-example-7",children:"Python Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'class CPU:\r\n    def start(self):\r\n        print("Starting CPU")\r\n\r\nclass Memory:\r\n    def load(self):\r\n        print("Loading memory")\r\n\r\nclass HardDrive:\r\n    def read(self):\r\n        print("Reading from hard drive")\r\n\r\nclass ComputerFacade:\r\n    def __init__(self):\r\n        self.cpu = CPU()\r\n        self.memory = Memory()\r\n        self.hard_drive = HardDrive()\r\n\r\n    def start(self):\r\n        self.cpu.start()\r\n        self.memory.load()\r\n        self.hard_drive.read()\r\n\r\n# Usage\r\ncomputer = ComputerFacade()\r\ncomputer.start()\r\n# Output:\r\n# Starting CPU\r\n# Loading memory\r\n# Reading from hard drive\n'})}),"\n",(0,t.jsx)(n.h4,{id:"pros--cons-7",children:"Pros & Cons"}),"\n",(0,t.jsxs)(n.p,{children:["\u2705 ",(0,t.jsx)(n.strong,{children:"Reduces complexity for clients"}),"\r\n\u274c ",(0,t.jsx)(n.strong,{children:'Can become a "god object"'})]}),"\n",(0,t.jsx)(n.h3,{id:"proxy-pattern",children:"Proxy Pattern"}),"\n",(0,t.jsxs)(n.p,{children:["Provides a ",(0,t.jsx)(n.strong,{children:"surrogate or placeholder"})," for another object to control access to it."]}),"\n",(0,t.jsx)(n.h4,{id:"when-to-use-8",children:"When to use"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"For lazy initialization"}),"\n",(0,t.jsx)(n.li,{children:"Access control (protection proxy)"}),"\n",(0,t.jsx)(n.li,{children:"Remote object handling (remote proxy)"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"python-example-8",children:"Python Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'class RealImage:\r\n    def __init__(self, filename):\r\n        self.filename = filename\r\n        self._load_from_disk()\r\n\r\n    def _load_from_disk(self):\r\n        print(f"Loading {self.filename}")\r\n\r\n    def display(self):\r\n        print(f"Displaying {self.filename}")\r\n\r\nclass ImageProxy:\r\n    def __init__(self, filename):\r\n        self.filename = filename\r\n        self.real_image = None\r\n\r\n    def display(self):\r\n        if self.real_image is None:\r\n            self.real_image = RealImage(self.filename)\r\n        self.real_image.display()\r\n\r\n# Usage\r\nimage = ImageProxy("test.jpg")\r\n# Image not loaded yet\r\nimage.display()\r\n# Output:\r\n# Loading test.jpg\r\n# Displaying test.jpg\n'})}),"\n",(0,t.jsx)(n.h4,{id:"pros--cons-8",children:"Pros & Cons"}),"\n",(0,t.jsxs)(n.p,{children:["\u2705 ",(0,t.jsx)(n.strong,{children:"Controls object creation"}),"\r\n\u274c ",(0,t.jsx)(n.strong,{children:"Can introduce latency"})]}),"\n",(0,t.jsx)(n.h3,{id:"composite-pattern",children:"Composite Pattern"}),"\n",(0,t.jsxs)(n.p,{children:["Composes objects into ",(0,t.jsx)(n.strong,{children:"tree structures"})," to represent part-whole hierarchies. Lets clients treat individual objects and compositions uniformly."]}),"\n",(0,t.jsx)(n.h4,{id:"when-to-use-9",children:"When to use"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"When you need to represent hierarchies of objects"}),"\n",(0,t.jsx)(n.li,{children:"When clients should ignore differences between compositions and individual objects"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"python-example-9",children:"Python Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from abc import ABC, abstractmethod\r\n\r\nclass Component(ABC):\r\n    @abstractmethod\r\n    def operation(self):\r\n        pass\r\n\r\nclass Leaf(Component):\r\n    def operation(self):\r\n        return "Leaf operation"\r\n\r\nclass Composite(Component):\r\n    def __init__(self):\r\n        self._children = []\r\n\r\n    def add(self, component: Component):\r\n        self._children.append(component)\r\n\r\n    def remove(self, component: Component):\r\n        self._children.remove(component)\r\n\r\n    def operation(self):\r\n        results = []\r\n        for child in self._children:\r\n            results.append(child.operation())\r\n        return f"Branch({\'+\'.join(results)})"\r\n\r\n# Usage\r\nleaf1 = Leaf()\r\nleaf2 = Leaf()\r\ncomposite = Composite()\r\ncomposite.add(leaf1)\r\ncomposite.add(leaf2)\r\n\r\nprint(composite.operation())  # Output: "Branch(Leaf operation+Leaf operation)"\n'})}),"\n",(0,t.jsx)(n.h4,{id:"pros--cons-9",children:"Pros & Cons"}),"\n",(0,t.jsxs)(n.p,{children:["\u2705 ",(0,t.jsx)(n.strong,{children:"Simplifies client code"}),"\r\n\u274c ",(0,t.jsx)(n.strong,{children:"Can make design overly general"})]}),"\n",(0,t.jsx)(n.h3,{id:"bridge-pattern",children:"Bridge Pattern"}),"\n",(0,t.jsx)(n.p,{children:"Decouples an abstraction from its implementation so they can vary independently. Uses composition instead of inheritance."}),"\n",(0,t.jsx)(n.h4,{id:"when-to-use-10",children:"When to use"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"When you want to avoid permanent binding between abstraction and implementation"}),"\n",(0,t.jsx)(n.li,{children:"When both abstractions and implementations should be extensible"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"python-example-10",children:"Python Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from abc import ABC, abstractmethod\r\n\r\n# Implementation interface\r\nclass Renderer(ABC):\r\n    @abstractmethod\r\n    def render_circle(self, radius):\r\n        pass\r\n\r\n# Concrete Implementations\r\nclass VectorRenderer(Renderer):\r\n    def render_circle(self, radius):\r\n        print(f"Drawing a circle of radius {radius} using vector graphics")\r\n\r\nclass RasterRenderer(Renderer):\r\n    def render_circle(self, radius):\r\n        print(f"Drawing a circle of radius {radius} using pixels")\r\n\r\n# Abstraction\r\nclass Shape:\r\n    def __init__(self, renderer: Renderer):\r\n        self.renderer = renderer\r\n\r\n    def draw(self):\r\n        pass\r\n\r\n# Refined Abstraction\r\nclass Circle(Shape):\r\n    def __init__(self, renderer: Renderer, radius):\r\n        super().__init__(renderer)\r\n        self.radius = radius\r\n\r\n    def draw(self):\r\n        self.renderer.render_circle(self.radius)\r\n\r\n# Usage\r\nvector_renderer = VectorRenderer()\r\nraster_renderer = RasterRenderer()\r\n\r\ncircle = Circle(vector_renderer, 5)\r\ncircle.draw()  # Output: "Drawing a circle of radius 5 using vector graphics"\r\n\r\ncircle = Circle(raster_renderer, 10)\r\ncircle.draw()  # Output: "Drawing a circle of radius 10 using pixels"\n'})}),"\n",(0,t.jsx)(n.h4,{id:"pros--cons-10",children:"Pros & Cons"}),"\n",(0,t.jsxs)(n.p,{children:["\u2705 ",(0,t.jsx)(n.strong,{children:"Separates platform-independent code"}),"\r\n\u274c ",(0,t.jsx)(n.strong,{children:"Increases complexity"})]}),"\n",(0,t.jsx)(n.h3,{id:"summary-table-1",children:"Summary Table"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Pattern"}),(0,t.jsx)(n.th,{children:"Purpose"}),(0,t.jsx)(n.th,{children:"Use Case"}),(0,t.jsx)(n.th,{children:"Pros"}),(0,t.jsx)(n.th,{children:"Cons"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Adapter"})}),(0,t.jsx)(n.td,{children:"Interface conversion"}),(0,t.jsx)(n.td,{children:"Legacy integration"}),(0,t.jsx)(n.td,{children:"Reusability"}),(0,t.jsx)(n.td,{children:"Complexity"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Decorator"})}),(0,t.jsx)(n.td,{children:"Dynamic responsibilities"}),(0,t.jsx)(n.td,{children:"Runtime enhancements"}),(0,t.jsx)(n.td,{children:"Flexible"}),(0,t.jsx)(n.td,{children:"Many objects"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Facade"})}),(0,t.jsx)(n.td,{children:"Simplified interface"}),(0,t.jsx)(n.td,{children:"Complex subsystems"}),(0,t.jsx)(n.td,{children:"Easy to use"}),(0,t.jsx)(n.td,{children:"God object risk"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Proxy"})}),(0,t.jsx)(n.td,{children:"Controlled access"}),(0,t.jsx)(n.td,{children:"Lazy loading"}),(0,t.jsx)(n.td,{children:"Security"}),(0,t.jsx)(n.td,{children:"Latency"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Composite"})}),(0,t.jsx)(n.td,{children:"Tree structures"}),(0,t.jsx)(n.td,{children:"Part-whole hierarchies"}),(0,t.jsx)(n.td,{children:"Uniformity"}),(0,t.jsx)(n.td,{children:"Over-generalization"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Bridge"})}),(0,t.jsx)(n.td,{children:"Decouple abstraction"}),(0,t.jsx)(n.td,{children:"Cross-platform"}),(0,t.jsx)(n.td,{children:"Extensible"}),(0,t.jsx)(n.td,{children:"Complexity"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"behavioral-design-patterns",children:"Behavioral Design Patterns"}),"\n",(0,t.jsxs)(n.p,{children:["Behavioral patterns focus on ",(0,t.jsx)(n.strong,{children:"communication between objects"}),", defining how objects interact and distribute responsibility. They help make object interactions more flexible and maintainable."]}),"\n",(0,t.jsx)(n.h3,{id:"observer-pattern",children:"Observer Pattern"}),"\n",(0,t.jsxs)(n.p,{children:["Defines a ",(0,t.jsx)(n.strong,{children:"one-to-many dependency"})," between objects so that when one object changes state, all its dependents are notified automatically."]}),"\n",(0,t.jsx)(n.h4,{id:"when-to-use-11",children:"When to use"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"When changes to one object require changing others"}),"\n",(0,t.jsx)(n.li,{children:"For event handling systems, notifications"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"python-example-11",children:"Python Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from abc import ABC, abstractmethod\r\n\r\nclass Observer(ABC):\r\n    @abstractmethod\r\n    def update(self, message):\r\n        pass\r\n\r\nclass Subject:\r\n    def __init__(self):\r\n        self._observers = []\r\n\r\n    def attach(self, observer: Observer):\r\n        self._observers.append(observer)\r\n\r\n    def detach(self, observer: Observer):\r\n        self._observers.remove(observer)\r\n\r\n    def notify(self, message):\r\n        for observer in self._observers:\r\n            observer.update(message)\r\n\r\nclass EmailAlert(Observer):\r\n    def update(self, message):\r\n        print(f"Email Alert: {message}")\r\n\r\nclass SMSAlert(Observer):\r\n    def update(self, message):\r\n        print(f"SMS Alert: {message}")\r\n\r\n# Usage\r\nnewsletter = Subject()\r\nemail = EmailAlert()\r\nsms = SMSAlert()\r\n\r\nnewsletter.attach(email)\r\nnewsletter.attach(sms)\r\n\r\nnewsletter.notify("New article published!")\r\n# Output:\r\n# Email Alert: New article published!\r\n# SMS Alert: New article published!\n'})}),"\n",(0,t.jsx)(n.h4,{id:"pros--cons-11",children:"Pros & Cons"}),"\n",(0,t.jsxs)(n.p,{children:["\u2705 ",(0,t.jsx)(n.strong,{children:"Loose coupling between subject and observers"}),"\r\n\u274c ",(0,t.jsx)(n.strong,{children:"Can cause memory leaks if observers aren't properly detached"})]}),"\n",(0,t.jsx)(n.h3,{id:"strategy-pattern",children:"Strategy Pattern"}),"\n",(0,t.jsxs)(n.p,{children:["Defines a ",(0,t.jsx)(n.strong,{children:"family of algorithms"}),", encapsulates each one, and makes them interchangeable."]}),"\n",(0,t.jsx)(n.h4,{id:"when-to-use-12",children:"When to use"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"When you need different variants of an algorithm"}),"\n",(0,t.jsx)(n.li,{children:"To avoid conditional statements for selecting algorithms"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"python-example-12",children:"Python Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from abc import ABC, abstractmethod\r\n\r\nclass PaymentStrategy(ABC):\r\n    @abstractmethod\r\n    def pay(self, amount):\r\n        pass\r\n\r\nclass CreditCardPayment(PaymentStrategy):\r\n    def pay(self, amount):\r\n        print(f"Paid ${amount} via Credit Card")\r\n\r\nclass PayPalPayment(PaymentStrategy):\r\n    def pay(self, amount):\r\n        print(f"Paid ${amount} via PayPal")\r\n\r\nclass ShoppingCart:\r\n    def __init__(self, strategy: PaymentStrategy):\r\n        self._strategy = strategy\r\n\r\n    def checkout(self, amount):\r\n        self._strategy.pay(amount)\r\n\r\n# Usage\r\ncart = ShoppingCart(CreditCardPayment())\r\ncart.checkout(100)  # Output: "Paid $100 via Credit Card"\r\n\r\ncart = ShoppingCart(PayPalPayment())\r\ncart.checkout(50)   # Output: "Paid $50 via PayPal"\n'})}),"\n",(0,t.jsx)(n.h4,{id:"pros--cons-12",children:"Pros & Cons"}),"\n",(0,t.jsxs)(n.p,{children:["\u2705 ",(0,t.jsx)(n.strong,{children:"Easy to extend with new strategies"}),"\r\n\u274c ",(0,t.jsx)(n.strong,{children:"Can be overkill for simple conditional logic"})]}),"\n",(0,t.jsx)(n.h3,{id:"command-pattern",children:"Command Pattern"}),"\n",(0,t.jsx)(n.p,{children:"Encapsulates a request as an object, allowing parameterization of clients with different requests."}),"\n",(0,t.jsx)(n.h4,{id:"when-to-use-13",children:"When to use"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"For undo/redo functionality"}),"\n",(0,t.jsx)(n.li,{children:"Queueing requests"}),"\n",(0,t.jsx)(n.li,{children:"Implementing callbacks"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"python-example-13",children:"Python Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from abc import ABC, abstractmethod\r\n\r\nclass Command(ABC):\r\n    @abstractmethod\r\n    def execute(self):\r\n        pass\r\n\r\nclass Light:\r\n    def on(self):\r\n        print("Light is ON")\r\n\r\n    def off(self):\r\n        print("Light is OFF")\r\n\r\nclass LightOnCommand(Command):\r\n    def __init__(self, light: Light):\r\n        self._light = light\r\n\r\n    def execute(self):\r\n        self._light.on()\r\n\r\nclass LightOffCommand(Command):\r\n    def __init__(self, light: Light):\r\n        self._light = light\r\n\r\n    def execute(self):\r\n        self._light.off()\r\n\r\nclass RemoteControl:\r\n    def submit(self, command: Command):\r\n        command.execute()\r\n\r\n# Usage\r\nlight = Light()\r\non_command = LightOnCommand(light)\r\noff_command = LightOffCommand(light)\r\n\r\nremote = RemoteControl()\r\nremote.submit(on_command)   # Output: "Light is ON"\r\nremote.submit(off_command)  # Output: "Light is OFF"\n'})}),"\n",(0,t.jsx)(n.h4,{id:"pros--cons-13",children:"Pros & Cons"}),"\n",(0,t.jsxs)(n.p,{children:["\u2705 ",(0,t.jsx)(n.strong,{children:"Decouples invoker from receiver"}),"\r\n\u274c ",(0,t.jsx)(n.strong,{children:"Can lead to many command classes"})]}),"\n",(0,t.jsx)(n.h3,{id:"iterator-pattern",children:"Iterator Pattern"}),"\n",(0,t.jsxs)(n.p,{children:["Provides a way to ",(0,t.jsx)(n.strong,{children:"access elements of a collection"})," sequentially without exposing its underlying representation."]}),"\n",(0,t.jsx)(n.h4,{id:"when-to-use-14",children:"When to use"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"For uniform traversal of different data structures"}),"\n",(0,t.jsx)(n.li,{children:"When you want to hide collection implementation"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"python-example-14",children:"Python Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'class Book:\r\n    def __init__(self, title):\r\n        self.title = title\r\n\r\nclass BookShelf:\r\n    def __init__(self):\r\n        self._books = []\r\n\r\n    def add_book(self, book: Book):\r\n        self._books.append(book)\r\n\r\n    def __iter__(self):\r\n        return BookIterator(self._books)\r\n\r\nclass BookIterator:\r\n    def __init__(self, books):\r\n        self._books = books\r\n        self._index = 0\r\n\r\n    def __next__(self):\r\n        if self._index < len(self._books):\r\n            book = self._books[self._index]\r\n            self._index += 1\r\n            return book\r\n        raise StopIteration\r\n\r\n# Usage\r\nshelf = BookShelf()\r\nshelf.add_book(Book("Design Patterns"))\r\nshelf.add_book(Book("Clean Code"))\r\n\r\nfor book in shelf:\r\n    print(book.title)\r\n# Output:\r\n# Design Patterns\r\n# Clean Code\n'})}),"\n",(0,t.jsx)(n.h4,{id:"pros--cons-14",children:"Pros & Cons"}),"\n",(0,t.jsxs)(n.p,{children:["\u2705 ",(0,t.jsx)(n.strong,{children:"Single Responsibility Principle"}),"\r\n\u274c ",(0,t.jsx)(n.strong,{children:"Can be overkill for simple collections"})]}),"\n",(0,t.jsx)(n.h3,{id:"state-pattern",children:"State Pattern"}),"\n",(0,t.jsxs)(n.p,{children:["Allows an object to ",(0,t.jsx)(n.strong,{children:"alter its behavior when its internal state changes"}),"."]}),"\n",(0,t.jsx)(n.h4,{id:"when-to-use-15",children:"When to use"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"When an object's behavior depends on its state"}),"\n",(0,t.jsx)(n.li,{children:"To replace large conditional statements"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"python-example-15",children:"Python Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from abc import ABC, abstractmethod\r\n\r\nclass State(ABC):\r\n    @abstractmethod\r\n    def handle(self):\r\n        pass\r\n\r\nclass ConcreteStateA(State):\r\n    def handle(self):\r\n        print("Handling in State A")\r\n        return ConcreteStateB()\r\n\r\nclass ConcreteStateB(State):\r\n    def handle(self):\r\n        print("Handling in State B")\r\n        return ConcreteStateA()\r\n\r\nclass Context:\r\n    def __init__(self, state: State):\r\n        self._state = state\r\n\r\n    def request(self):\r\n        self._state = self._state.handle()\r\n\r\n# Usage\r\ncontext = Context(ConcreteStateA())\r\ncontext.request()  # Output: "Handling in State A" \u2192 switches to State B\r\ncontext.request()  # Output: "Handling in State B" \u2192 switches back to State A\n'})}),"\n",(0,t.jsx)(n.h4,{id:"pros--cons-15",children:"Pros & Cons"}),"\n",(0,t.jsxs)(n.p,{children:["\u2705 ",(0,t.jsx)(n.strong,{children:"Clean alternative to conditionals"}),"\r\n\u274c ",(0,t.jsx)(n.strong,{children:"Can be complex for few states"})]}),"\n",(0,t.jsx)(n.h3,{id:"template-method-pattern",children:"Template Method Pattern"}),"\n",(0,t.jsxs)(n.p,{children:["Defines the ",(0,t.jsx)(n.strong,{children:"skeleton of an algorithm"})," in a method, deferring some steps to subclasses."]}),"\n",(0,t.jsx)(n.h4,{id:"when-to-use-16",children:"When to use"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"For invariant algorithm structures"}),"\n",(0,t.jsx)(n.li,{children:"Framework development"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"python-example-16",children:"Python Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from abc import ABC, abstractmethod\r\n\r\nclass DataProcessor(ABC):\r\n    def process(self):  # Template method\r\n        self.load_data()\r\n        self.analyze()\r\n        self.report()\r\n\r\n    @abstractmethod\r\n    def load_data(self):\r\n        pass\r\n\r\n    @abstractmethod\r\n    def analyze(self):\r\n        pass\r\n\r\n    def report(self):  # Optional hook\r\n        print("Generating report...")\r\n\r\nclass CSVProcessor(DataProcessor):\r\n    def load_data(self):\r\n        print("Loading CSV data...")\r\n\r\n    def analyze(self):\r\n        print("Analyzing CSV data...")\r\n\r\n# Usage\r\nprocessor = CSVProcessor()\r\nprocessor.process()\r\n# Output:\r\n# Loading CSV data...\r\n# Analyzing CSV data...\r\n# Generating report...\n'})}),"\n",(0,t.jsx)(n.h4,{id:"pros--cons-16",children:"Pros & Cons"}),"\n",(0,t.jsxs)(n.p,{children:["\u2705 ",(0,t.jsx)(n.strong,{children:"Code reuse via inheritance"}),"\r\n\u274c ",(0,t.jsx)(n.strong,{children:"Can be rigid due to inheritance"})]}),"\n",(0,t.jsx)(n.h3,{id:"chain-of-responsibility",children:"Chain of Responsibility"}),"\n",(0,t.jsxs)(n.p,{children:["Passes a request along a ",(0,t.jsx)(n.strong,{children:"chain of handlers"}),", where each handler decides either to process the request or pass it to the next handler."]}),"\n",(0,t.jsx)(n.h4,{id:"when-to-use-17",children:"When to use"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"When multiple objects can handle a request"}),"\n",(0,t.jsx)(n.li,{children:"For event processing pipelines"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"python-example-17",children:"Python Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from abc import ABC, abstractmethod\r\n\r\nclass Handler(ABC):\r\n    def __init__(self, successor=None):\r\n        self._successor = successor\r\n\r\n    def handle(self, request):\r\n        if self._can_handle(request):\r\n            self._process(request)\r\n        elif self._successor:\r\n            self._successor.handle(request)\r\n\r\n    @abstractmethod\r\n    def _can_handle(self, request):\r\n        pass\r\n\r\n    @abstractmethod\r\n    def _process(self, request):\r\n        pass\r\n\r\nclass ConcreteHandlerA(Handler):\r\n    def _can_handle(self, request):\r\n        return request == "A"\r\n\r\n    def _process(self, request):\r\n        print(f"Handler A processing {request}")\r\n\r\nclass ConcreteHandlerB(Handler):\r\n    def _can_handle(self, request):\r\n        return request == "B"\r\n\r\n    def _process(self, request):\r\n        print(f"Handler B processing {request}")\r\n\r\n# Usage\r\nhandler_chain = ConcreteHandlerA(ConcreteHandlerB())\r\nhandler_chain.handle("A")  # Output: "Handler A processing A"\r\nhandler_chain.handle("B")  # Output: "Handler B processing B"\n'})}),"\n",(0,t.jsx)(n.h4,{id:"pros--cons-17",children:"Pros & Cons"}),"\n",(0,t.jsxs)(n.p,{children:["\u2705 ",(0,t.jsx)(n.strong,{children:"Decouples senders and receivers"}),"\r\n\u274c ",(0,t.jsx)(n.strong,{children:"Requests can go unhandled"})]}),"\n",(0,t.jsx)(n.h3,{id:"summary-table-2",children:"Summary Table"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Pattern"}),(0,t.jsx)(n.th,{children:"Purpose"}),(0,t.jsx)(n.th,{children:"Use Case"}),(0,t.jsx)(n.th,{children:"Pros"}),(0,t.jsx)(n.th,{children:"Cons"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Observer"})}),(0,t.jsx)(n.td,{children:"One-to-many dependency"}),(0,t.jsx)(n.td,{children:"Event systems"}),(0,t.jsx)(n.td,{children:"Loose coupling"}),(0,t.jsx)(n.td,{children:"Memory leaks"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Strategy"})}),(0,t.jsx)(n.td,{children:"Interchangeable algorithms"}),(0,t.jsx)(n.td,{children:"Payment methods"}),(0,t.jsx)(n.td,{children:"Easy extension"}),(0,t.jsx)(n.td,{children:"Over-engineering"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Command"})}),(0,t.jsx)(n.td,{children:"Encapsulate requests"}),(0,t.jsx)(n.td,{children:"Undo/redo operations"}),(0,t.jsx)(n.td,{children:"Decoupling"}),(0,t.jsx)(n.td,{children:"Many classes"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Iterator"})}),(0,t.jsx)(n.td,{children:"Sequential access"}),(0,t.jsx)(n.td,{children:"Collection traversal"}),(0,t.jsx)(n.td,{children:"SRP compliant"}),(0,t.jsx)(n.td,{children:"Overkill for simple cases"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"State"})}),(0,t.jsx)(n.td,{children:"Behavior change with state"}),(0,t.jsx)(n.td,{children:"Order processing"}),(0,t.jsx)(n.td,{children:"Clean code"}),(0,t.jsx)(n.td,{children:"Complexity"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Template Method"})}),(0,t.jsx)(n.td,{children:"Algorithm skeleton"}),(0,t.jsx)(n.td,{children:"Frameworks"}),(0,t.jsx)(n.td,{children:"Code reuse"}),(0,t.jsx)(n.td,{children:"Rigid structure"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Chain of Responsibility"})}),(0,t.jsx)(n.td,{children:"Handler pipeline"}),(0,t.jsx)(n.td,{children:"Middleware"}),(0,t.jsx)(n.td,{children:"Flexible processing"}),(0,t.jsx)(n.td,{children:"Unhandled requests"})]})]})]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>o});var s=r(96540);const t={},i=s.createContext(t);function l(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);