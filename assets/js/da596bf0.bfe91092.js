"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[8098],{14253:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"programming/programming-languages/javascript/es6","title":"ES6 and Beyond","description":"Modern JavaScript (ES6+) introduced several powerful features that simplify code, improve readability, and enable developers to write more expressive and maintainable applications. Below is a detailed explanation of these features.","source":"@site/docs/programming/programming-languages/javascript/es6.md","sourceDirName":"programming/programming-languages/javascript","slug":"/programming/programming-languages/javascript/es6","permalink":"/docs/programming/programming-languages/javascript/es6","draft":false,"unlisted":false,"editUrl":"https://github.com/imdeepmind/imdeepmind.github.io/blob/main/docs/programming/programming-languages/javascript/es6.md","tags":[],"version":"current","lastUpdatedBy":"Abhishek Chatterjee","lastUpdatedAt":1749211863000,"sidebarPosition":21,"frontMatter":{"sidebar_position":21},"sidebar":"tutorialSidebar","previous":{"title":"Event Handling","permalink":"/docs/programming/programming-languages/javascript/event-handling"},"next":{"title":"Concurrency and Parallelism","permalink":"/docs/programming/programming-languages/javascript/concurrency-and-parallelism"}}');var a=r(74848),s=r(28453);const o={sidebar_position:21},i="ES6 and Beyond",l={},c=[{value:"Template Literals",id:"template-literals",level:2},{value:"Destructuring",id:"destructuring",level:2},{value:"Array Destructuring",id:"array-destructuring",level:3},{value:"Object Destructuring",id:"object-destructuring",level:3},{value:"Default Values",id:"default-values",level:3},{value:"Nested Destructuring",id:"nested-destructuring",level:3},{value:"Spread and Rest Operators",id:"spread-and-rest-operators",level:2},{value:"Spread Operator",id:"spread-operator",level:3},{value:"Rest Operator",id:"rest-operator",level:3},{value:"Arrow Functions and Lexical Scoping",id:"arrow-functions-and-lexical-scoping",level:2},{value:"Syntax",id:"syntax",level:3},{value:"Lexical <code>this</code>",id:"lexical-this",level:3},{value:"Modules (import/export)",id:"modules-importexport",level:2},{value:"Exporting",id:"exporting",level:3},{value:"Importing",id:"importing",level:3},{value:"Internals",id:"internals",level:3},{value:"Generator Functions and Async Iterators",id:"generator-functions-and-async-iterators",level:2},{value:"Generator Functions",id:"generator-functions",level:3},{value:"Async Iterators",id:"async-iterators",level:3},{value:"Proxy and Reflect API",id:"proxy-and-reflect-api",level:2},{value:"Proxy",id:"proxy",level:3},{value:"Reflect API",id:"reflect-api",level:3},{value:"Proxy with Reflect",id:"proxy-with-reflect",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"es6-and-beyond",children:"ES6 and Beyond"})}),"\n",(0,a.jsx)(n.p,{children:"Modern JavaScript (ES6+) introduced several powerful features that simplify code, improve readability, and enable developers to write more expressive and maintainable applications. Below is a detailed explanation of these features."}),"\n",(0,a.jsx)(n.h2,{id:"template-literals",children:"Template Literals"}),"\n",(0,a.jsxs)(n.p,{children:["Template literals are a cleaner way to create strings and include dynamic values. They use backticks (",(0,a.jsx)(n.code,{children:"`"}),") instead of quotes and allow embedding expressions with ",(0,a.jsx)(n.code,{children:"${}"}),"."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Features:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Multi-line strings"}),"\n",(0,a.jsx)(n.li,{children:"String interpolation"}),"\n",(0,a.jsx)(n.li,{children:"Tagged templates"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Example:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'// Multi-line strings\nconst multiLine = `This is\na multi-line string.`;\nconsole.log(multiLine);\n\n// String interpolation\nconst name = "John";\nconst greeting = `Hello, ${name}!`;\nconsole.log(greeting); // Output: Hello, John!\n\n// Tagged templates\nfunction tag(strings, value) {\n  return `${strings[0]}${value.toUpperCase()}`;\n}\nconst message = tag`Hello, ${name}`;\nconsole.log(message); // Output: Hello, JOHN\n'})}),"\n",(0,a.jsx)(n.h2,{id:"destructuring",children:"Destructuring"}),"\n",(0,a.jsx)(n.p,{children:"Destructuring allows you to unpack values from arrays or objects into separate variables, making your code more concise."}),"\n",(0,a.jsx)(n.h3,{id:"array-destructuring",children:"Array Destructuring"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const [a, b, c] = [1, 2, 3];\nconsole.log(a, b, c); // Output: 1 2 3\n"})}),"\n",(0,a.jsx)(n.h3,{id:"object-destructuring",children:"Object Destructuring"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'const person = { name: "Alice", age: 25 };\nconst { name, age } = person;\nconsole.log(name, age); // Output: Alice 25\n'})}),"\n",(0,a.jsx)(n.h3,{id:"default-values",children:"Default Values"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const { x = 10, y = 20 } = { x: 5 };\nconsole.log(x, y); // Output: 5 20\n"})}),"\n",(0,a.jsx)(n.h3,{id:"nested-destructuring",children:"Nested Destructuring"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'const user = { id: 1, details: { name: "Bob", age: 30 } };\nconst {\n  details: { name, age },\n} = user;\nconsole.log(name, age); // Output: Bob 30\n'})}),"\n",(0,a.jsx)(n.h2,{id:"spread-and-rest-operators",children:"Spread and Rest Operators"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"..."})," operator is used for both spreading and collecting values."]}),"\n",(0,a.jsx)(n.h3,{id:"spread-operator",children:"Spread Operator"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Expands elements of arrays or objects."}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const arr1 = [1, 2];\nconst arr2 = [...arr1, 3, 4];\nconsole.log(arr2); // Output: [1, 2, 3, 4]\n\nconst obj1 = { a: 1 };\nconst obj2 = { ...obj1, b: 2 };\nconsole.log(obj2); // Output: { a: 1, b: 2 }\n"})}),"\n",(0,a.jsx)(n.h3,{id:"rest-operator",children:"Rest Operator"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Collects remaining elements into an array or object."}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const [first, ...rest] = [1, 2, 3, 4];\nconsole.log(first, rest); // Output: 1 [2, 3, 4]\n\nconst { a, ...others } = { a: 1, b: 2, c: 3 };\nconsole.log(others); // Output: { b: 2, c: 3 }\n"})}),"\n",(0,a.jsx)(n.h2,{id:"arrow-functions-and-lexical-scoping",children:"Arrow Functions and Lexical Scoping"}),"\n",(0,a.jsxs)(n.p,{children:["Arrow functions provide a concise syntax for writing functions and bind ",(0,a.jsx)(n.code,{children:"this"})," lexically, which means they inherit ",(0,a.jsx)(n.code,{children:"this"})," from the surrounding context."]}),"\n",(0,a.jsx)(n.h3,{id:"syntax",children:"Syntax"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"const add = (a, b) => a + b;\nconsole.log(add(2, 3)); // Output: 5\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"lexical-this",children:["Lexical ",(0,a.jsx)(n.code,{children:"this"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"function Counter() {\n  this.count = 0;\n  setInterval(() => {\n    this.count++;\n    console.log(this.count);\n  }, 1000);\n}\nnew Counter(); // Inherits `this` from Counter\n"})}),"\n",(0,a.jsx)(n.h2,{id:"modules-importexport",children:"Modules (import/export)"}),"\n",(0,a.jsxs)(n.p,{children:["JavaScript modules allow splitting code into reusable pieces. Modules use ",(0,a.jsx)(n.code,{children:"export"})," and ",(0,a.jsx)(n.code,{children:"import"})," keywords."]}),"\n",(0,a.jsx)(n.h3,{id:"exporting",children:"Exporting"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// utils.js\nexport const add = (a, b) => a + b;\nexport default function greet(name) {\n  return `Hello, ${name}`;\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"importing",children:"Importing"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'// main.js\nimport greet, { add } from "./utils.js";\nconsole.log(greet("John")); // Output: Hello, John\nconsole.log(add(2, 3)); // Output: 5\n'})}),"\n",(0,a.jsx)(n.h3,{id:"internals",children:"Internals"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Modules are loaded asynchronously."}),"\n",(0,a.jsx)(n.li,{children:"Each module runs in its own scope, preventing global namespace pollution."}),"\n",(0,a.jsx)(n.li,{children:"A module is evaluated only once, and its exports are cached."}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"generator-functions-and-async-iterators",children:"Generator Functions and Async Iterators"}),"\n",(0,a.jsxs)(n.p,{children:["Generators are special functions that can pause execution and resume later. They are defined using the ",(0,a.jsx)(n.code,{children:"function*"})," syntax."]}),"\n",(0,a.jsx)(n.h3,{id:"generator-functions",children:"Generator Functions"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"function* count() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\nconst iterator = count();\nconsole.log(iterator.next().value); // Output: 1\nconsole.log(iterator.next().value); // Output: 2\nconsole.log(iterator.next().value); // Output: 3\n"})}),"\n",(0,a.jsx)(n.h3,{id:"async-iterators",children:"Async Iterators"}),"\n",(0,a.jsxs)(n.p,{children:["Used to handle asynchronous data streams with the ",(0,a.jsx)(n.code,{children:"for await...of"})," loop."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'async function* fetchData() {\n  yield await Promise.resolve("Data 1");\n  yield await Promise.resolve("Data 2");\n}\n(async () => {\n  for await (const data of fetchData()) {\n    console.log(data);\n  }\n})();\n'})}),"\n",(0,a.jsx)(n.h2,{id:"proxy-and-reflect-api",children:"Proxy and Reflect API"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"Proxy"})," object allows you to create a proxy for an object to intercept and redefine operations like property access, assignment, and function invocation."]}),"\n",(0,a.jsx)(n.h3,{id:"proxy",children:"Proxy"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'const handler = {\n  get(target, prop) {\n    return prop in target ? target[prop] : "Property not found";\n  },\n};\nconst obj = { a: 1 };\nconst proxy = new Proxy(obj, handler);\nconsole.log(proxy.a); // Output: 1\nconsole.log(proxy.b); // Output: Property not found\n'})}),"\n",(0,a.jsx)(n.h3,{id:"reflect-api",children:"Reflect API"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"Reflect"})," object provides methods to perform operations on objects (like ",(0,a.jsx)(n.code,{children:"get"}),", ",(0,a.jsx)(n.code,{children:"set"}),", etc.) in a more predictable way."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'const obj = { a: 1 };\nReflect.set(obj, "b", 2);\nconsole.log(Reflect.get(obj, "b")); // Output: 2\n'})}),"\n",(0,a.jsx)(n.h3,{id:"proxy-with-reflect",children:"Proxy with Reflect"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'const handler = {\n  get(target, prop, receiver) {\n    console.log(`Accessing property "${prop}"`);\n    return Reflect.get(target, prop, receiver);\n  },\n};\nconst obj = { name: "John" };\nconst proxy = new Proxy(obj, handler);\nconsole.log(proxy.name); // Output: Accessing property "name" \\n John\n'})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>i});var t=r(96540);const a={},s=t.createContext(a);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);