"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[9618],{2535:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"programming-languages/javascript/call-stack","title":"Call Stack","description":"The Call Stack is a data structure that keeps track of the active execution contexts in a program. It follows the LIFO (Last In, First Out) principle, meaning the last function added to the stack is the first one to be executed and removed after completion.","source":"@site/docs/programming-languages/javascript/call-stack.md","sourceDirName":"programming-languages/javascript","slug":"/programming-languages/javascript/call-stack","permalink":"/docs/programming-languages/javascript/call-stack","draft":false,"unlisted":false,"editUrl":"https://github.com/imdeepmind/imdeepmind.github.io/blob/main/docs/programming-languages/javascript/call-stack.md","tags":[],"version":"current","lastUpdatedBy":"Abhishek Chatterjee","lastUpdatedAt":1735588931000,"sidebarPosition":9,"frontMatter":{"sidebar_position":9},"sidebar":"tutorialSidebar","previous":{"title":"Execution Context","permalink":"/docs/programming-languages/javascript/execution-context"},"next":{"title":"Microtask Queue, Macrotask Queue, and Rendering Queue","permalink":"/docs/programming-languages/javascript/queues"}}');var t=s(4848),c=s(8453);const r={sidebar_position:9},l="Call Stack",o={},a=[{value:"Purpose of the Call Stack",id:"purpose-of-the-call-stack",level:2},{value:"What is a Stack Frame?",id:"what-is-a-stack-frame",level:2},{value:"How the Call Stack Works",id:"how-the-call-stack-works",level:2},{value:"Example Code",id:"example-code",level:3},{value:"Execution Steps",id:"execution-steps",level:3},{value:"Final State",id:"final-state",level:3},{value:"How Recursive Functions Use the Call Stack",id:"how-recursive-functions-use-the-call-stack",level:2},{value:"Example of a Recursive Function:",id:"example-of-a-recursive-function",level:3},{value:"Errors in the Call Stack",id:"errors-in-the-call-stack",level:2},{value:"Stack Overflow",id:"stack-overflow",level:3},{value:"Error Stack Trace",id:"error-stack-trace",level:3},{value:"Key Takeaways",id:"key-takeaways",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"call-stack",children:"Call Stack"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.strong,{children:"Call Stack"})," is a data structure that keeps track of the active execution contexts in a program. It follows the ",(0,t.jsx)(n.strong,{children:"LIFO (Last In, First Out)"})," principle, meaning the last function added to the stack is the first one to be executed and removed after completion."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["When a function is called, a ",(0,t.jsx)(n.strong,{children:"Stack Frame"})," (representing its execution context) is created and pushed onto the stack."]}),"\n",(0,t.jsx)(n.li,{children:"When the function finishes execution, the corresponding Stack Frame is popped off the stack."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"purpose-of-the-call-stack",children:"Purpose of the Call Stack"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Manage Function Calls:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The Call Stack keeps track of all functions being executed, in the order they were called."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Handle Nested and Recursive Functions:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Nested or recursive function calls are managed through the Call Stack, ensuring the correct order of execution."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Track Execution Contexts:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Each Stack Frame in the Call Stack represents an ",(0,t.jsx)(n.strong,{children:"execution context"}),", which includes information about the function being executed (arguments, variables, ",(0,t.jsx)(n.code,{children:"this"})," binding, etc.)."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"what-is-a-stack-frame",children:"What is a Stack Frame?"}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.strong,{children:"Stack Frame"})," is an individual entry in the Call Stack, representing the execution context of a specific function. It contains:"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Function Arguments:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The arguments passed to the function."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Local Variables:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Variables declared inside the function."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Function Code:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The actual code being executed."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.strong,{children:["The ",(0,t.jsx)(n.code,{children:"this"})," Binding:"]})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["The value of ",(0,t.jsx)(n.code,{children:"this"})," in the function's execution context."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Outer Environment Reference:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"A reference to the parent function's lexical environment (for closures or nested functions)."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"how-the-call-stack-works",children:"How the Call Stack Works"}),"\n",(0,t.jsx)(n.p,{children:"To understand the Call Stack, let\u2019s walk through an example with detailed steps and a visualization."}),"\n",(0,t.jsx)(n.h3,{id:"example-code",children:"Example Code"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'function first() {\n  console.log("Inside first function");\n  second();\n  console.log("Exiting first function");\n}\n\nfunction second() {\n  console.log("Inside second function");\n  third();\n  console.log("Exiting second function");\n}\n\nfunction third() {\n  console.log("Inside third function");\n}\n\nfirst();\n'})}),"\n",(0,t.jsx)(n.h3,{id:"execution-steps",children:"Execution Steps"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Global Execution Context (GEC):"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"When the script starts, the global execution context is created and pushed onto the Call Stack."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.strong,{children:[(0,t.jsx)(n.code,{children:"first()"})," is Called:"]})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["A new Stack Frame for ",(0,t.jsx)(n.code,{children:"first()"})," is created and pushed onto the stack."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.strong,{children:[(0,t.jsx)(n.code,{children:"console.log()"})," Inside ",(0,t.jsx)(n.code,{children:"first()"}),":"]})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["A ",(0,t.jsx)(n.code,{children:"console.log()"})," statement is called, and its Stack Frame is pushed onto the stack temporarily. Once executed, it is popped off."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.strong,{children:[(0,t.jsx)(n.code,{children:"second()"})," is Called Inside ",(0,t.jsx)(n.code,{children:"first()"}),":"]})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["A new Stack Frame for ",(0,t.jsx)(n.code,{children:"second()"})," is created and pushed onto the stack."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.strong,{children:[(0,t.jsx)(n.code,{children:"console.log()"})," Inside ",(0,t.jsx)(n.code,{children:"second()"}),":"]})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["The ",(0,t.jsx)(n.code,{children:"console.log()"})," statement is called and then popped off after execution."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.strong,{children:[(0,t.jsx)(n.code,{children:"third()"})," is Called Inside ",(0,t.jsx)(n.code,{children:"second()"}),":"]})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["A new Stack Frame for ",(0,t.jsx)(n.code,{children:"third()"})," is created and pushed onto the stack."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.strong,{children:["Execution Completes for ",(0,t.jsx)(n.code,{children:"third()"}),":"]})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["The Stack Frame for ",(0,t.jsx)(n.code,{children:"third()"})," is popped off the stack."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.strong,{children:["Execution Completes for ",(0,t.jsx)(n.code,{children:"second()"}),":"]})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["The Stack Frame for ",(0,t.jsx)(n.code,{children:"second()"})," is popped off the stack."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.strong,{children:["Execution Completes for ",(0,t.jsx)(n.code,{children:"first()"}),":"]})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["The Stack Frame for ",(0,t.jsx)(n.code,{children:"first()"})," is popped off the stack."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Global Execution Context Remains:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Once all functions finish execution, the stack is empty except for the Global Execution Context, which is removed when the program ends."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.mermaid,{value:"sequenceDiagram\n    participant GlobalContext\n    participant first\n    participant second\n    participant third\n    participant consoleLog\n\n    GlobalContext->>first: Call first()\n    activate first\n    first->>consoleLog: Inside first()\n    activate consoleLog\n    consoleLog--\x3e>first: Complete\n    deactivate consoleLog\n\n    first->>second: Call second()\n    activate second\n    second->>consoleLog: Inside second()\n    activate consoleLog\n    consoleLog--\x3e>second: Complete\n    deactivate consoleLog\n\n    second->>third: Call third()\n    activate third\n    third->>consoleLog: Inside third()\n    activate consoleLog\n    consoleLog--\x3e>third: Complete\n    deactivate consoleLog\n    third--\x3e>second: Complete\n    deactivate third\n\n    second--\x3e>first: Complete\n    deactivate second\n\n    first--\x3e>GlobalContext: Complete\n    deactivate first\n"}),"\n",(0,t.jsx)(n.h3,{id:"final-state",children:"Final State"}),"\n",(0,t.jsx)(n.p,{children:"After all executions are complete, the Call Stack is empty except for the Global Execution Context, which is removed when the script finishes execution."}),"\n",(0,t.jsx)(n.h2,{id:"how-recursive-functions-use-the-call-stack",children:"How Recursive Functions Use the Call Stack"}),"\n",(0,t.jsxs)(n.p,{children:["Recursive functions create a new Stack Frame for each recursive call. If recursion depth becomes too large, it can result in a ",(0,t.jsx)(n.strong,{children:"Stack Overflow"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"example-of-a-recursive-function",children:"Example of a Recursive Function:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"function recursiveFunction(counter) {\n  if (counter === 0) {\n    return;\n  }\n  console.log(counter);\n  recursiveFunction(counter - 1);\n}\n\nrecursiveFunction(3);\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Execution Steps:"})}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Each call to ",(0,t.jsx)(n.code,{children:"recursiveFunction()"})," creates a new Stack Frame and pushes it onto the Call Stack."]}),"\n",(0,t.jsxs)(n.li,{children:["When ",(0,t.jsx)(n.code,{children:"counter === 0"}),", the function starts returning, and the Stack Frames are popped off one by one."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"errors-in-the-call-stack",children:"Errors in the Call Stack"}),"\n",(0,t.jsx)(n.h3,{id:"stack-overflow",children:"Stack Overflow"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Occurs when the Call Stack exceeds its size limit due to excessive function calls, often caused by infinite recursion or deeply nested function calls."}),"\n",(0,t.jsxs)(n.li,{children:["Example:","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"function infiniteRecursion() {\n  infiniteRecursion();\n}\ninfiniteRecursion(); // Uncaught RangeError: Maximum call stack size exceeded\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"error-stack-trace",children:"Error Stack Trace"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["When an error occurs, JavaScript provides a ",(0,t.jsx)(n.strong,{children:"stack trace"}),", showing the sequence of Stack Frames at the time of the error."]}),"\n",(0,t.jsx)(n.li,{children:"Example:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'function first() {\n  second();\n}\n\nfunction second() {\n  third();\n}\n\nfunction third() {\n  throw new Error("Something went wrong!");\n}\n\nfirst();\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Output:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Error: Something went wrong!\n    at third (<script>:8:11)\n    at second (<script>:4:5)\n    at first (<script>:2:5)\n    at <global> (<script>:12:1)\n"})}),"\n",(0,t.jsx)(n.p,{children:"The stack trace shows the sequence of function calls leading to the error, helping in debugging."}),"\n",(0,t.jsx)(n.h2,{id:"key-takeaways",children:"Key Takeaways"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Call Stack:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"A LIFO data structure that keeps track of the active execution contexts."}),"\n",(0,t.jsx)(n.li,{children:"Functions are pushed onto the stack when called and popped off when they finish."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Stack Frame:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Represents the execution context of a function."}),"\n",(0,t.jsxs)(n.li,{children:["Contains arguments, local variables, the ",(0,t.jsx)(n.code,{children:"this"})," binding, and outer environment reference."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Recursive Functions:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Use the Call Stack for each recursive call. Excessive recursion can lead to a ",(0,t.jsx)(n.strong,{children:"Stack Overflow"}),"."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Error Stack Trace:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Useful for debugging as it shows the sequence of function calls leading to an error."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Single-Threaded Nature:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"JavaScript uses the Call Stack to manage synchronous code execution."}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>l});var i=s(6540);const t={},c=i.createContext(t);function r(e){const n=i.useContext(c);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(c.Provider,{value:n},e.children)}}}]);