"use strict";(self.webpackChunkimdeepmind=self.webpackChunkimdeepmind||[]).push([[6725],{63253:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>a,frontMatter:()=>d,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"programming/programming-languages/python/data-structure","title":"Common Data Structures in Python","description":"Python provides several built-in data structures that are highly optimized and allow developers to efficiently manage and manipulate data. The key ones are list, dict, set, tuple, and str (string). Let\u2019s explore these data structures, their implementations, and the common methods associated with each.","source":"@site/docs/programming/programming-languages/python/data-structure.md","sourceDirName":"programming/programming-languages/python","slug":"/programming/programming-languages/python/data-structure","permalink":"/docs/programming/programming-languages/python/data-structure","draft":false,"unlisted":false,"editUrl":"https://github.com/imdeepmind/imdeepmind.github.io/blob/main/docs/programming/programming-languages/python/data-structure.md","tags":[],"version":"current","lastUpdatedBy":"Abhishek Chatterjee","lastUpdatedAt":1749211863000,"sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Variable Scoping","permalink":"/docs/programming/programming-languages/python/scoping"},"next":{"title":"Loops, Control Structures, and Functions","permalink":"/docs/programming/programming-languages/python/loop-control-functions"}}');var t=s(74848),r=s(28453);const d={sidebar_position:4},l="Common Data Structures in Python",c={},h=[{value:"List",id:"list",level:2},{value:"Characteristic",id:"characteristic",level:3},{value:"Implementation",id:"implementation",level:3},{value:"Time Complexity",id:"time-complexity",level:3},{value:"Common Methods",id:"common-methods",level:3},{value:"Example",id:"example",level:3},{value:"Dictionary (<code>dict</code>)",id:"dictionary-dict",level:2},{value:"Characteristics",id:"characteristics",level:3},{value:"Implementation",id:"implementation-1",level:3},{value:"Dictionary Keys",id:"dictionary-keys",level:3},{value:"Time Complexity",id:"time-complexity-1",level:3},{value:"Common Methods",id:"common-methods-1",level:3},{value:"Example",id:"example-1",level:3},{value:"Set",id:"set",level:2},{value:"Characteristics",id:"characteristics-1",level:3},{value:"Time Complexity",id:"time-complexity-2",level:3},{value:"Common Methods",id:"common-methods-2",level:3},{value:"Example",id:"example-2",level:3},{value:"Tuple",id:"tuple",level:2},{value:"Characteristics",id:"characteristics-2",level:3},{value:"Time Complexity",id:"time-complexity-3",level:3},{value:"Common Methods",id:"common-methods-3",level:3},{value:"Example",id:"example-3",level:3},{value:"String (<code>str</code>)",id:"string-str",level:2},{value:"Characteristics",id:"characteristics-3",level:3},{value:"Time Complexity",id:"time-complexity-4",level:3},{value:"Common Methods",id:"common-methods-4",level:3},{value:"Example",id:"example-4",level:3},{value:"Comparison Table",id:"comparison-table",level:2}];function o(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"common-data-structures-in-python",children:"Common Data Structures in Python"})}),"\n",(0,t.jsxs)(n.p,{children:["Python provides several ",(0,t.jsx)(n.strong,{children:"built-in data structures"})," that are highly optimized and allow developers to efficiently manage and manipulate data. The key ones are ",(0,t.jsx)(n.code,{children:"list"}),", ",(0,t.jsx)(n.code,{children:"dict"}),", ",(0,t.jsx)(n.code,{children:"set"}),", ",(0,t.jsx)(n.code,{children:"tuple"}),", and ",(0,t.jsx)(n.code,{children:"str"})," (string). Let\u2019s explore these data structures, their implementations, and the common methods associated with each."]}),"\n",(0,t.jsx)(n.h2,{id:"list",children:"List"}),"\n",(0,t.jsxs)(n.p,{children:["A Python ",(0,t.jsx)(n.code,{children:"list"})," is a ",(0,t.jsx)(n.strong,{children:"dynamic array"})," that can hold heterogeneous elements and allows operations like insertion, deletion, and slicing."]}),"\n",(0,t.jsx)(n.h3,{id:"characteristic",children:"Characteristic"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Mutable"}),": You can modify its content."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Ordered"}),": Maintains the order of elements."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Heterogeneous"}),": Can store elements of different data types."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"implementation",children:"Implementation"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Implemented as a ",(0,t.jsx)(n.strong,{children:"dynamic array"})," in C."]}),"\n",(0,t.jsxs)(n.li,{children:["Uses a ",(0,t.jsx)(n.strong,{children:"contiguous memory block"}),", so accessing elements by index is ",(0,t.jsx)(n.strong,{children:"O(1)"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"When appending elements, the list grows dynamically, with Python overallocating memory to reduce frequent reallocations."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"time-complexity",children:"Time Complexity"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Operation"}),(0,t.jsx)(n.th,{children:"Complexity"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["Indexing (",(0,t.jsx)(n.code,{children:"list[i]"}),")"]}),(0,t.jsx)(n.td,{children:"O(1)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Appending"}),(0,t.jsx)(n.td,{children:"Amortized O(1)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Insertion (at i)"}),(0,t.jsx)(n.td,{children:"O(n)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Deletion (at i)"}),(0,t.jsx)(n.td,{children:"O(n)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Searching"}),(0,t.jsx)(n.td,{children:"O(n)"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"common-methods",children:"Common Methods"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:(0,t.jsx)(n.strong,{children:"Method"})}),(0,t.jsx)(n.th,{children:(0,t.jsx)(n.strong,{children:"Description"})})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"append(x)"})}),(0,t.jsx)(n.td,{children:"Adds an item to the end of the list."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"insert(i, x)"})}),(0,t.jsx)(n.td,{children:"Inserts an item at a specific index."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"remove(x)"})}),(0,t.jsx)(n.td,{children:"Removes the first occurrence of an item."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"pop([i])"})}),(0,t.jsx)(n.td,{children:"Removes and returns the item at the given index."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"extend(iterable)"})}),(0,t.jsx)(n.td,{children:"Extends the list by appending elements from an iterable."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"index(x[, start[, end]])"})}),(0,t.jsx)(n.td,{children:"Returns the index of the first occurrence of an item."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"count(x)"})}),(0,t.jsx)(n.td,{children:"Counts the number of occurrences of an item."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"sort(key=None, reverse=False)"})}),(0,t.jsx)(n.td,{children:"Sorts the list in ascending or descending order."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"reverse()"})}),(0,t.jsx)(n.td,{children:"Reverses the elements of the list in place."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"copy()"})}),(0,t.jsx)(n.td,{children:"Returns a shallow copy of the list."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"clear()"})}),(0,t.jsx)(n.td,{children:"Removes all items from the list."})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"lst = [1, 2, 3]\nlst.append(4)   # [1, 2, 3, 4]\nlst.insert(1, 10)  # [1, 10, 2, 3, 4]\nlst.remove(2)   # [1, 10, 3, 4]\nlst.sort(reverse=True)  # [10, 4, 3, 1]\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"dictionary-dict",children:["Dictionary (",(0,t.jsx)(n.code,{children:"dict"}),")"]}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.code,{children:"dict"})," is Python\u2019s implementation of a ",(0,t.jsx)(n.strong,{children:"hash table"}),", mapping keys to values for quick lookups."]}),"\n",(0,t.jsx)(n.h3,{id:"characteristics",children:"Characteristics"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Mutable"}),": You can modify its content."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Key-value pairs"}),": Keys must be unique and hashable, while values can be of any type."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Ordered"}),": Maintains insertion order (starting from Python 3.7)."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"implementation-1",children:"Implementation"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Uses a ",(0,t.jsx)(n.strong,{children:"hash table"})," with open addressing for collision resolution."]}),"\n",(0,t.jsxs)(n.li,{children:["Keys are hashed using Python\u2019s ",(0,t.jsx)(n.code,{children:"hash()"})," function to determine their position in the table."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"dictionary-keys",children:"Dictionary Keys"}),"\n",(0,t.jsx)(n.p,{children:"In Python, dictionary keys must be hashable objects. That means they must implement:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["a ",(0,t.jsx)(n.strong,{children:"hash"}),"() method (returns a constant hash value during its lifetime),"]}),"\n",(0,t.jsxs)(n.li,{children:["and an ",(0,t.jsx)(n.strong,{children:"eq"}),"() method (to check equality),"]}),"\n",(0,t.jsx)(n.li,{children:"and be immutable (i.e., their contents can't change)."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Following are the valid key types:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"strings"}),"\n",(0,t.jsx)(n.li,{children:"numbers"}),"\n",(0,t.jsx)(n.li,{children:"tuples"}),"\n",(0,t.jsx)(n.li,{children:"boolean"}),"\n",(0,t.jsx)(n.li,{children:"frozenset"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Following are invalid key types:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"lists"}),"\n",(0,t.jsx)(n.li,{children:"dictionaries"}),"\n",(0,t.jsx)(n.li,{children:"sets"}),"\n",(0,t.jsxs)(n.li,{children:["User-defined mutable objects, unless you override ",(0,t.jsx)(n.strong,{children:"hash"})," and ",(0,t.jsx)(n.strong,{children:"eq"})," properly"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"time-complexity-1",children:"Time Complexity"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Operation"}),(0,t.jsx)(n.th,{children:"Complexity"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["Insertion (",(0,t.jsx)(n.code,{children:"d[k] = v"}),")"]}),(0,t.jsx)(n.td,{children:"O(1)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["Lookup (",(0,t.jsx)(n.code,{children:"d[k]"}),")"]}),(0,t.jsx)(n.td,{children:"O(1)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["Deletion (",(0,t.jsx)(n.code,{children:"del d[k]"}),")"]}),(0,t.jsx)(n.td,{children:"O(1)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Iteration"}),(0,t.jsx)(n.td,{children:"O(n)"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"common-methods-1",children:"Common Methods"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:(0,t.jsx)(n.strong,{children:"Method"})}),(0,t.jsx)(n.th,{children:(0,t.jsx)(n.strong,{children:"Description"})})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"get(key[, default])"})}),(0,t.jsx)(n.td,{children:"Returns the value for a key, or a default if the key is not found."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"keys()"})}),(0,t.jsx)(n.td,{children:"Returns a view object of all keys in the dictionary."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"values()"})}),(0,t.jsx)(n.td,{children:"Returns a view object of all values in the dictionary."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"items()"})}),(0,t.jsx)(n.td,{children:"Returns a view object of all key-value pairs."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"pop(key[, default])"})}),(0,t.jsx)(n.td,{children:"Removes and returns the value of the specified key."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"popitem()"})}),(0,t.jsx)(n.td,{children:"Removes and returns a random key-value pair."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"update([other])"})}),(0,t.jsx)(n.td,{children:"Updates the dictionary with key-value pairs from another dictionary or iterable."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"setdefault(key[, default])"})}),(0,t.jsx)(n.td,{children:"Returns the value of a key, or sets it to a default if the key does not exist."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"clear()"})}),(0,t.jsx)(n.td,{children:"Removes all items from the dictionary."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"copy()"})}),(0,t.jsx)(n.td,{children:"Returns a shallow copy of the dictionary."})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"example-1",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"d = {'a': 1, 'b': 2}\nd['c'] = 3     # {'a': 1, 'b': 2, 'c': 3}\nprint(d.get('b'))  # 2\nd.pop('a')     # {'b': 2, 'c': 3}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"set",children:"Set"}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.code,{children:"set"})," is an ",(0,t.jsx)(n.strong,{children:"unordered collection"})," of unique elements, implemented as a hash table with only keys."]}),"\n",(0,t.jsx)(n.h3,{id:"characteristics-1",children:"Characteristics"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Mutable"}),": You can add or remove elements."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Unique elements"}),": Duplicates are not allowed."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Unordered"}),": Does not maintain insertion order."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"time-complexity-2",children:"Time Complexity"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Operation"}),(0,t.jsx)(n.th,{children:"Complexity"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["Membership testing (",(0,t.jsx)(n.code,{children:"x in s"}),")"]}),(0,t.jsx)(n.td,{children:"O(1)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["Insertion (",(0,t.jsx)(n.code,{children:"s.add(x)"}),")"]}),(0,t.jsx)(n.td,{children:"O(1)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["Deletion (",(0,t.jsx)(n.code,{children:"s.remove(x)"}),")"]}),(0,t.jsx)(n.td,{children:"O(1)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Iteration"}),(0,t.jsx)(n.td,{children:"O(n)"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"common-methods-2",children:"Common Methods"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:(0,t.jsx)(n.strong,{children:"Method"})}),(0,t.jsx)(n.th,{children:(0,t.jsx)(n.strong,{children:"Description"})})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"add(x)"})}),(0,t.jsx)(n.td,{children:"Adds an element to the set."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"remove(x)"})}),(0,t.jsxs)(n.td,{children:["Removes an element. Raises ",(0,t.jsx)(n.code,{children:"KeyError"})," if not found."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"discard(x)"})}),(0,t.jsx)(n.td,{children:"Removes an element. Does not raise an error if not found."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"pop()"})}),(0,t.jsx)(n.td,{children:"Removes and returns an arbitrary element."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"clear()"})}),(0,t.jsx)(n.td,{children:"Removes all elements from the set."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"union(*sets)"})}),(0,t.jsx)(n.td,{children:"Returns the union of sets."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"intersection(*sets)"})}),(0,t.jsx)(n.td,{children:"Returns the intersection of sets."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"difference(*sets)"})}),(0,t.jsx)(n.td,{children:"Returns the difference of sets."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"symmetric_difference(other)"})}),(0,t.jsx)(n.td,{children:"Returns elements not in both sets."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"copy()"})}),(0,t.jsx)(n.td,{children:"Returns a shallow copy of the set."})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"example-2",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"s = {1, 2, 3}\ns.add(4)         # {1, 2, 3, 4}\ns.remove(2)      # {1, 3, 4}\nprint(3 in s)    # True\n"})}),"\n",(0,t.jsx)(n.h2,{id:"tuple",children:"Tuple"}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.code,{children:"tuple"})," is an ",(0,t.jsx)(n.strong,{children:"immutable sequence"})," type, meaning its content cannot be changed after creation."]}),"\n",(0,t.jsx)(n.h3,{id:"characteristics-2",children:"Characteristics"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Immutable"}),": Once created, it cannot be modified."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Ordered"}),": Maintains the order of elements."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Heterogeneous"}),": Can store elements of different types."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Hashable"}),": Tuples can be used as dictionary keys or set elements if all their items are hashable."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"time-complexity-3",children:"Time Complexity"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Operation"}),(0,t.jsx)(n.th,{children:"Complexity"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["Indexing (",(0,t.jsx)(n.code,{children:"t[i]"}),")"]}),(0,t.jsx)(n.td,{children:"O(1)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Iteration"}),(0,t.jsx)(n.td,{children:"O(n)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["Slicing (",(0,t.jsx)(n.code,{children:"t[a:b]"}),")"]}),(0,t.jsx)(n.td,{children:"O(k), where k is the slice length"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"common-methods-3",children:"Common Methods"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:(0,t.jsx)(n.strong,{children:"Method"})}),(0,t.jsx)(n.th,{children:(0,t.jsx)(n.strong,{children:"Description"})})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"count(x)"})}),(0,t.jsx)(n.td,{children:"Counts the number of occurrences of an item."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"index(x[, start[, end]])"})}),(0,t.jsx)(n.td,{children:"Returns the index of the first occurrence of an item."})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"example-3",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"t = (1, 2, 3)\nprint(t[1])      # 2\nprint(t.count(2))  # 1\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"string-str",children:["String (",(0,t.jsx)(n.code,{children:"str"}),")"]}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.code,{children:"str"})," is an ",(0,t.jsx)(n.strong,{children:"immutable sequence"})," of characters used to represent text."]}),"\n",(0,t.jsx)(n.h3,{id:"characteristics-3",children:"Characteristics"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Immutable"}),": You cannot change its content."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Ordered"}),": Maintains the order of characters."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Unicode support"}),": Fully supports Unicode, allowing multilingual text handling."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"time-complexity-4",children:"Time Complexity"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Operation"}),(0,t.jsx)(n.th,{children:"Complexity"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["Indexing (",(0,t.jsx)(n.code,{children:"s[i]"}),")"]}),(0,t.jsx)(n.td,{children:"O(1)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Concatenation"}),(0,t.jsx)(n.td,{children:"O(n), where n is the length of the resulting string"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["Slicing (",(0,t.jsx)(n.code,{children:"s[a:b]"}),")"]}),(0,t.jsx)(n.td,{children:"O(k), where k is the slice length"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Iteration"}),(0,t.jsx)(n.td,{children:"O(n)"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"common-methods-4",children:"Common Methods"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:(0,t.jsx)(n.strong,{children:"Method"})}),(0,t.jsx)(n.th,{children:(0,t.jsx)(n.strong,{children:"Description"})})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"upper()"})}),(0,t.jsx)(n.td,{children:"Converts all characters to uppercase."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"lower()"})}),(0,t.jsx)(n.td,{children:"Converts all characters to lowercase."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"strip([chars])"})}),(0,t.jsx)(n.td,{children:"Removes leading and trailing characters."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"replace(old, new[, count])"})}),(0,t.jsx)(n.td,{children:"Replaces occurrences of a substring."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"split([sep])"})}),(0,t.jsx)(n.td,{children:"Splits the string into a list based on a separator."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"join(iterable)"})}),(0,t.jsx)(n.td,{children:"Joins elements of an iterable with the string as a separator."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"find(sub[, start[, end]])"})}),(0,t.jsx)(n.td,{children:"Returns the index of the first occurrence of a substring."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"count(sub[, start[, end]])"})}),(0,t.jsx)(n.td,{children:"Counts the occurrences of a substring."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"startswith(prefix)"})}),(0,t.jsx)(n.td,{children:"Checks if the string starts with a prefix."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"endswith(suffix)"})}),(0,t.jsx)(n.td,{children:"Checks if the string ends with a suffix."})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"example-4",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"s = \"hello world\"\nprint(s.upper())      # HELLO WORLD\nprint(s.split())      # ['hello', 'world']\nprint(s.find('o'))    # 4\n"})}),"\n",(0,t.jsx)(n.h2,{id:"comparison-table",children:"Comparison Table"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:(0,t.jsx)(n.strong,{children:"Data Structure"})}),(0,t.jsx)(n.th,{children:(0,t.jsx)(n.strong,{children:"Ordered"})}),(0,t.jsx)(n.th,{children:(0,t.jsx)(n.strong,{children:"Mutable"})}),(0,t.jsx)(n.th,{children:(0,t.jsx)(n.strong,{children:"Unique Elements"})}),(0,t.jsx)(n.th,{children:(0,t.jsx)(n.strong,{children:"Underlying Implementation"})})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"list"})}),(0,t.jsx)(n.td,{children:"Yes"}),(0,t.jsx)(n.td,{children:"Yes"}),(0,t.jsx)(n.td,{children:"No"}),(0,t.jsx)(n.td,{children:"Dynamic array"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"dict"})}),(0,t.jsx)(n.td,{children:"Yes (3.7+)"}),(0,t.jsx)(n.td,{children:"Yes"}),(0,t.jsx)(n.td,{children:"Keys are unique"}),(0,t.jsx)(n.td,{children:"Hash table"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"set"})}),(0,t.jsx)(n.td,{children:"No"}),(0,t.jsx)(n.td,{children:"Yes"}),(0,t.jsx)(n.td,{children:"Yes"}),(0,t.jsx)(n.td,{children:"Hash table"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"tuple"})}),(0,t.jsx)(n.td,{children:"Yes"}),(0,t.jsx)(n.td,{children:"No"}),(0,t.jsx)(n.td,{children:"No"}),(0,t.jsx)(n.td,{children:"Fixed-size array"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"str"})}),(0,t.jsx)(n.td,{children:"Yes"}),(0,t.jsx)(n.td,{children:"No"}),(0,t.jsx)(n.td,{children:"N/A"}),(0,t.jsx)(n.td,{children:"Immutable sequence"})]})]})]}),"\n",(0,t.jsx)(n.p,{children:"This detailed breakdown provides insights into the use cases, methods, and underlying optimizations of Python's built-in data structures."})]})}function a(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>l});var i=s(96540);const t={},r=i.createContext(t);function d(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);